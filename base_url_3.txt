URL: https://api.recommender.gigalogy.com/redoc
{"openapi":"3.0.2","info":{"title":"Gigalogy Recommender","description":"Combining user needs, business strategy and recommend actions which will maximize user satisfaction and business growth.","version":"v1"},"paths":{"/v1/mappers":{"get":{"tags":["Catalog Mapping"],"summary":"Get mapper","description":"Get the mapped keys between your data source and our recommender system.","operationId":"get_mapper_v1_mappers_get","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/mappers\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/mappers\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/mappers\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/mappers\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/mappers\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/mappers\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/mappers\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/mappers\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/mappers',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/mappers\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/mappers\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/mappers\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/mappers');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/mappers');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/mappers\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/mappers\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/mappers\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/mappers \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/mappers\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["Catalog Mapping"],"summary":"Update a mapper","description":"This endpoint updates the mapped keys. Please checkout the schema from the\nrequest body section for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| item_id | str | str | item_id is the unit of recommended items and typically should be the Unique ID of your products. choose the parameter from your data source that you want to be the unit of recommendation. |\n| title | str | str | Represents your product / item title. |\n| second_title | Optional[str] | str | If your item has a catch copy / headline field you can assign it here. |\n| third_title | Optional[str] | str | If you have another field you want to use as a title level assign it here. |\n| fourth_title | Optional[str] | str | If you have another field you want to use as a title level assign it here. |\n| availability | str | bool | Represents whether your item is available or not. Data type for this key is `boolean`. Make sure to adjust your data accordingly. |\n| description | Optional[str] | str | Represents your product details information. |\n| image_url | Optional[str] | Depends on your data source | Represents image url of your data source. *This is required if you want to use image recommend end point* |\n| image_url_type | Optional[Enum] | Selected enum value | Based on this our recommended will choose how to process your image url data. Available values are `STR`, `LIST_STR`, `LIST_DICT`, `DICT` *This is required if you want to use image recommend end point* |\n| item_url | str | str | Represents your product / item details page url |\n| price | str | int | Represents your product / item price. |\n| category | List[str] | str | Represents your category list. You can add multiple category here. |\n| flag | List[str] | bool | Represents list of flags available in your dataset. Flag value data type is `boolean`. Please do not use keys which contains other types of data as flag. |","operationId":"put_mapper_v1_mappers_put","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MapperSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/mappers\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/mappers\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/mappers\"\n\n\tpayload := strings.NewReader(\"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/mappers\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/mappers\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/mappers\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"key_map\": {\n    \"item_id\": \"item_id\",\n    \"title\": \"title\",\n    \"second_title\": \"string\",\n    \"third_title\": \"string\",\n    \"fourth_title\": \"string\",\n    \"availability\": \"availability\",\n    \"description\": \"string\",\n    \"image_url\": \"string\",\n    \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n    \"item_url\": \"string\",\n    \"price\": \"price\",\n    \"categories\": [\n      {\n        \"name\": \"category_1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"name\": \"category_2\",\n        \"separator\": \"\"\n      }\n    ],\n    \"flag\": [\n      \"condition\"\n    ],\n    \"average_rating\": \"string\",\n    \"user_ratings_total\": \"string\",\n    \"custom\": [\n      {\n        \"name\": \"colum3\",\n        \"data_type\": \"FLOAT\"\n      },\n      {\n        \"name\": \"column4\",\n        \"data_type\": \"INT\"\n      }\n    ],\n    \"item_nearby_calculation\": false,\n    \"keywords_group_by\": \"string\",\n    \"gpt_enabled\": false\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/mappers\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/mappers\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  key_map: {\n    item_id: 'item_id',\n    title: 'title',\n    second_title: 'string',\n    third_title: 'string',\n    fourth_title: 'string',\n    availability: 'availability',\n    description: 'string',\n    image_url: 'string',\n    image_url_type: 'STR or LIST_STR or LIST_DICT or DICT',\n    item_url: 'string',\n    price: 'price',\n    categories: [{name: 'category_1', separator: '_'}, {name: 'category_2', separator: ''}],\n    flag: ['condition'],\n    average_rating: 'string',\n    user_ratings_total: 'string',\n    custom: [{name: 'colum3', data_type: 'FLOAT'}, {name: 'column4', data_type: 'INT'}],\n    item_nearby_calculation: false,\n    keywords_group_by: 'string',\n    gpt_enabled: false\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/mappers',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    key_map: {\n      item_id: 'item_id',\n      title: 'title',\n      second_title: 'string',\n      third_title: 'string',\n      fourth_title: 'string',\n      availability: 'availability',\n      description: 'string',\n      image_url: 'string',\n      image_url_type: 'STR or LIST_STR or LIST_DICT or DICT',\n      item_url: 'string',\n      price: 'price',\n      categories: [{name: 'category_1', separator: '_'}, {name: 'category_2', separator: ''}],\n      flag: ['condition'],\n      average_rating: 'string',\n      user_ratings_total: 'string',\n      custom: [{name: 'colum3', data_type: 'FLOAT'}, {name: 'column4', data_type: 'INT'}],\n      item_nearby_calculation: false,\n      keywords_group_by: 'string',\n      gpt_enabled: false\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/mappers\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"key_map\": {\n    \"item_id\": \"item_id\",\n    \"title\": \"title\",\n    \"second_title\": \"string\",\n    \"third_title\": \"string\",\n    \"fourth_title\": \"string\",\n    \"availability\": \"availability\",\n    \"description\": \"string\",\n    \"image_url\": \"string\",\n    \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n    \"item_url\": \"string\",\n    \"price\": \"price\",\n    \"categories\": [\n      {\n        \"name\": \"category_1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"name\": \"category_2\",\n        \"separator\": \"\"\n      }\n    ],\n    \"flag\": [\n      \"condition\"\n    ],\n    \"average_rating\": \"string\",\n    \"user_ratings_total\": \"string\",\n    \"custom\": [\n      {\n        \"name\": \"colum3\",\n        \"data_type\": \"FLOAT\"\n      },\n      {\n        \"name\": \"column4\",\n        \"data_type\": \"INT\"\n      }\n    ],\n    \"item_nearby_calculation\": false,\n    \"keywords_group_by\": \"string\",\n    \"gpt_enabled\": false\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"key_map\": @{ @\"item_id\": @\"item_id\", @\"title\": @\"title\", @\"second_title\": @\"string\", @\"third_title\": @\"string\", @\"fourth_title\": @\"string\", @\"availability\": @\"availability\", @\"description\": @\"string\", @\"image_url\": @\"string\", @\"image_url_type\": @\"STR or LIST_STR or LIST_DICT or DICT\", @\"item_url\": @\"string\", @\"price\": @\"price\", @\"categories\": @[ @{ @\"name\": @\"category_1\", @\"separator\": @\"_\" }, @{ @\"name\": @\"category_2\", @\"separator\": @\"\" } ], @\"flag\": @[ @\"condition\" ], @\"average_rating\": @\"string\", @\"user_ratings_total\": @\"string\", @\"custom\": @[ @{ @\"name\": @\"colum3\", @\"data_type\": @\"FLOAT\" }, @{ @\"name\": @\"column4\", @\"data_type\": @\"INT\" } ], @\"item_nearby_calculation\": @NO, @\"keywords_group_by\": @\"string\", @\"gpt_enabled\": @NO } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/mappers\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/mappers\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/mappers');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/mappers');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/mappers\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/mappers\"\n\npayload = {\"key_map\": {\n        \"item_id\": \"item_id\",\n        \"title\": \"title\",\n        \"second_title\": \"string\",\n        \"third_title\": \"string\",\n        \"fourth_title\": \"string\",\n        \"availability\": \"availability\",\n        \"description\": \"string\",\n        \"image_url\": \"string\",\n        \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n        \"item_url\": \"string\",\n        \"price\": \"price\",\n        \"categories\": [\n            {\n                \"name\": \"category_1\",\n                \"separator\": \"_\"\n            },\n            {\n                \"name\": \"category_2\",\n                \"separator\": \"\"\n            }\n        ],\n        \"flag\": [\"condition\"],\n        \"average_rating\": \"string\",\n        \"user_ratings_total\": \"string\",\n        \"custom\": [\n            {\n                \"name\": \"colum3\",\n                \"data_type\": \"FLOAT\"\n            },\n            {\n                \"name\": \"column4\",\n                \"data_type\": \"INT\"\n            }\n        ],\n        \"item_nearby_calculation\": False,\n        \"keywords_group_by\": \"string\",\n        \"gpt_enabled\": False\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/mappers\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/mappers \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"key_map\": [\n    \"item_id\": \"item_id\",\n    \"title\": \"title\",\n    \"second_title\": \"string\",\n    \"third_title\": \"string\",\n    \"fourth_title\": \"string\",\n    \"availability\": \"availability\",\n    \"description\": \"string\",\n    \"image_url\": \"string\",\n    \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n    \"item_url\": \"string\",\n    \"price\": \"price\",\n    \"categories\": [\n      [\n        \"name\": \"category_1\",\n        \"separator\": \"_\"\n      ],\n      [\n        \"name\": \"category_2\",\n        \"separator\": \"\"\n      ]\n    ],\n    \"flag\": [\"condition\"],\n    \"average_rating\": \"string\",\n    \"user_ratings_total\": \"string\",\n    \"custom\": [\n      [\n        \"name\": \"colum3\",\n        \"data_type\": \"FLOAT\"\n      ],\n      [\n        \"name\": \"column4\",\n        \"data_type\": \"INT\"\n      ]\n    ],\n    \"item_nearby_calculation\": false,\n    \"keywords_group_by\": \"string\",\n    \"gpt_enabled\": false\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/mappers\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"post":{"tags":["Catalog Mapping"],"summary":"Map data source keys with recommender keys","description":"This endpoint map data source keys with our recommender keys. Our recommender\nsystem can understand your data by mapping keys. This is the core part of the\nrecommender system so the schema should be followed properly to successfully map\nyour data. Please checkout the schema from the request body section for details\nabout the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| item_id | str | str | item_id is the unit of recommended items and typically should be the Unique ID of your products. choose the parameter from your data source that you want to be the unit of recommendation. |\n| title | str | str | Represents your product or item title. |\n| second_title | Optional[str] | str | If your item has a catch copy or headline field you can assign it here. |\n| third_title | Optional[str] | str | If you have another field you want to use as a title level assign it here. |\n| fourth_title | Optional[str] | str | If you have another field you want to use as a title level assign it here. |\n| availability | str | bool | Represents whether your item is available or not. Data type for this key is `boolean`. Make sure to adjust your data accordingly. |\n| description | Optional[str] | str | Represents your product details information. |\n| image_url | Optional[str] | Depends on your data source | Represents image url of your data source. *This is required if you want to use image recommend end point* |\n| image_url_type | Optional[Enum] | Selected enum value | Based on this our recommended will choose how to process your image url data. Available values are `STR`, `LIST_STR`, `LIST_DICT`, `DICT` *This is required if you want to use image recommend end point* |\n| item_url | str | str | Represents your product or tem details page url |\n| price | str | int | Represents your product or item price. |\n| categories | List[Dict[str,str]] | str | Represents your category list. You can add multiple category here. |\n| flag | List[str] | bool | Represents list of flags available in your dataset. Flag value data type is `boolean`. Please do not use keys which contains other types of data as flag. |","operationId":"post_mapper_v1_mappers_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MapperSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/mappers\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/mappers\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/mappers\"\n\n\tpayload := strings.NewReader(\"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/mappers\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/mappers\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/mappers\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"key_map\": {\n    \"item_id\": \"item_id\",\n    \"title\": \"title\",\n    \"second_title\": \"string\",\n    \"third_title\": \"string\",\n    \"fourth_title\": \"string\",\n    \"availability\": \"availability\",\n    \"description\": \"string\",\n    \"image_url\": \"string\",\n    \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n    \"item_url\": \"string\",\n    \"price\": \"price\",\n    \"categories\": [\n      {\n        \"name\": \"category_1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"name\": \"category_2\",\n        \"separator\": \"\"\n      }\n    ],\n    \"flag\": [\n      \"condition\"\n    ],\n    \"average_rating\": \"string\",\n    \"user_ratings_total\": \"string\",\n    \"custom\": [\n      {\n        \"name\": \"colum3\",\n        \"data_type\": \"FLOAT\"\n      },\n      {\n        \"name\": \"column4\",\n        \"data_type\": \"INT\"\n      }\n    ],\n    \"item_nearby_calculation\": false,\n    \"keywords_group_by\": \"string\",\n    \"gpt_enabled\": false\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/mappers\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/mappers\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  key_map: {\n    item_id: 'item_id',\n    title: 'title',\n    second_title: 'string',\n    third_title: 'string',\n    fourth_title: 'string',\n    availability: 'availability',\n    description: 'string',\n    image_url: 'string',\n    image_url_type: 'STR or LIST_STR or LIST_DICT or DICT',\n    item_url: 'string',\n    price: 'price',\n    categories: [{name: 'category_1', separator: '_'}, {name: 'category_2', separator: ''}],\n    flag: ['condition'],\n    average_rating: 'string',\n    user_ratings_total: 'string',\n    custom: [{name: 'colum3', data_type: 'FLOAT'}, {name: 'column4', data_type: 'INT'}],\n    item_nearby_calculation: false,\n    keywords_group_by: 'string',\n    gpt_enabled: false\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/mappers',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    key_map: {\n      item_id: 'item_id',\n      title: 'title',\n      second_title: 'string',\n      third_title: 'string',\n      fourth_title: 'string',\n      availability: 'availability',\n      description: 'string',\n      image_url: 'string',\n      image_url_type: 'STR or LIST_STR or LIST_DICT or DICT',\n      item_url: 'string',\n      price: 'price',\n      categories: [{name: 'category_1', separator: '_'}, {name: 'category_2', separator: ''}],\n      flag: ['condition'],\n      average_rating: 'string',\n      user_ratings_total: 'string',\n      custom: [{name: 'colum3', data_type: 'FLOAT'}, {name: 'column4', data_type: 'INT'}],\n      item_nearby_calculation: false,\n      keywords_group_by: 'string',\n      gpt_enabled: false\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/mappers\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"key_map\": {\n    \"item_id\": \"item_id\",\n    \"title\": \"title\",\n    \"second_title\": \"string\",\n    \"third_title\": \"string\",\n    \"fourth_title\": \"string\",\n    \"availability\": \"availability\",\n    \"description\": \"string\",\n    \"image_url\": \"string\",\n    \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n    \"item_url\": \"string\",\n    \"price\": \"price\",\n    \"categories\": [\n      {\n        \"name\": \"category_1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"name\": \"category_2\",\n        \"separator\": \"\"\n      }\n    ],\n    \"flag\": [\n      \"condition\"\n    ],\n    \"average_rating\": \"string\",\n    \"user_ratings_total\": \"string\",\n    \"custom\": [\n      {\n        \"name\": \"colum3\",\n        \"data_type\": \"FLOAT\"\n      },\n      {\n        \"name\": \"column4\",\n        \"data_type\": \"INT\"\n      }\n    ],\n    \"item_nearby_calculation\": false,\n    \"keywords_group_by\": \"string\",\n    \"gpt_enabled\": false\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"key_map\": @{ @\"item_id\": @\"item_id\", @\"title\": @\"title\", @\"second_title\": @\"string\", @\"third_title\": @\"string\", @\"fourth_title\": @\"string\", @\"availability\": @\"availability\", @\"description\": @\"string\", @\"image_url\": @\"string\", @\"image_url_type\": @\"STR or LIST_STR or LIST_DICT or DICT\", @\"item_url\": @\"string\", @\"price\": @\"price\", @\"categories\": @[ @{ @\"name\": @\"category_1\", @\"separator\": @\"_\" }, @{ @\"name\": @\"category_2\", @\"separator\": @\"\" } ], @\"flag\": @[ @\"condition\" ], @\"average_rating\": @\"string\", @\"user_ratings_total\": @\"string\", @\"custom\": @[ @{ @\"name\": @\"colum3\", @\"data_type\": @\"FLOAT\" }, @{ @\"name\": @\"column4\", @\"data_type\": @\"INT\" } ], @\"item_nearby_calculation\": @NO, @\"keywords_group_by\": @\"string\", @\"gpt_enabled\": @NO } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/mappers\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/mappers\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/mappers');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/mappers');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/mappers\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/mappers\"\n\npayload = {\"key_map\": {\n        \"item_id\": \"item_id\",\n        \"title\": \"title\",\n        \"second_title\": \"string\",\n        \"third_title\": \"string\",\n        \"fourth_title\": \"string\",\n        \"availability\": \"availability\",\n        \"description\": \"string\",\n        \"image_url\": \"string\",\n        \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n        \"item_url\": \"string\",\n        \"price\": \"price\",\n        \"categories\": [\n            {\n                \"name\": \"category_1\",\n                \"separator\": \"_\"\n            },\n            {\n                \"name\": \"category_2\",\n                \"separator\": \"\"\n            }\n        ],\n        \"flag\": [\"condition\"],\n        \"average_rating\": \"string\",\n        \"user_ratings_total\": \"string\",\n        \"custom\": [\n            {\n                \"name\": \"colum3\",\n                \"data_type\": \"FLOAT\"\n            },\n            {\n                \"name\": \"column4\",\n                \"data_type\": \"INT\"\n            }\n        ],\n        \"item_nearby_calculation\": False,\n        \"keywords_group_by\": \"string\",\n        \"gpt_enabled\": False\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/mappers\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"key_map\\\":{\\\"item_id\\\":\\\"item_id\\\",\\\"title\\\":\\\"title\\\",\\\"second_title\\\":\\\"string\\\",\\\"third_title\\\":\\\"string\\\",\\\"fourth_title\\\":\\\"string\\\",\\\"availability\\\":\\\"availability\\\",\\\"description\\\":\\\"string\\\",\\\"image_url\\\":\\\"string\\\",\\\"image_url_type\\\":\\\"STR or LIST_STR or LIST_DICT or DICT\\\",\\\"item_url\\\":\\\"string\\\",\\\"price\\\":\\\"price\\\",\\\"categories\\\":[{\\\"name\\\":\\\"category_1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"name\\\":\\\"category_2\\\",\\\"separator\\\":\\\"\\\"}],\\\"flag\\\":[\\\"condition\\\"],\\\"average_rating\\\":\\\"string\\\",\\\"user_ratings_total\\\":\\\"string\\\",\\\"custom\\\":[{\\\"name\\\":\\\"colum3\\\",\\\"data_type\\\":\\\"FLOAT\\\"},{\\\"name\\\":\\\"column4\\\",\\\"data_type\\\":\\\"INT\\\"}],\\\"item_nearby_calculation\\\":false,\\\"keywords_group_by\\\":\\\"string\\\",\\\"gpt_enabled\\\":false}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/mappers \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"key_map\":{\"item_id\":\"item_id\",\"title\":\"title\",\"second_title\":\"string\",\"third_title\":\"string\",\"fourth_title\":\"string\",\"availability\":\"availability\",\"description\":\"string\",\"image_url\":\"string\",\"image_url_type\":\"STR or LIST_STR or LIST_DICT or DICT\",\"item_url\":\"string\",\"price\":\"price\",\"categories\":[{\"name\":\"category_1\",\"separator\":\"_\"},{\"name\":\"category_2\",\"separator\":\"\"}],\"flag\":[\"condition\"],\"average_rating\":\"string\",\"user_ratings_total\":\"string\",\"custom\":[{\"name\":\"colum3\",\"data_type\":\"FLOAT\"},{\"name\":\"column4\",\"data_type\":\"INT\"}],\"item_nearby_calculation\":false,\"keywords_group_by\":\"string\",\"gpt_enabled\":false}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"key_map\": [\n    \"item_id\": \"item_id\",\n    \"title\": \"title\",\n    \"second_title\": \"string\",\n    \"third_title\": \"string\",\n    \"fourth_title\": \"string\",\n    \"availability\": \"availability\",\n    \"description\": \"string\",\n    \"image_url\": \"string\",\n    \"image_url_type\": \"STR or LIST_STR or LIST_DICT or DICT\",\n    \"item_url\": \"string\",\n    \"price\": \"price\",\n    \"categories\": [\n      [\n        \"name\": \"category_1\",\n        \"separator\": \"_\"\n      ],\n      [\n        \"name\": \"category_2\",\n        \"separator\": \"\"\n      ]\n    ],\n    \"flag\": [\"condition\"],\n    \"average_rating\": \"string\",\n    \"user_ratings_total\": \"string\",\n    \"custom\": [\n      [\n        \"name\": \"colum3\",\n        \"data_type\": \"FLOAT\"\n      ],\n      [\n        \"name\": \"column4\",\n        \"data_type\": \"INT\"\n      ]\n    ],\n    \"item_nearby_calculation\": false,\n    \"keywords_group_by\": \"string\",\n    \"gpt_enabled\": false\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/mappers\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/keys":{"get":{"tags":["Catalog Integration"],"summary":"Get keys","description":"Get your data source keys.","operationId":"get_keys_v1_keys_get","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/keys\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/keys\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/keys\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/keys\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/keys\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/keys\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/keys\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/keys\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/keys',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/keys\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/keys\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/keys\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/keys');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/keys');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/keys\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/keys\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/keys\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/keys \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/keys\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["Catalog Integration"],"summary":"Update keys","description":"This endpoint updates(add / remove / re-order) your data source keys. It takes\nlist of key as required parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| keys | List[str] | str | List of column names with the same order as your data in CSV file. |","operationId":"put_keys_v1_keys_put","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/KeysSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/keys\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"keys\\\":[\\\"string\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/keys\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"keys\\\":[\\\"string\\\"]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/keys\"\n\n\tpayload := strings.NewReader(\"{\\\"keys\\\":[\\\"string\\\"]}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"keys\\\":[\\\"string\\\"]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/keys\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/keys\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"keys\\\":[\\\"string\\\"]}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/keys\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"keys\\\":[\\\"string\\\"]}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"keys\": [\n    \"string\"\n  ]\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/keys\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/keys\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({keys: ['string']}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/keys',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {keys: ['string']},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/keys\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"keys\": [\n    \"string\"\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"keys\": @[ @\"string\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/keys\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/keys\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"keys\\\":[\\\"string\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/keys');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"keys\":[\"string\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"keys\":[\"string\"]}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/keys');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"keys\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/keys\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/keys\"\n\npayload = {\"keys\": [\"string\"]}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/keys\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"keys\\\":[\\\"string\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/keys \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"keys\":[\"string\"]}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"keys\": [\"string\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/keys\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"post":{"tags":["Catalog Integration"],"summary":"Save column / key name with the same order as your data in the source file","description":"This endpoint saves column / key name with the same order as your data in the\nsource file. It takes list of keys as required parameter.\nThis endpoint is mandatory when you use CSV file as your data source and your CSV file\ndoes not contain headers. Make sure to enter the column names with the same\norder as your data in CSV file.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| keys | List[str] | str | List of column names with the same order as your data in CSV file. |","operationId":"post_keys_v1_keys_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/KeysSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/keys\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"keys\\\":[\\\"string\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/keys\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"keys\\\":[\\\"string\\\"]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/keys\"\n\n\tpayload := strings.NewReader(\"{\\\"keys\\\":[\\\"string\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"keys\\\":[\\\"string\\\"]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/keys\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/keys\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"keys\\\":[\\\"string\\\"]}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/keys\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"keys\\\":[\\\"string\\\"]}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"keys\": [\n    \"string\"\n  ]\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/keys\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/keys\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({keys: ['string']}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/keys',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {keys: ['string']},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/keys\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"keys\": [\n    \"string\"\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"keys\": @[ @\"string\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/keys\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/keys\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"keys\\\":[\\\"string\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/keys');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"keys\":[\"string\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"keys\":[\"string\"]}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/keys');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"keys\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/keys\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/keys\"\n\npayload = {\"keys\": [\"string\"]}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/keys\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"keys\\\":[\\\"string\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/keys \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"keys\":[\"string\"]}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"keys\": [\"string\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/keys\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/browse/mapper":{"get":{"tags":["Historical User Data Collection"],"summary":"Get browse mapper","description":"Get the mapped keys for browsed items between your data source and our recommender system.","operationId":"get_browse_mapper_v1_items_browse_mapper_get","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/browse/mapper\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/items/browse/mapper',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/items/browse/mapper\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/items/browse/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["Historical User Data Collection"],"summary":"Update browse mapper","description":"This endpoint updates the browse mapped keys. Please checkout the schema from the\nrequest body section for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |\n| date | str | date | Represents product / item browsing session. |","operationId":"put_browse_mapper_v1_items_browse_mapper_put","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MapperBrowseSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"browse_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"date\": \"browsed_at\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/browse/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  browse_key_map: {\n    user_id: 'user_id',\n    member_id: 'member_id',\n    item_id: 'item_id',\n    date: 'browsed_at'\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/items/browse/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    browse_key_map: {\n      user_id: 'user_id',\n      member_id: 'member_id',\n      item_id: 'item_id',\n      date: 'browsed_at'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"browse_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"date\": \"browsed_at\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"browse_key_map\": @{ @\"user_id\": @\"user_id\", @\"member_id\": @\"member_id\", @\"item_id\": @\"item_id\", @\"date\": @\"browsed_at\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/items/browse/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"\n\npayload = {\"browse_key_map\": {\n        \"user_id\": \"user_id\",\n        \"member_id\": \"member_id\",\n        \"item_id\": \"item_id\",\n        \"date\": \"browsed_at\"\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/items/browse/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"browse_key_map\": [\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"date\": \"browsed_at\"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"post":{"tags":["Historical User Data Collection"],"summary":"Map data source keys with recommender browse keys","description":"This endpoint map data source keys with our recommender browse keys. This step is\ncompulsory if you want to upload browse data from CSV file. Please checkout the\nschema from the request body section for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of logged out unique user. choose the parameter from your data source that you want to be the id of logged-out user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |\n| date | str | date | Represents product / item browsing session. |","operationId":"post_browse_mapper_v1_items_browse_mapper_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MapperBrowseSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"browse_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"date\": \"browsed_at\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/browse/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  browse_key_map: {\n    user_id: 'user_id',\n    member_id: 'member_id',\n    item_id: 'item_id',\n    date: 'browsed_at'\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/browse/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    browse_key_map: {\n      user_id: 'user_id',\n      member_id: 'member_id',\n      item_id: 'item_id',\n      date: 'browsed_at'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"browse_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"date\": \"browsed_at\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"browse_key_map\": @{ @\"user_id\": @\"user_id\", @\"member_id\": @\"member_id\", @\"item_id\": @\"item_id\", @\"date\": @\"browsed_at\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse/mapper');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/browse/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\"\n\npayload = {\"browse_key_map\": {\n        \"user_id\": \"user_id\",\n        \"member_id\": \"member_id\",\n        \"item_id\": \"item_id\",\n        \"date\": \"browsed_at\"\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"browse_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"date\\\":\\\"browsed_at\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/browse/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"browse_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"date\":\"browsed_at\"}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"browse_key_map\": [\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"date\": \"browsed_at\"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/browse/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/purchase/mapper":{"get":{"tags":["Historical User Data Collection"],"summary":"Get purchase mapper","description":"Get the mapped keys for purchased items between your data source and our recommender system.","operationId":"get_purchase_mapper_v1_items_purchase_mapper_get","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchase/mapper\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchase/mapper',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/items/purchase/mapper\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/items/purchase/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["Historical User Data Collection"],"summary":"Update purchase mapper","description":"This endpoint updates the purchase mapped keys. Please checkout the schema from the\nrequest body section for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |\n| price | str | float | Represents your product / item price. |\n| quantity | str | int | Represents number of purchased product / item. |\n| date | str | date | Represents product / item purchased time. |","operationId":"put_purchase_mapper_v1_items_purchase_mapper_put","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MapperPurchaseSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"purchase_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"price\": \"price\",\n    \"quantity\": \"quantity\",\n    \"date\": \"purchased_at\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchase/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  purchase_key_map: {\n    user_id: 'user_id',\n    member_id: 'member_id',\n    item_id: 'item_id',\n    price: 'price',\n    quantity: 'quantity',\n    date: 'purchased_at'\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchase/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    purchase_key_map: {\n      user_id: 'user_id',\n      member_id: 'member_id',\n      item_id: 'item_id',\n      price: 'price',\n      quantity: 'quantity',\n      date: 'purchased_at'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"purchase_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"price\": \"price\",\n    \"quantity\": \"quantity\",\n    \"date\": \"purchased_at\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"purchase_key_map\": @{ @\"user_id\": @\"user_id\", @\"member_id\": @\"member_id\", @\"item_id\": @\"item_id\", @\"price\": @\"price\", @\"quantity\": @\"quantity\", @\"date\": @\"purchased_at\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/items/purchase/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"\n\npayload = {\"purchase_key_map\": {\n        \"user_id\": \"user_id\",\n        \"member_id\": \"member_id\",\n        \"item_id\": \"item_id\",\n        \"price\": \"price\",\n        \"quantity\": \"quantity\",\n        \"date\": \"purchased_at\"\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/items/purchase/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"purchase_key_map\": [\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"price\": \"price\",\n    \"quantity\": \"quantity\",\n    \"date\": \"purchased_at\"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"post":{"tags":["Historical User Data Collection"],"summary":"Map data source keys with recommender purchase keys","description":"This endpoint map data source keys with our recommender browse keys. This step is\ncompulsory if you want to upload purchase data from CSV file. Please checkout the\nschema from the request body section for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |\n| price | str | float | Represents your product / item price. |\n| quantity | str | int | Represents number of purchased product / item. |\n| date | str | date | Represents product / item purchased time. |","operationId":"post_purchase_mapper_v1_items_purchase_mapper_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MapperPurchaseSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"purchase_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"price\": \"price\",\n    \"quantity\": \"quantity\",\n    \"date\": \"purchased_at\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchase/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  purchase_key_map: {\n    user_id: 'user_id',\n    member_id: 'member_id',\n    item_id: 'item_id',\n    price: 'price',\n    quantity: 'quantity',\n    date: 'purchased_at'\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchase/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    purchase_key_map: {\n      user_id: 'user_id',\n      member_id: 'member_id',\n      item_id: 'item_id',\n      price: 'price',\n      quantity: 'quantity',\n      date: 'purchased_at'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"purchase_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"price\": \"price\",\n    \"quantity\": \"quantity\",\n    \"date\": \"purchased_at\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"purchase_key_map\": @{ @\"user_id\": @\"user_id\", @\"member_id\": @\"member_id\", @\"item_id\": @\"item_id\", @\"price\": @\"price\", @\"quantity\": @\"quantity\", @\"date\": @\"purchased_at\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase/mapper');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/purchase/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\"\n\npayload = {\"purchase_key_map\": {\n        \"user_id\": \"user_id\",\n        \"member_id\": \"member_id\",\n        \"item_id\": \"item_id\",\n        \"price\": \"price\",\n        \"quantity\": \"quantity\",\n        \"date\": \"purchased_at\"\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"purchase_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"price\\\":\\\"price\\\",\\\"quantity\\\":\\\"quantity\\\",\\\"date\\\":\\\"purchased_at\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/purchase/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"purchase_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"price\":\"price\",\"quantity\":\"quantity\",\"date\":\"purchased_at\"}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"purchase_key_map\": [\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"price\": \"price\",\n    \"quantity\": \"quantity\",\n    \"date\": \"purchased_at\"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchase/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/rating/mapper":{"get":{"tags":["Historical User Data Collection"],"summary":"Get rating mapper","description":"Get the mapped keys for rated items between your data source and our recommender system.","operationId":"get_rating_mapper_v1_items_rating_mapper_get","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/rating/mapper\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/items/rating/mapper',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/items/rating/mapper\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/items/rating/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["Historical User Data Collection"],"summary":"Update rating mapper","description":"This endpoint updates the rating mapped keys. Please checkout the schema from the\nrequest body section for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |\n| rating | str | str | Represents rating given by user for specific product / item. choose the parameter from your data source that you want to be the rating key. |\n| date | str | date | Represents the time when a rating is given for specific product / item. |","operationId":"put_rating_mapper_v1_items_rating_mapper_put","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MapperRatingSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"rating_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"rating\": \"rating\",\n    \"date\": \"rated_at\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/rating/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  rating_key_map: {\n    user_id: 'user_id',\n    member_id: 'member_id',\n    item_id: 'item_id',\n    rating: 'rating',\n    date: 'rated_at'\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/items/rating/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    rating_key_map: {\n      user_id: 'user_id',\n      member_id: 'member_id',\n      item_id: 'item_id',\n      rating: 'rating',\n      date: 'rated_at'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"rating_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"rating\": \"rating\",\n    \"date\": \"rated_at\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"rating_key_map\": @{ @\"user_id\": @\"user_id\", @\"member_id\": @\"member_id\", @\"item_id\": @\"item_id\", @\"rating\": @\"rating\", @\"date\": @\"rated_at\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/items/rating/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"\n\npayload = {\"rating_key_map\": {\n        \"user_id\": \"user_id\",\n        \"member_id\": \"member_id\",\n        \"item_id\": \"item_id\",\n        \"rating\": \"rating\",\n        \"date\": \"rated_at\"\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/items/rating/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"rating_key_map\": [\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"rating\": \"rating\",\n    \"date\": \"rated_at\"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"post":{"tags":["Historical User Data Collection"],"summary":"Map data source keys with recommender rating keys","description":"This endpoint map data source keys with our recommender rating keys. This step is\ncompulsory if you want to upload rating data from CSV file. Please checkout the\nschema from the request body section for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| item_id | str | str | item_id is the unit of recommended items. choose the parameter from your data source that you want to be the unit of recommendation. |\n| rating | str | str | Represents rating given by user for specific product / item. choose the parameter from your data source that you want to be the rating key. |\n| date | str | date | Represents the time when a rating is given for specific product / item. |","operationId":"post_rating_mapper_v1_items_rating_mapper_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MapperRatingSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"rating_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"rating\": \"rating\",\n    \"date\": \"rated_at\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/rating/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  rating_key_map: {\n    user_id: 'user_id',\n    member_id: 'member_id',\n    item_id: 'item_id',\n    rating: 'rating',\n    date: 'rated_at'\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/rating/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    rating_key_map: {\n      user_id: 'user_id',\n      member_id: 'member_id',\n      item_id: 'item_id',\n      rating: 'rating',\n      date: 'rated_at'\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"rating_key_map\": {\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"rating\": \"rating\",\n    \"date\": \"rated_at\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"rating_key_map\": @{ @\"user_id\": @\"user_id\", @\"member_id\": @\"member_id\", @\"item_id\": @\"item_id\", @\"rating\": @\"rating\", @\"date\": @\"rated_at\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating/mapper');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/rating/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\"\n\npayload = {\"rating_key_map\": {\n        \"user_id\": \"user_id\",\n        \"member_id\": \"member_id\",\n        \"item_id\": \"item_id\",\n        \"rating\": \"rating\",\n        \"date\": \"rated_at\"\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"rating_key_map\\\":{\\\"user_id\\\":\\\"user_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"item_id\\\":\\\"item_id\\\",\\\"rating\\\":\\\"rating\\\",\\\"date\\\":\\\"rated_at\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/rating/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"rating_key_map\":{\"user_id\":\"user_id\",\"member_id\":\"member_id\",\"item_id\":\"item_id\",\"rating\":\"rating\",\"date\":\"rated_at\"}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"rating_key_map\": [\n    \"user_id\": \"user_id\",\n    \"member_id\": \"member_id\",\n    \"item_id\": \"item_id\",\n    \"rating\": \"rating\",\n    \"date\": \"rated_at\"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/rating/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/users/mapper":{"get":{"tags":["Historical User Data Collection"],"summary":"Get user mapper","description":"Get the mapped keys for user information between your data source and our recommender system.","operationId":"get_user_mapper_v1_users_mapper_get","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/mapper\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/mapper\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/mapper\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/users/mapper\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/mapper\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/users/mapper',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/users/mapper\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/mapper');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/mapper');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/users/mapper\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/mapper\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/users/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["Historical User Data Collection"],"summary":"Update user mapper","description":"This endpoint updates the user mapped keys. Please checkout the schema from the\nrequest body section for details about the key type and supported values.\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| address | Optional[str] | str | Represents address of the unique user. |\n| gender | Optional[str] | str | Represents gender of the unique user. |\n| age | Optional[str] | str | Represents age of the unique user. |\n| type_name | str | str | Represents the type or preference of the user. If you have multiple columns for user preference you can assign them. |\n| separator | Optional[str] | str | If one key contains multiple parameter with separator in your data source please assign the separator here. If there is no separator in column value you can pass `null` or remove the key from the request body. |","operationId":"put_user_mapper_v1_users_mapper_put","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MapperUserSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/mapper\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/mapper\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_key_map\": {\n    \"user_id\": \"customer_id\",\n    \"member_id\": \"member_id\",\n    \"address\": \"residence\",\n    \"gender\": \"gender\",\n    \"age\": \"age\",\n    \"user_type\": [\n      {\n        \"type_name\": \"column_name1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"type_name\": \"column_name2\"\n      }\n    ]\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/users/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_key_map: {\n    user_id: 'customer_id',\n    member_id: 'member_id',\n    address: 'residence',\n    gender: 'gender',\n    age: 'age',\n    user_type: [{type_name: 'column_name1', separator: '_'}, {type_name: 'column_name2'}]\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/users/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_key_map: {\n      user_id: 'customer_id',\n      member_id: 'member_id',\n      address: 'residence',\n      gender: 'gender',\n      age: 'age',\n      user_type: [{type_name: 'column_name1', separator: '_'}, {type_name: 'column_name2'}]\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/users/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_key_map\": {\n    \"user_id\": \"customer_id\",\n    \"member_id\": \"member_id\",\n    \"address\": \"residence\",\n    \"gender\": \"gender\",\n    \"age\": \"age\",\n    \"user_type\": [\n      {\n        \"type_name\": \"column_name1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"type_name\": \"column_name2\"\n      }\n    ]\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_key_map\": @{ @\"user_id\": @\"customer_id\", @\"member_id\": @\"member_id\", @\"address\": @\"residence\", @\"gender\": @\"gender\", @\"age\": @\"age\", @\"user_type\": @[ @{ @\"type_name\": @\"column_name1\", @\"separator\": @\"_\" }, @{ @\"type_name\": @\"column_name2\" } ] } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/mapper');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/mapper');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/users/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/mapper\"\n\npayload = {\"user_key_map\": {\n        \"user_id\": \"customer_id\",\n        \"member_id\": \"member_id\",\n        \"address\": \"residence\",\n        \"gender\": \"gender\",\n        \"age\": \"age\",\n        \"user_type\": [{\n                \"type_name\": \"column_name1\",\n                \"separator\": \"_\"\n            }, {\"type_name\": \"column_name2\"}]\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/users/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"user_key_map\": [\n    \"user_id\": \"customer_id\",\n    \"member_id\": \"member_id\",\n    \"address\": \"residence\",\n    \"gender\": \"gender\",\n    \"age\": \"age\",\n    \"user_type\": [[\n        \"type_name\": \"column_name1\",\n        \"separator\": \"_\"\n      ], [\"type_name\": \"column_name2\"]]\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"post":{"tags":["Historical User Data Collection"],"summary":"Map data source keys with recommender user keys","description":"This endpoint map data source keys with our recommender user keys. This step is\ncompulsory if you want to upload user data from CSV file. Please checkout the\nschema from the request body section for details about the key type and supported values.\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | user_id is the id of unique user. choose the parameter from your data source that you want to be the id of user. |\n| member_id | Optional[str] | str | member_id is the id of logged-in user. choose the parameter from your data source that you want to be the id of logged-in user. |\n| address | Optional[str] | str | Represents address of the unique user. |\n| gender | Optional[str] | str | Represents gender of the unique user. |\n| age | Optional[str] | str | Represents age of the unique user. |\n| type_name | str | str | Represents the type or preference of the user. If you have multiple columns for user preference you can assign them. |\n| separator | Optional[str] | str | If one key contains multiple parameter with separator in your data source please assign the separator here. If there is no separator in column value you can pass `null` or remove the key from the request body. |","operationId":"post_user_mapper_v1_users_mapper_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MapperUserSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/mapper\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/mapper\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_key_map\": {\n    \"user_id\": \"customer_id\",\n    \"member_id\": \"member_id\",\n    \"address\": \"residence\",\n    \"gender\": \"gender\",\n    \"age\": \"age\",\n    \"user_type\": [\n      {\n        \"type_name\": \"column_name1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"type_name\": \"column_name2\"\n      }\n    ]\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_key_map: {\n    user_id: 'customer_id',\n    member_id: 'member_id',\n    address: 'residence',\n    gender: 'gender',\n    age: 'age',\n    user_type: [{type_name: 'column_name1', separator: '_'}, {type_name: 'column_name2'}]\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/users/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_key_map: {\n      user_id: 'customer_id',\n      member_id: 'member_id',\n      address: 'residence',\n      gender: 'gender',\n      age: 'age',\n      user_type: [{type_name: 'column_name1', separator: '_'}, {type_name: 'column_name2'}]\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_key_map\": {\n    \"user_id\": \"customer_id\",\n    \"member_id\": \"member_id\",\n    \"address\": \"residence\",\n    \"gender\": \"gender\",\n    \"age\": \"age\",\n    \"user_type\": [\n      {\n        \"type_name\": \"column_name1\",\n        \"separator\": \"_\"\n      },\n      {\n        \"type_name\": \"column_name2\"\n      }\n    ]\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_key_map\": @{ @\"user_id\": @\"customer_id\", @\"member_id\": @\"member_id\", @\"address\": @\"residence\", @\"gender\": @\"gender\", @\"age\": @\"age\", @\"user_type\": @[ @{ @\"type_name\": @\"column_name1\", @\"separator\": @\"_\" }, @{ @\"type_name\": @\"column_name2\" } ] } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/mapper');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/mapper');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/users/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/mapper\"\n\npayload = {\"user_key_map\": {\n        \"user_id\": \"customer_id\",\n        \"member_id\": \"member_id\",\n        \"address\": \"residence\",\n        \"gender\": \"gender\",\n        \"age\": \"age\",\n        \"user_type\": [{\n                \"type_name\": \"column_name1\",\n                \"separator\": \"_\"\n            }, {\"type_name\": \"column_name2\"}]\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_key_map\\\":{\\\"user_id\\\":\\\"customer_id\\\",\\\"member_id\\\":\\\"member_id\\\",\\\"address\\\":\\\"residence\\\",\\\"gender\\\":\\\"gender\\\",\\\"age\\\":\\\"age\\\",\\\"user_type\\\":[{\\\"type_name\\\":\\\"column_name1\\\",\\\"separator\\\":\\\"_\\\"},{\\\"type_name\\\":\\\"column_name2\\\"}]}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/users/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_key_map\":{\"user_id\":\"customer_id\",\"member_id\":\"member_id\",\"address\":\"residence\",\"gender\":\"gender\",\"age\":\"age\",\"user_type\":[{\"type_name\":\"column_name1\",\"separator\":\"_\"},{\"type_name\":\"column_name2\"}]}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"user_key_map\": [\n    \"user_id\": \"customer_id\",\n    \"member_id\": \"member_id\",\n    \"address\": \"residence\",\n    \"gender\": \"gender\",\n    \"age\": \"age\",\n    \"user_type\": [[\n        \"type_name\": \"column_name1\",\n        \"separator\": \"_\"\n      ], [\"type_name\": \"column_name2\"]]\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/indices":{"post":{"tags":["Index Creation"],"summary":"Create indices to hold your data","description":"Now you need to create indexes. These indexes will create the necessary schemas\nto hold your data.","operationId":"post_index_create_v1_indices_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/indices\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/indices\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/indices\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/indices\")\n  .post(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/indices\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/indices\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/indices\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/indices\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/indices',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/indices\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/indices\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/indices\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/indices');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/indices');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/indices\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/indices\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/indices\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/indices \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/indices\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"delete":{"tags":["Index Creation"],"summary":"Delete indices","description":"You can delete an index with this endpoint. It takes index_type as required parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| index_type | Enum | Selected enum value | Represents the type of index. Available value `items`, `image_features`, `browse`, `purchase`, `ratings`, `search`, `stats`, `user`, `settings`, `gpt_dataset`,` gpt_dataset_meta`, `questionnaire`, `questionnaire_mapper`. |","operationId":"delete_index_v1_indices_delete","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/IndexDeleteSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/indices\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Delete,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/indices\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/indices\"\n\n\tpayload := strings.NewReader(\"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/indices\")\n  .delete(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api.recommender.gigalogy.com/v1/indices\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/indices\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/indices\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/indices\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  index_type: 'Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper'\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.recommender.gigalogy.com/v1/indices',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    index_type: 'Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/indices\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"index_type\": @\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/indices\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/indices\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/indices');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/indices');\n$request->setRequestMethod('DELETE');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/v1/indices\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/indices\"\n\npayload = {\"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"DELETE\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/indices\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api.recommender.gigalogy.com/v1/indices \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper\"] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/indices\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/reindex":{"post":{"tags":["Index Creation"],"summary":"Creates index with new mappings and settings and create alias for new index","description":"This endpoint create new index with new mappings and settings as well as copy all\nthe documents from previous index to new index. It takes index_type and mapping as\nrequired parameters.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| index_type | Enum | Selected enum value | Represents the type of index. Available value `items`, `image_features`, `browse`, `purchase`, `ratings`, `search`, `settings`. |\n| mapping | Dict | Dict | Represents required mappings and settings to create index. |","operationId":"post_reindex_v1_reindex_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ReindexSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/reindex\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/reindex\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/reindex\"\n\n\tpayload := strings.NewReader(\"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/reindex\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/reindex\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/reindex\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\n  \"mappings\": {\n    \"settings\": {\n      \"analysis\": {}\n    },\n    \"mappings\": {\n      \"properties\": {\n        \"item\": {\n          \"properties\": {}\n        }\n      }\n    }\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/reindex\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/reindex\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  index_type: 'Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire',\n  mappings: {settings: {analysis: {}}, mappings: {properties: {item: {properties: {}}}}}\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/reindex',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    index_type: 'Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire',\n    mappings: {settings: {analysis: {}}, mappings: {properties: {item: {properties: {}}}}}\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/reindex\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\n  \"mappings\": {\n    \"settings\": {\n      \"analysis\": {}\n    },\n    \"mappings\": {\n      \"properties\": {\n        \"item\": {\n          \"properties\": {}\n        }\n      }\n    }\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"index_type\": @\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\n                              @\"mappings\": @{ @\"settings\": @{ @\"analysis\": @{  } }, @\"mappings\": @{ @\"properties\": @{ @\"item\": @{ @\"properties\": @{  } } } } } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/reindex\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/reindex\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/reindex');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\"mappings\":{\"settings\":{\"analysis\":{}},\"mappings\":{\"properties\":{\"item\":{\"properties\":{}}}}}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\"mappings\":{\"settings\":{\"analysis\":{}},\"mappings\":{\"properties\":{\"item\":{\"properties\":{}}}}}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/reindex');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/reindex\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/reindex\"\n\npayload = {\n    \"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\n    \"mappings\": {\n        \"settings\": {\"analysis\": {}},\n        \"mappings\": {\"properties\": {\"item\": {\"properties\": {}}}}\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/reindex\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"index_type\\\":\\\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\\\",\\\"mappings\\\":{\\\"settings\\\":{\\\"analysis\\\":{}},\\\"mappings\\\":{\\\"properties\\\":{\\\"item\\\":{\\\"properties\\\":{}}}}}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/reindex \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"index_type\":\"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\"mappings\":{\"settings\":{\"analysis\":{}},\"mappings\":{\"properties\":{\"item\":{\"properties\":{}}}}}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"index_type\": \"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire\",\n  \"mappings\": [\n    \"settings\": [\"analysis\": []],\n    \"mappings\": [\"properties\": [\"item\": [\"properties\": []]]]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/reindex\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/ranks/settings":{"get":{"tags":["Training Settings"],"summary":"Get rank settings","description":"Get your saved rank settings.","operationId":"get_rank_settings_v1_ranks_settings_get","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/ranks/settings\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/ranks/settings\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/ranks/settings\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/ranks/settings\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/ranks/settings\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/ranks/settings\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/ranks/settings',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/ranks/settings\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/ranks/settings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/ranks/settings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/ranks/settings\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/ranks/settings\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/ranks/settings \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/ranks/settings\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["Training Settings"],"summary":"Updates rank settings","description":"This endpoint updates the parameter in rank settings. It takes several technical\nparameters. Please checkout the schema from the request body section for details\nabout the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| interval | List[Enum] | Selected enum value | Represents the time interval to train ranking model. Available values are `weekly`, `bi-weekly`, `monthly`, `quarterly`, `yearly`. |\n| split_size | float | float | Represents split_size to split data. Splitted data would be distributed as X_train, X_test, y_train, y_test and prepare the data for ranking model. IIf you are not sure about this parameter please use the default value. |\n| epoch | int | int | Represents the number of epoch for training the ranking model. If you are not sure about this parameter please use the default value. |","operationId":"update_rank_settings_v1_ranks_settings_put","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RankSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/ranks/settings\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/ranks/settings\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/ranks/settings\"\n\n\tpayload := strings.NewReader(\"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/ranks/settings\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"rank_settings\": {\n    \"interval\": [\n      \"weekly\",\n      \"bi-weekly\",\n      \"monthly\",\n      \"quarterly\",\n      \"yearly\"\n    ],\n    \"split_size\": 0.1,\n    \"epoch\": 200\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/ranks/settings\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/ranks/settings\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  rank_settings: {\n    interval: ['weekly', 'bi-weekly', 'monthly', 'quarterly', 'yearly'],\n    split_size: 0.1,\n    epoch: 200\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/ranks/settings',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    rank_settings: {\n      interval: ['weekly', 'bi-weekly', 'monthly', 'quarterly', 'yearly'],\n      split_size: 0.1,\n      epoch: 200\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/ranks/settings\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"rank_settings\": {\n    \"interval\": [\n      \"weekly\",\n      \"bi-weekly\",\n      \"monthly\",\n      \"quarterly\",\n      \"yearly\"\n    ],\n    \"split_size\": 0.1,\n    \"epoch\": 200\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"rank_settings\": @{ @\"interval\": @[ @\"weekly\", @\"bi-weekly\", @\"monthly\", @\"quarterly\", @\"yearly\" ], @\"split_size\": @0.1, @\"epoch\": @200 } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/ranks/settings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/ranks/settings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/ranks/settings\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/ranks/settings\"\n\npayload = {\"rank_settings\": {\n        \"interval\": [\"weekly\", \"bi-weekly\", \"monthly\", \"quarterly\", \"yearly\"],\n        \"split_size\": 0.1,\n        \"epoch\": 200\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/ranks/settings \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"rank_settings\": [\n    \"interval\": [\"weekly\", \"bi-weekly\", \"monthly\", \"quarterly\", \"yearly\"],\n    \"split_size\": 0.1,\n    \"epoch\": 200\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/ranks/settings\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"post":{"tags":["Training Settings"],"summary":"Creates rank settings","description":"This endpoint determines the key parameters for our ranking model. It takes\nseveral technical parameters. Please checkout the schema from the request body\nsection for details about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| interval | List[Enum] | Selected enum value | Represents the time interval to train ranking model. Available values are `weekly`, `bi-weekly`, `monthly`, `quarterly`, `yearly`. |\n| split_size | float | float | Represents split_size to split data. Splitted data would be distributed as X_train, X_test, y_train, y_test and prepare the data for ranking model. IIf you are not sure about this parameter please use the default value. |\n| epoch | int | int | Represents the number of epoch for training the ranking model. If you are not sure about this parameter please use the default value. |","operationId":"save_rank_settings_v1_ranks_settings_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RankSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/ranks/settings\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/ranks/settings\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/ranks/settings\"\n\n\tpayload := strings.NewReader(\"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/ranks/settings\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"rank_settings\": {\n    \"interval\": [\n      \"weekly\",\n      \"bi-weekly\",\n      \"monthly\",\n      \"quarterly\",\n      \"yearly\"\n    ],\n    \"split_size\": 0.1,\n    \"epoch\": 200\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/ranks/settings\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/ranks/settings\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  rank_settings: {\n    interval: ['weekly', 'bi-weekly', 'monthly', 'quarterly', 'yearly'],\n    split_size: 0.1,\n    epoch: 200\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/ranks/settings',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    rank_settings: {\n      interval: ['weekly', 'bi-weekly', 'monthly', 'quarterly', 'yearly'],\n      split_size: 0.1,\n      epoch: 200\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/ranks/settings\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"rank_settings\": {\n    \"interval\": [\n      \"weekly\",\n      \"bi-weekly\",\n      \"monthly\",\n      \"quarterly\",\n      \"yearly\"\n    ],\n    \"split_size\": 0.1,\n    \"epoch\": 200\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"rank_settings\": @{ @\"interval\": @[ @\"weekly\", @\"bi-weekly\", @\"monthly\", @\"quarterly\", @\"yearly\" ], @\"split_size\": @0.1, @\"epoch\": @200 } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/ranks/settings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/ranks/settings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/ranks/settings');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/ranks/settings\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/ranks/settings\"\n\npayload = {\"rank_settings\": {\n        \"interval\": [\"weekly\", \"bi-weekly\", \"monthly\", \"quarterly\", \"yearly\"],\n        \"split_size\": 0.1,\n        \"epoch\": 200\n    }}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/ranks/settings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"rank_settings\\\":{\\\"interval\\\":[\\\"weekly\\\",\\\"bi-weekly\\\",\\\"monthly\\\",\\\"quarterly\\\",\\\"yearly\\\"],\\\"split_size\\\":0.1,\\\"epoch\\\":200}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/ranks/settings \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"rank_settings\":{\"interval\":[\"weekly\",\"bi-weekly\",\"monthly\",\"quarterly\",\"yearly\"],\"split_size\":0.1,\"epoch\":200}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"rank_settings\": [\n    \"interval\": [\"weekly\", \"bi-weekly\", \"monthly\", \"quarterly\", \"yearly\"],\n    \"split_size\": 0.1,\n    \"epoch\": 200\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/ranks/settings\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/save":{"post":{"tags":["Catalog Integration"],"summary":"Upload a CSV or JSON file and save data in item index","description":"This endpoint uploads and saves data from the CSV file in the item index. It only\ntakes text or CSV files as a required parameter. If you want to integrate your\nitem data from a CSV file with our recommender system this endpoint will upload\nthe file and save them to the database.","operationId":"post_items_csv_v1_items_save_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_post_items_csv_v1_items_save_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/save\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/save\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/save\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/save\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/save\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/save\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/save\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/save\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/save',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/save\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/save\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/save\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/save');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/save');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/save\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/save\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/save\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/save \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/save\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/save/remote":{"post":{"tags":["Catalog Integration"],"summary":"Save items to database from a given endpoint","description":"This endpoint fetches item data from external API and saves them in the item index.\nIt takes URL, method, response_items_key as required parameters as well as headers,\nquery_parameters, body_parameters, response_item_key as optional parameters.\nPlease check out the schema from the request body section for details about the\nkey type and supported values.\nThis endpoint can be used to fetch items into our recommender system if you\nhave product details API.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| url | str | str | Represents URL of the product details api from where you want to fetch items into recommender |\n| method | str | str | Represents api method of the endpoint from which you want to fetch data into recommender. |\n| headers | Optional[Dict[str, str]] | str | Represents the meta data associated with api request and response. |\n| query_parameters | Optional[Dict[str, str]] | str | Represents the query parameter of api endpoint. It could be required to fetch data from external api otherwise you can keep it empty. |\n| body_parameters | Optional[Dict[str, str]] | str | Represents the body parameter of api endpoint. It could be required to fetch data from external api otherwise you can keep it empty. |\n| response_items_key | str | str | Represents the key of response items which you want to fetch into recommender . |\n| response_item_key | Optional[str] | str | If you have multiple keys in response you can use the key from where you want to fetch items. It could be empty as well. |","operationId":"api_save_v1_items_save_remote_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ItemApiSaveSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/save/remote\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/save/remote\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/save/remote\"\n\n\tpayload := strings.NewReader(\"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/save/remote\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/save/remote\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/save/remote\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"url\": \"https://api.doozie.ai/v1/api/items/search\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  },\n  \"query_parameters\": {\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  },\n  \"body_parameters\": {\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  },\n  \"response_items_key\": \"Items\",\n  \"response_item_key\": \"Item\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/save/remote\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/save/remote\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  url: 'https://api.doozie.ai/v1/api/items/search',\n  method: 'GET',\n  headers: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},\n  query_parameters: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},\n  body_parameters: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},\n  response_items_key: 'Items',\n  response_item_key: 'Item'\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/save/remote',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    url: 'https://api.doozie.ai/v1/api/items/search',\n    method: 'GET',\n    headers: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},\n    query_parameters: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},\n    body_parameters: {parameter_one: 'value_one', parameter_two: 'value_two', '...': '...'},\n    response_items_key: 'Items',\n    response_item_key: 'Item'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/save/remote\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"url\": \"https://api.doozie.ai/v1/api/items/search\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  },\n  \"query_parameters\": {\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  },\n  \"body_parameters\": {\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  },\n  \"response_items_key\": \"Items\",\n  \"response_item_key\": \"Item\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"url\": @\"https://api.doozie.ai/v1/api/items/search\",\n                              @\"method\": @\"GET\",\n                              @\"headers\": @{ @\"parameter_one\": @\"value_one\", @\"parameter_two\": @\"value_two\", @\"...\": @\"...\" },\n                              @\"query_parameters\": @{ @\"parameter_one\": @\"value_one\", @\"parameter_two\": @\"value_two\", @\"...\": @\"...\" },\n                              @\"body_parameters\": @{ @\"parameter_one\": @\"value_one\", @\"parameter_two\": @\"value_two\", @\"...\": @\"...\" },\n                              @\"response_items_key\": @\"Items\",\n                              @\"response_item_key\": @\"Item\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/save/remote\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/save/remote\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/save/remote');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"url\":\"https://api.doozie.ai/v1/api/items/search\",\"method\":\"GET\",\"headers\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"query_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"body_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"response_items_key\":\"Items\",\"response_item_key\":\"Item\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"url\":\"https://api.doozie.ai/v1/api/items/search\",\"method\":\"GET\",\"headers\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"query_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"body_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"response_items_key\":\"Items\",\"response_item_key\":\"Item\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/save/remote');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/save/remote\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/save/remote\"\n\npayload = {\n    \"url\": \"https://api.doozie.ai/v1/api/items/search\",\n    \"method\": \"GET\",\n    \"headers\": {\n        \"parameter_one\": \"value_one\",\n        \"parameter_two\": \"value_two\",\n        \"...\": \"...\"\n    },\n    \"query_parameters\": {\n        \"parameter_one\": \"value_one\",\n        \"parameter_two\": \"value_two\",\n        \"...\": \"...\"\n    },\n    \"body_parameters\": {\n        \"parameter_one\": \"value_one\",\n        \"parameter_two\": \"value_two\",\n        \"...\": \"...\"\n    },\n    \"response_items_key\": \"Items\",\n    \"response_item_key\": \"Item\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/save/remote\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"url\\\":\\\"https://api.doozie.ai/v1/api/items/search\\\",\\\"method\\\":\\\"GET\\\",\\\"headers\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"query_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"body_parameters\\\":{\\\"parameter_one\\\":\\\"value_one\\\",\\\"parameter_two\\\":\\\"value_two\\\",\\\"...\\\":\\\"...\\\"},\\\"response_items_key\\\":\\\"Items\\\",\\\"response_item_key\\\":\\\"Item\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/save/remote \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"url\":\"https://api.doozie.ai/v1/api/items/search\",\"method\":\"GET\",\"headers\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"query_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"body_parameters\":{\"parameter_one\":\"value_one\",\"parameter_two\":\"value_two\",\"...\":\"...\"},\"response_items_key\":\"Items\",\"response_item_key\":\"Item\"}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"url\": \"https://api.doozie.ai/v1/api/items/search\",\n  \"method\": \"GET\",\n  \"headers\": [\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  ],\n  \"query_parameters\": [\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  ],\n  \"body_parameters\": [\n    \"parameter_one\": \"value_one\",\n    \"parameter_two\": \"value_two\",\n    \"...\": \"...\"\n  ],\n  \"response_items_key\": \"Items\",\n  \"response_item_key\": \"Item\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/save/remote\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/train":{"get":{"tags":["Training"],"summary":"Trains item data and generates a graph of relations","description":"This endpoint trains item data and generates intelligence from it.\nItem data are trained automatically on a regular time interval. This endpoint\ncan be used to train item data manually.","operationId":"item_train_v1_items_train_get","parameters":[{"required":false,"schema":{"title":"Train All","type":"boolean","default":false},"name":"train_all","in":"query"},{"required":false,"schema":{"title":"Train From","type":"string"},"name":"train_from","in":"query"},{"required":false,"schema":{"title":"Train To","type":"string"},"name":"train_to","in":"query"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/items/train',\n  qs: {\n    train_all: 'SOME_BOOLEAN_VALUE',\n    train_from: 'SOME_STRING_VALUE',\n    train_to: 'SOME_STRING_VALUE'\n  },\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/train\");\n\nreq.query({\n  \"train_all\": \"SOME_BOOLEAN_VALUE\",\n  \"train_from\": \"SOME_STRING_VALUE\",\n  \"train_to\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/train');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'train_all' => 'SOME_BOOLEAN_VALUE',\n  'train_from' => 'SOME_STRING_VALUE',\n  'train_to' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/train');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'train_all' => 'SOME_BOOLEAN_VALUE',\n  'train_from' => 'SOME_STRING_VALUE',\n  'train_to' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/train\"\n\nquerystring = {\"train_all\":\"SOME_BOOLEAN_VALUE\",\"train_from\":\"SOME_STRING_VALUE\",\"train_to\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/train?train_all=SOME_BOOLEAN_VALUE&train_from=SOME_STRING_VALUE&train_to=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items":{"post":{"tags":["Catalog Integration"],"summary":"Get a list of item details by their ids","description":"Get searched items with item details by passing list of item ids.\nPlease check out the schema from the request body section for details about the\nkey type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| ids | List[str] | str | List of item ids. |","operationId":"items_v1_items_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ItemSearchByIdSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items\"\n\n\tpayload := strings.NewReader(\"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"ids\": [\n    \"thones:10001072\",\n    \"menz-style:10017133\"\n  ]\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ids: ['thones:10001072', 'menz-style:10017133']}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {ids: ['thones:10001072', 'menz-style:10017133']},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"ids\": [\n    \"thones:10001072\",\n    \"menz-style:10017133\"\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"ids\": @[ @\"thones:10001072\", @\"menz-style:10017133\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"ids\":[\"thones:10001072\",\"menz-style:10017133\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"ids\":[\"thones:10001072\",\"menz-style:10017133\"]}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items\"\n\npayload = {\"ids\": [\"thones:10001072\", \"menz-style:10017133\"]}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"ids\\\":[\\\"thones:10001072\\\",\\\"menz-style:10017133\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"ids\":[\"thones:10001072\",\"menz-style:10017133\"]}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"ids\": [\"thones:10001072\", \"menz-style:10017133\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/images/train":{"post":{"tags":["Training"],"summary":"Trains image model","description":"This endpoint takes image data from the database and generates intelligence from\nit. It takes start_date and end_date as optional parameters.\nImage model is trained automatically on a regular time interval. This endpoint\ncan be used to train image model manually.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| start_date | Optional[str] | str | Initial date of date range based on which you want to train image model. |\n| end_date |Optional[str] | str | End date of date range based on which you want to train image model. |","operationId":"process_v1_images_train_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImageTrainSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/images/train\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/images/train\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/images/train\"\n\n\tpayload := strings.NewReader(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/images/train\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/images/train\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/images/train\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/images/train\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/images/train\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({start_date: '2021-08-05', end_date: '2021-08-06'}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/images/train',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {start_date: '2021-08-05', end_date: '2021-08-06'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/images/train\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"start_date\": @\"2021-08-05\",\n                              @\"end_date\": @\"2021-08-06\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/images/train\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/images/train\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/images/train');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/images/train');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/images/train\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/images/train\"\n\npayload = {\n    \"start_date\": \"2021-08-05\",\n    \"end_date\": \"2021-08-06\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/images/train\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/images/train \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/images/train\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/ranks/train":{"post":{"tags":["Training"],"summary":"Trains ranking model that predicts the trending items","description":"This endpoint considers user behavior, item relations and train ranking model to\npredict most trending items.\nRanking model is trained automatically on a regular time interval. This endpoint\ncan be used to train ranking model manually.","operationId":"rank_train_v1_ranks_train_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/ranks/train\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/ranks/train\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/ranks/train\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/ranks/train\")\n  .post(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/ranks/train\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/ranks/train\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/ranks/train\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/ranks/train\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/ranks/train',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/ranks/train\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/ranks/train\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/ranks/train\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/ranks/train');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/ranks/train');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/ranks/train\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/ranks/train\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/ranks/train\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/ranks/train \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/ranks/train\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/nearby":{"post":{"tags":["Search"],"summary":"Returns nearest items in terms of distance","description":"This endpoint finds the nearest items in terms of distance from a specific item \ngiven as an input. Input parameters are item_id, radius, filters and excludes. \nPlease check out the schema from the request body section for\ndetails about the key type and supported values.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| item_id | str | str | Represents the id of the item. |\n| radius | Dict | Dict | Radius contains d_from and d_to. Based on these values nearest items will be returned |\n| filters | List | str | You can pass categories (multiple supported) here. Based on the supported values the response will be filtered |\n| excludes | List | str | You can exclude categories (multiple supported) with this parameter. |","operationId":"item_search_details_v1_items_nearby_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ItemNearbySchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/nearby\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/nearby\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/nearby\"\n\n\tpayload := strings.NewReader(\"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/nearby\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/nearby\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/nearby\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"item_id\": \"1000757666\",\n  \"radius\": {\n    \"d_from\": 1,\n    \"d_to\": 900\n  },\n  \"filters\": [\n    \"レストラン\"\n  ],\n  \"excludes\": [\n    \"宿泊施設\"\n  ],\n  \"search_size\": 1000,\n  \"keywords_filter\": false,\n  \"details\": true,\n  \"start\": 0,\n  \"size\": 10\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/nearby\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/nearby\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  item_id: '1000757666',\n  radius: {d_from: 1, d_to: 900},\n  filters: ['レストラン'],\n  excludes: ['宿泊施設'],\n  search_size: 1000,\n  keywords_filter: false,\n  details: true,\n  start: 0,\n  size: 10\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/nearby',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    item_id: '1000757666',\n    radius: {d_from: 1, d_to: 900},\n    filters: ['レストラン'],\n    excludes: ['宿泊施設'],\n    search_size: 1000,\n    keywords_filter: false,\n    details: true,\n    start: 0,\n    size: 10\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/nearby\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"item_id\": \"1000757666\",\n  \"radius\": {\n    \"d_from\": 1,\n    \"d_to\": 900\n  },\n  \"filters\": [\n    \"レストラン\"\n  ],\n  \"excludes\": [\n    \"宿泊施設\"\n  ],\n  \"search_size\": 1000,\n  \"keywords_filter\": false,\n  \"details\": true,\n  \"start\": 0,\n  \"size\": 10\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"item_id\": @\"1000757666\",\n                              @\"radius\": @{ @\"d_from\": @1, @\"d_to\": @900 },\n                              @\"filters\": @[ @\"レストラン\" ],\n                              @\"excludes\": @[ @\"宿泊施設\" ],\n                              @\"search_size\": @1000,\n                              @\"keywords_filter\": @NO,\n                              @\"details\": @YES,\n                              @\"start\": @0,\n                              @\"size\": @10 };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/nearby\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/nearby\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/nearby');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"item_id\":\"1000757666\",\"radius\":{\"d_from\":1,\"d_to\":900},\"filters\":[\"レストラン\"],\"excludes\":[\"宿泊施設\"],\"search_size\":1000,\"keywords_filter\":false,\"details\":true,\"start\":0,\"size\":10}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"item_id\":\"1000757666\",\"radius\":{\"d_from\":1,\"d_to\":900},\"filters\":[\"レストラン\"],\"excludes\":[\"宿泊施設\"],\"search_size\":1000,\"keywords_filter\":false,\"details\":true,\"start\":0,\"size\":10}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/nearby');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/nearby\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/nearby\"\n\npayload = {\n    \"item_id\": \"1000757666\",\n    \"radius\": {\n        \"d_from\": 1,\n        \"d_to\": 900\n    },\n    \"filters\": [\"レストラン\"],\n    \"excludes\": [\"宿泊施設\"],\n    \"search_size\": 1000,\n    \"keywords_filter\": False,\n    \"details\": True,\n    \"start\": 0,\n    \"size\": 10\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/nearby\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"item_id\\\":\\\"1000757666\\\",\\\"radius\\\":{\\\"d_from\\\":1,\\\"d_to\\\":900},\\\"filters\\\":[\\\"レストラン\\\"],\\\"excludes\\\":[\\\"宿泊施設\\\"],\\\"search_size\\\":1000,\\\"keywords_filter\\\":false,\\\"details\\\":true,\\\"start\\\":0,\\\"size\\\":10}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/nearby \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"item_id\":\"1000757666\",\"radius\":{\"d_from\":1,\"d_to\":900},\"filters\":[\"レストラン\"],\"excludes\":[\"宿泊施設\"],\"search_size\":1000,\"keywords_filter\":false,\"details\":true,\"start\":0,\"size\":10}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"item_id\": \"1000757666\",\n  \"radius\": [\n    \"d_from\": 1,\n    \"d_to\": 900\n  ],\n  \"filters\": [\"レストラン\"],\n  \"excludes\": [\"宿泊施設\"],\n  \"search_size\": 1000,\n  \"keywords_filter\": false,\n  \"details\": true,\n  \"start\": 0,\n  \"size\": 10\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/nearby\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/images/search":{"post":{"tags":["Search"],"summary":"Image search engine","description":"This endpoint generates search results based on image similarity. It takes an\nimage, user_id, start, size and details as required parameter and member_id as\noptional parameter. Please check out the schema from the request body section for\ndetails about the key type and supported values.\nThis endpoint can be used along with personalized search engine to provide users\noptions to execute their search experience.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| image | str($bin) | file | Represents the image for finding items that are similar to the one it captured. Supports webp, jpeg, jpg, and png formats. |\n| start | Optional[int] | int | Represents the initial point of pagination. If you want to see first items of index in the first position of your search result it will be 0. |\n| size | Optional[int] | int | Represents the size or number of items to show in search result. Size 10 means it will show first 10 items from index in your search result. |\n| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |","operationId":"image_search_v1_images_search_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_image_search_v1_images_search_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/images/search\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/images/search\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/images/search\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/images/search\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/images/search\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/images/search\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/images/search\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/images/search\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/images/search',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/images/search\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/images/search\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/images/search\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/images/search');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/images/search');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/images/search\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/images/search\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/images/search\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/images/search \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/images/search\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/users/keywords":{"get":{"tags":["Search"],"summary":"Get all searched keywords by a specific user","description":"Get the searched keywords by a specific user in your application.\nThis endpoint can be used to analyze / learn trends show infographics to users.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |","operationId":"keywords_v1_users_keywords_get","parameters":[{"required":true,"schema":{"title":"User Id","type":"string"},"name":"user_id","in":"query"},{"required":false,"schema":{"title":"Member Id","type":"string"},"name":"member_id","in":"query"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/users/keywords',\n  qs: {user_id: 'SOME_STRING_VALUE', member_id: 'SOME_STRING_VALUE'},\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/users/keywords\");\n\nreq.query({\n  \"user_id\": \"SOME_STRING_VALUE\",\n  \"member_id\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/keywords');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/keywords');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/keywords\"\n\nquerystring = {\"user_id\":\"SOME_STRING_VALUE\",\"member_id\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/keywords?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/categories/keywords":{"get":{"tags":["Search"],"summary":"Get top keywords by categories","description":"Get the searched keywords by a specific user in your application.\nThis endpoint can be used to analyze / learn trends show infographics to users.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |","operationId":"keywords_v1_categories_keywords_get","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/categories/keywords\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/categories/keywords\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/categories/keywords\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/categories/keywords\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/categories/keywords\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/categories/keywords\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/categories/keywords\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/categories/keywords\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/categories/keywords',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/categories/keywords\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/categories/keywords\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/categories/keywords\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/categories/keywords');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/categories/keywords');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/categories/keywords\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/categories/keywords\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/categories/keywords\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/categories/keywords \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/categories/keywords\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/browse/client":{"post":{"tags":["User Data Collection"],"summary":"Captures user browsing information","description":"This endpoint captures user browsing information and saves them to the database.\nIt takes user_id and item_id as required parameters and member_id as optional parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_id | str | str | Represents the id of the browsed item. |","operationId":"post_browse_v1_items_browse_client_post","parameters":[{"required":true,"schema":{"title":"Client-Key","type":"string"},"name":"client-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BrowseSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/browse/client\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"client-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/browse/client\"),\n    Headers =\n    {\n        { \"client-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/browse/client\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/browse/client\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"client-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/browse/client\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"client-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/browse/client\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse/client\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"client-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/browse/client\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_id: '1000764491'\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/browse/client',\n  headers: {'content-type': 'application/json', 'client-key': 'SOME_STRING_VALUE'},\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_id: '1000764491'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse/client\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"client-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_id\": @\"1000764491\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/browse/client\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/browse/client\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"client-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/browse/client');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse/client');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'client-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/browse/client\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/browse/client\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_id\": \"1000764491\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/browse/client\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"client-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/browse/client \\\n  --header 'client-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/browse/client\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/browse":{"get":{"tags":["User Data Collection"],"summary":"Get browsed info by user id","description":"Get browsed information by id\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |","operationId":"get_v1_items_browse_get","parameters":[{"required":true,"schema":{"title":"User Id","type":"string"},"name":"user_id","in":"query"},{"required":false,"schema":{"title":"Member Id","type":"string"},"name":"member_id","in":"query"},{"required":false,"schema":{"title":"Start","type":"integer"},"name":"start","in":"query"},{"required":false,"schema":{"title":"Size","type":"integer"},"name":"size","in":"query"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/items/browse',\n  qs: {\n    user_id: 'SOME_STRING_VALUE',\n    member_id: 'SOME_STRING_VALUE',\n    start: 'SOME_INTEGER_VALUE',\n    size: 'SOME_INTEGER_VALUE'\n  },\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/browse\");\n\nreq.query({\n  \"user_id\": \"SOME_STRING_VALUE\",\n  \"member_id\": \"SOME_STRING_VALUE\",\n  \"start\": \"SOME_INTEGER_VALUE\",\n  \"size\": \"SOME_INTEGER_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/browse');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/browse\"\n\nquerystring = {\"user_id\":\"SOME_STRING_VALUE\",\"member_id\":\"SOME_STRING_VALUE\",\"start\":\"SOME_INTEGER_VALUE\",\"size\":\"SOME_INTEGER_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/browse?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"post":{"tags":["User Data Collection"],"summary":"Captures user browsing information","description":"This endpoint captures user browsing information and saves them to the database.\nIt takes user_id and item_id as required parameters and member_id as optional parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_id | str | str | Represents the id of the browsed item. |","operationId":"post_v1_items_browse_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BrowseSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/browse\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/browse\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/browse\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/browse\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/browse\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/browse\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/browse\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_id: '1000764491'\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/browse',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_id: '1000764491'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_id\": @\"1000764491\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/browse\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/browse\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/browse');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/browse\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/browse\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_id\": \"1000764491\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/browse\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/browse \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\"}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/browse\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/browse/save":{"post":{"tags":["Historical User Data Collection"],"summary":"Upload a CSV file and save data in browse index","description":"This endpoint uploads and saves data from the CSV file in the browse index. It only\ntakes text or CSV files as a required parameter. If you want to upload your\nbrowse data from a CSV file with our recommender system this endpoint will upload\nthe file and save them to the database.","operationId":"post_browse_csv_v1_items_browse_save_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_post_browse_csv_v1_items_browse_save_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/browse/save\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/browse/save\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/browse/save\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/browse/save\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/browse/save\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/browse/save\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse/save\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/browse/save\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/browse/save',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/browse/save\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/browse/save\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/browse/save\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/browse/save');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/browse/save');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/browse/save\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/browse/save\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/browse/save\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/browse/save \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/browse/save\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/purchase/client":{"post":{"tags":["User Data Collection"],"summary":"Captures user purchase information and save them","description":"This endpoints captures user purchase info and save it to the database. It takes\nuser_id, item_list which includes item_id, price, quantity for a specific item as\nrequired parameters and member_id as an optional parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_list | List[Dict[str,str]] | str | Represents item list of purchased items including item_id, price, quantity. |\n| item_id | str | str | Represents the id of the purchased item. |\n| price | str | str | Price of that purchased item. |\n| quantity | str | str | Number of items that are purchased for specific item id. |","operationId":"purchase_client_v1_items_purchase_client_post","parameters":[{"required":true,"schema":{"title":"Client-Key","type":"string"},"name":"client-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PurchaseSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchase/client\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"client-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchase/client\"),\n    Headers =\n    {\n        { \"client-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchase/client\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchase/client\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"client-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/purchase/client\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"client-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchase/client\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_list\": [\n    {\n      \"item_id\": \"1000757666\",\n      \"price\": 5000,\n      \"quantity\": 1\n    },\n    {\n      \"item_id\": \"1000764491\",\n      \"price\": 400,\n      \"quantity\": 7\n    }\n  ]\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase/client\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"client-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchase/client\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_list: [\n    {item_id: '1000757666', price: 5000, quantity: 1},\n    {item_id: '1000764491', price: 400, quantity: 7}\n  ]\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchase/client',\n  headers: {'content-type': 'application/json', 'client-key': 'SOME_STRING_VALUE'},\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_list: [\n      {item_id: '1000757666', price: 5000, quantity: 1},\n      {item_id: '1000764491', price: 400, quantity: 7}\n    ]\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase/client\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_list\": [\n    {\n      \"item_id\": \"1000757666\",\n      \"price\": 5000,\n      \"quantity\": 1\n    },\n    {\n      \"item_id\": \"1000764491\",\n      \"price\": 400,\n      \"quantity\": 7\n    }\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"client-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_list\": @[ @{ @\"item_id\": @\"1000757666\", @\"price\": @5000, @\"quantity\": @1 }, @{ @\"item_id\": @\"1000764491\", @\"price\": @400, @\"quantity\": @7 } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchase/client\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchase/client\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\",\n  CURLOPT_HTTPHEADER => [\n    \"client-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchase/client');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase/client');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'client-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/purchase/client\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchase/client\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_list\": [\n        {\n            \"item_id\": \"1000757666\",\n            \"price\": 5000,\n            \"quantity\": 1\n        },\n        {\n            \"item_id\": \"1000764491\",\n            \"price\": 400,\n            \"quantity\": 7\n        }\n    ]\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchase/client\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"client-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/purchase/client \\\n  --header 'client-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_list\": [\n    [\n      \"item_id\": \"1000757666\",\n      \"price\": 5000,\n      \"quantity\": 1\n    ],\n    [\n      \"item_id\": \"1000764491\",\n      \"price\": 400,\n      \"quantity\": 7\n    ]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchase/client\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/purchase":{"get":{"tags":["User Data Collection"],"summary":"Get purchased info by user id","description":"Get purchased information by id\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |","operationId":"get_v1_items_purchase_get","parameters":[{"required":true,"schema":{"title":"User Id","type":"string"},"name":"user_id","in":"query"},{"required":false,"schema":{"title":"Member Id","type":"string"},"name":"member_id","in":"query"},{"required":false,"schema":{"title":"Start","type":"integer"},"name":"start","in":"query"},{"required":false,"schema":{"title":"Size","type":"integer"},"name":"size","in":"query"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchase',\n  qs: {\n    user_id: 'SOME_STRING_VALUE',\n    member_id: 'SOME_STRING_VALUE',\n    start: 'SOME_INTEGER_VALUE',\n    size: 'SOME_INTEGER_VALUE'\n  },\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/purchase\");\n\nreq.query({\n  \"user_id\": \"SOME_STRING_VALUE\",\n  \"member_id\": \"SOME_STRING_VALUE\",\n  \"start\": \"SOME_INTEGER_VALUE\",\n  \"size\": \"SOME_INTEGER_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchase');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchase\"\n\nquerystring = {\"user_id\":\"SOME_STRING_VALUE\",\"member_id\":\"SOME_STRING_VALUE\",\"start\":\"SOME_INTEGER_VALUE\",\"size\":\"SOME_INTEGER_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchase?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"post":{"tags":["User Data Collection"],"summary":"Captures user purchase information and save them","description":"This endpoints captures user purchase info and save it to the database. It takes\nuser_id, item_list which includes item_id, price, quantity for a specific item as\nrequired parameters and member_id as an optional parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_list | List[Dict[str,str]] | str | Represents item list of purchased items including item_id, price, quantity. |\n| item_id | str | str | Represents the id of the purchased item. |\n| price | str | str | Price of that purchased item. |\n| quantity | str | str | Number of items that are purchased for specific item id. |","operationId":"purchase_v1_items_purchase_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PurchaseSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchase\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchase\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchase\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchase\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/purchase\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchase\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_list\": [\n    {\n      \"item_id\": \"1000757666\",\n      \"price\": 5000,\n      \"quantity\": 1\n    },\n    {\n      \"item_id\": \"1000764491\",\n      \"price\": 400,\n      \"quantity\": 7\n    }\n  ]\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchase\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_list: [\n    {item_id: '1000757666', price: 5000, quantity: 1},\n    {item_id: '1000764491', price: 400, quantity: 7}\n  ]\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchase',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_list: [\n      {item_id: '1000757666', price: 5000, quantity: 1},\n      {item_id: '1000764491', price: 400, quantity: 7}\n    ]\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_list\": [\n    {\n      \"item_id\": \"1000757666\",\n      \"price\": 5000,\n      \"quantity\": 1\n    },\n    {\n      \"item_id\": \"1000764491\",\n      \"price\": 400,\n      \"quantity\": 7\n    }\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_list\": @[ @{ @\"item_id\": @\"1000757666\", @\"price\": @5000, @\"quantity\": @1 }, @{ @\"item_id\": @\"1000764491\", @\"price\": @400, @\"quantity\": @7 } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchase\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchase\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchase');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/purchase\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchase\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_list\": [\n        {\n            \"item_id\": \"1000757666\",\n            \"price\": 5000,\n            \"quantity\": 1\n        },\n        {\n            \"item_id\": \"1000764491\",\n            \"price\": 400,\n            \"quantity\": 7\n        }\n    ]\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchase\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_list\\\":[{\\\"item_id\\\":\\\"1000757666\\\",\\\"price\\\":5000,\\\"quantity\\\":1},{\\\"item_id\\\":\\\"1000764491\\\",\\\"price\\\":400,\\\"quantity\\\":7}]}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/purchase \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_list\":[{\"item_id\":\"1000757666\",\"price\":5000,\"quantity\":1},{\"item_id\":\"1000764491\",\"price\":400,\"quantity\":7}]}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_list\": [\n    [\n      \"item_id\": \"1000757666\",\n      \"price\": 5000,\n      \"quantity\": 1\n    ],\n    [\n      \"item_id\": \"1000764491\",\n      \"price\": 400,\n      \"quantity\": 7\n    ]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchase\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/purchase/save":{"post":{"tags":["Historical User Data Collection"],"summary":"Upload a CSV file and save data in purchase index","description":"This endpoint uploads and saves data from the CSV file in the purchase index. It only\ntakes text or CSV files as a required parameter. If you want to upload your\npurchase data from a CSV file with our recommender system this endpoint will upload\nthe file and save them to the database.","operationId":"post_purchase_csv_v1_items_purchase_save_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_post_purchase_csv_v1_items_purchase_save_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchase/save\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchase/save\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchase/save\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchase/save\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/purchase/save\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchase/save\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase/save\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchase/save\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchase/save',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchase/save\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchase/save\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchase/save\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchase/save');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchase/save');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/purchase/save\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchase/save\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchase/save\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/purchase/save \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchase/save\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/rating":{"get":{"tags":["User Data Collection"],"summary":"Get rating info by user id","description":"Get ratings information by id\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |","operationId":"get_v1_items_rating_get","parameters":[{"required":true,"schema":{"title":"User Id","type":"string"},"name":"user_id","in":"query"},{"required":false,"schema":{"title":"Member Id","type":"string"},"name":"member_id","in":"query"},{"required":false,"schema":{"title":"Start","type":"integer"},"name":"start","in":"query"},{"required":false,"schema":{"title":"Size","type":"integer"},"name":"size","in":"query"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/items/rating',\n  qs: {\n    user_id: 'SOME_STRING_VALUE',\n    member_id: 'SOME_STRING_VALUE',\n    start: 'SOME_INTEGER_VALUE',\n    size: 'SOME_INTEGER_VALUE'\n  },\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/items/rating\");\n\nreq.query({\n  \"user_id\": \"SOME_STRING_VALUE\",\n  \"member_id\": \"SOME_STRING_VALUE\",\n  \"start\": \"SOME_INTEGER_VALUE\",\n  \"size\": \"SOME_INTEGER_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/rating');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/rating\"\n\nquerystring = {\"user_id\":\"SOME_STRING_VALUE\",\"member_id\":\"SOME_STRING_VALUE\",\"start\":\"SOME_INTEGER_VALUE\",\"size\":\"SOME_INTEGER_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/rating?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"post":{"tags":["User Data Collection"],"summary":"Capture user's given ratings on specific item and save them","description":"This endpoint captures users given ratings positive (1) or negative (0) on\na specific item and save them to the database. It takes user_id, item_id, and\nrating for the specific item as required parameters and member_id as an optional parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_id | str | str | Represents the id of the rated item. |\n| rating | str | str | Represents the rating for specific items. The value should be either \"1\" or \"0\" where \"1\" represents positive rating and \"0\" represents negative rating. |","operationId":"post_v1_items_rating_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RatingSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/rating\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/rating\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/rating\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/rating\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/rating\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/rating\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\",\n  \"rating\": \"1\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/rating\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_id: '1000764491',\n  rating: '1'\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/rating',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_id: '1000764491',\n    rating: '1'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\",\n  \"rating\": \"1\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_id\": @\"1000764491\",\n                              @\"rating\": @\"1\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/rating\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/rating\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/rating');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/rating\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/rating\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_id\": \"1000764491\",\n    \"rating\": \"1\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/rating\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/rating \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\",\n  \"rating\": \"1\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/rating\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/rating/client":{"post":{"tags":["User Data Collection"],"summary":"Capture user's given ratings on specific item and save them using client-key","description":"This endpoint captures users given ratings positive (1) or negative (0) on\na specific item and save them to the database. It takes user_id, item_id, and\nrating for the specific item as required parameters and member_id as an optional parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_id | str | str | Represents the id of the rated item. |\n| rating | str | str | Represents the rating for specific items. The value should be either \"1\" or \"0\" where \"1\" represents positive rating and \"0\" represents negative rating. |","operationId":"post_client_v1_items_rating_client_post","parameters":[{"required":true,"schema":{"title":"Client-Key","type":"string"},"name":"client-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RatingSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/rating/client\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"client-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/rating/client\"),\n    Headers =\n    {\n        { \"client-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/rating/client\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/rating/client\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"client-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/rating/client\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"client-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/rating/client\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\",\n  \"rating\": \"1\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating/client\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"client-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/rating/client\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_id: '1000764491',\n  rating: '1'\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/rating/client',\n  headers: {'content-type': 'application/json', 'client-key': 'SOME_STRING_VALUE'},\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_id: '1000764491',\n    rating: '1'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating/client\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\",\n  \"rating\": \"1\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"client-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_id\": @\"1000764491\",\n                              @\"rating\": @\"1\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/rating/client\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/rating/client\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"client-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/rating/client');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating/client');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'client-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/rating/client\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/rating/client\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_id\": \"1000764491\",\n    \"rating\": \"1\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/rating/client\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"client-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000764491\\\",\\\"rating\\\":\\\"1\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/rating/client \\\n  --header 'client-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000764491\",\"rating\":\"1\"}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000764491\",\n  \"rating\": \"1\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/rating/client\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/rating/save":{"post":{"tags":["Historical User Data Collection"],"summary":"Upload a CSV file and save data in rating index","description":"This endpoint uploads and saves data from the CSV file in the rating index. It only\ntakes text or CSV files as a required parameter. If you want to upload your\nrating data from a CSV file with our recommender system this endpoint will upload\nthe file and save them to the database.","operationId":"post_rating_csv_v1_items_rating_save_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_post_rating_csv_v1_items_rating_save_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/rating/save\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/rating/save\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/rating/save\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/rating/save\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/rating/save\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/rating/save\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating/save\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/rating/save\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/rating/save',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/rating/save\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/rating/save\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/rating/save\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/rating/save');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/rating/save');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/rating/save\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/rating/save\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/rating/save\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/rating/save \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/rating/save\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/users/generate/id":{"get":{"tags":["User Data Collection"],"summary":"Generate an unique user id","description":"This end point generates an unique user id.","operationId":"get_v1_users_generate_id_get","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/generate/id\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/generate/id\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/generate/id\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/generate/id\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/users/generate/id\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/generate/id\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/users/generate/id\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/generate/id\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/users/generate/id',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/users/generate/id\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/generate/id\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/generate/id\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/generate/id');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/generate/id');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/users/generate/id\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/generate/id\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/generate/id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/users/generate/id \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/generate/id\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/users":{"get":{"tags":["User Data Collection"],"summary":"Get user info by user id","description":"Get user information by id\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |","operationId":"get_v1_users_get","parameters":[{"required":true,"schema":{"title":"User Id","type":"string"},"name":"user_id","in":"query"},{"required":false,"schema":{"title":"Member Id","type":"string"},"name":"member_id","in":"query"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/users',\n  qs: {user_id: 'SOME_STRING_VALUE', member_id: 'SOME_STRING_VALUE'},\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/users\");\n\nreq.query({\n  \"user_id\": \"SOME_STRING_VALUE\",\n  \"member_id\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'user_id' => 'SOME_STRING_VALUE',\n  'member_id' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users\"\n\nquerystring = {\"user_id\":\"SOME_STRING_VALUE\",\"member_id\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users?user_id=SOME_STRING_VALUE&member_id=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["User Data Collection"],"summary":"Updates user information","description":"This endpoint captures user information and saves them to the database.\nIt takes user_id and user_info as required parameters and member_id as optional\nparameter.\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| address | Optional[str] | str | Represents address of the unique user. |\n| gender | Optional[int] | int | Represents gender of the unique user. 1 for male or 2 for female or 3 for others. |\n| age | Optional[int] | int | Represents age of the user. |\n| key_name | str | str | Represents the type or preference of the user. If you have multiple values for user preference you can assign them here. |\n| separator | Optional[str] | str | If one key contains multiple parameter with separator in your data source please assign the separator here. If there is no separator in column value you can pass `null` or remove the key from the request body. |","operationId":"put_v1_users_put","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/users\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": {\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [\n      {\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      },\n      {\n        \"key_name2\": \"value3\"\n      }\n    ]\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/users\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  user_info: {\n    address: 'string',\n    gender: 'integer --> 1 for male or 2 for female or 3 for others',\n    age: 25,\n    user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/users',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    user_info: {\n      address: 'string',\n      gender: 'integer --> 1 for male or 2 for female or 3 for others',\n      age: 25,\n      user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/users\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": {\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [\n      {\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      },\n      {\n        \"key_name2\": \"value3\"\n      }\n    ]\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"user_info\": @{ @\"address\": @\"string\", @\"gender\": @\"integer --> 1 for male or 2 for female or 3 for others\", @\"age\": @25, @\"user_type\": @[ @{ @\"key_name1\": @\"value1_value2\", @\"separator\": @\"_\" }, @{ @\"key_name2\": @\"value3\" } ] } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/users\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"user_info\": {\n        \"address\": \"string\",\n        \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n        \"age\": 25,\n        \"user_type\": [{\n                \"key_name1\": \"value1_value2\",\n                \"separator\": \"_\"\n            }, {\"key_name2\": \"value3\"}]\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/users \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": [\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [[\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      ], [\"key_name2\": \"value3\"]]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"post":{"tags":["User Data Collection"],"summary":"Captures user information","description":"This endpoint captures user information and saves them to the database.\nIt takes user_id and user_info as required parameters and member_id as optional\nparameter.\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| address | Optional[str] | str | Represents address of the unique user. |\n| gender | Optional[int] | int | Represents gender of the unique user. 1 for male or 2 for female or 3 for others. |\n| age | Optional[int] | int | Represents age of the user. |\n| key_name | str | str | Represents the type or preference of the user. If you have multiple values for user preference you can assign them here. |\n| separator | Optional[str] | str | If one key contains multiple parameter with separator in your data source please assign the separator here. If there is no separator in column value you can pass `null` or remove the key from the request body. |","operationId":"post_v1_users_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/users\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": {\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [\n      {\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      },\n      {\n        \"key_name2\": \"value3\"\n      }\n    ]\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/users\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  user_info: {\n    address: 'string',\n    gender: 'integer --> 1 for male or 2 for female or 3 for others',\n    age: 25,\n    user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/users',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    user_info: {\n      address: 'string',\n      gender: 'integer --> 1 for male or 2 for female or 3 for others',\n      age: 25,\n      user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/users\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": {\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [\n      {\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      },\n      {\n        \"key_name2\": \"value3\"\n      }\n    ]\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"user_info\": @{ @\"address\": @\"string\", @\"gender\": @\"integer --> 1 for male or 2 for female or 3 for others\", @\"age\": @25, @\"user_type\": @[ @{ @\"key_name1\": @\"value1_value2\", @\"separator\": @\"_\" }, @{ @\"key_name2\": @\"value3\" } ] } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/users\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"user_info\": {\n        \"address\": \"string\",\n        \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n        \"age\": 25,\n        \"user_type\": [{\n                \"key_name1\": \"value1_value2\",\n                \"separator\": \"_\"\n            }, {\"key_name2\": \"value3\"}]\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/users \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": [\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [[\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      ], [\"key_name2\": \"value3\"]]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/users/client":{"post":{"tags":["User Data Collection"],"summary":"Captures user information using client key","description":"This endpoint captures user information and saves them to the database.\nIt takes user_id and user_info as required parameters and member_id as optional\nparameter.\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| address | Optional[str] | str | Represents address of the unique user. |\n| gender | Optional[int] | int | Represents gender of the unique user. 1 for male or 2 for female or 3 for others. |\n| age | Optional[int] | int | Represents age of the user. |\n| key_name | str | str | Represents the type or preference of the user. If you have multiple values for user preference you can assign them here. |\n| separator | Optional[str] | str | If one key contains multiple parameter with separator in your data source please assign the separator here. If there is no separator in column value you can pass `null` or remove the key from the request body. |","operationId":"post_client_v1_users_client_post","parameters":[{"required":true,"schema":{"title":"Client-Key","type":"string"},"name":"client-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/client\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"client-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/client\"),\n    Headers =\n    {\n        { \"client-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/client\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/client\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"client-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/users/client\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"client-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/client\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": {\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [\n      {\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      },\n      {\n        \"key_name2\": \"value3\"\n      }\n    ]\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/client\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"client-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/client\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  user_info: {\n    address: 'string',\n    gender: 'integer --> 1 for male or 2 for female or 3 for others',\n    age: 25,\n    user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/users/client',\n  headers: {'content-type': 'application/json', 'client-key': 'SOME_STRING_VALUE'},\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    user_info: {\n      address: 'string',\n      gender: 'integer --> 1 for male or 2 for female or 3 for others',\n      age: 25,\n      user_type: [{key_name1: 'value1_value2', separator: '_'}, {key_name2: 'value3'}]\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/client\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": {\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [\n      {\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      },\n      {\n        \"key_name2\": \"value3\"\n      }\n    ]\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"client-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"user_info\": @{ @\"address\": @\"string\", @\"gender\": @\"integer --> 1 for male or 2 for female or 3 for others\", @\"age\": @25, @\"user_type\": @[ @{ @\"key_name1\": @\"value1_value2\", @\"separator\": @\"_\" }, @{ @\"key_name2\": @\"value3\" } ] } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/client\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/client\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\",\n  CURLOPT_HTTPHEADER => [\n    \"client-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/client');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/client');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'client-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'client-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/users/client\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/client\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"user_info\": {\n        \"address\": \"string\",\n        \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n        \"age\": 25,\n        \"user_type\": [{\n                \"key_name1\": \"value1_value2\",\n                \"separator\": \"_\"\n            }, {\"key_name2\": \"value3\"}]\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"client-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/client\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"client-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"user_info\\\":{\\\"address\\\":\\\"string\\\",\\\"gender\\\":\\\"integer --> 1 for male or 2 for female or 3 for others\\\",\\\"age\\\":25,\\\"user_type\\\":[{\\\"key_name1\\\":\\\"value1_value2\\\",\\\"separator\\\":\\\"_\\\"},{\\\"key_name2\\\":\\\"value3\\\"}]}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/users/client \\\n  --header 'client-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"user_info\":{\"address\":\"string\",\"gender\":\"integer --> 1 for male or 2 for female or 3 for others\",\"age\":25,\"user_type\":[{\"key_name1\":\"value1_value2\",\"separator\":\"_\"},{\"key_name2\":\"value3\"}]}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"client-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"user_info\": [\n    \"address\": \"string\",\n    \"gender\": \"integer --> 1 for male or 2 for female or 3 for others\",\n    \"age\": 25,\n    \"user_type\": [[\n        \"key_name1\": \"value1_value2\",\n        \"separator\": \"_\"\n      ], [\"key_name2\": \"value3\"]]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/client\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/users/save":{"post":{"tags":["Historical User Data Collection"],"summary":"Upload a CSV file and save data in user index","description":"This endpoint uploads and saves data from the CSV file in the user index. It only\ntakes text or CSV files as a required parameter. If you want to upload your\nuser information data from a CSV file with our recommender system this endpoint will upload\nthe file and save them to the database.","operationId":"post_user_csv_v1_users_save_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_post_user_csv_v1_users_save_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/save\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/save\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/save\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/save\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/users/save\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/save\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/save\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/save\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/users/save',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/save\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/save\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/save\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/save');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/save');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/users/save\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/save\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/save\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/users/save \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/save\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/recommend":{"post":{"tags":["Recommendation"],"summary":"recommend the most similar items to our input item_id in terms of content","description":"This endpoint understands the content of your item and returns the most similar\nitems as response. It takes user_id, item_id, details as required parameter\nand member_id as optional parameter.\nThis endpoint can be used on product details page.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_id | str | str | Represents the id of an item. |\n| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |","operationId":"item_recommend_details_v1_items_recommend_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ItemRecommendSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/recommend\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/recommend\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/recommend\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/recommend\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/recommend\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/recommend\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"details\": true\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/recommend\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/recommend\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_id: '1000757666',\n  details: true\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/recommend',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_id: '1000757666',\n    details: true\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/recommend\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"details\": true\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_id\": @\"1000757666\",\n                              @\"details\": @YES };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/recommend\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/recommend\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/recommend');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/recommend');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/recommend\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/recommend\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_id\": \"1000757666\",\n    \"details\": True\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/recommend\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/recommend \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"details\": true\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/recommend\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/purchased/together":{"post":{"tags":["Recommendation"],"summary":"recommend items those are purchased together","description":"This endpoint returns items those are frequently purchased together. \nIt takes user_id, item_id, details as required parameter\nand member_id as optional parameter.\nThis endpoint can be used on product details page.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_id | str | str | Represents the id of an item. |\n| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |","operationId":"item_purchased_together_v1_items_purchased_together_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ItemRecommendSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/purchased/together\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/purchased/together\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/purchased/together\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/purchased/together\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/purchased/together\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/purchased/together\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"details\": true\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchased/together\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/purchased/together\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_id: '1000757666',\n  details: true\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/purchased/together',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_id: '1000757666',\n    details: true\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/purchased/together\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"details\": true\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_id\": @\"1000757666\",\n                              @\"details\": @YES };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/purchased/together\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/purchased/together\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/purchased/together');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/purchased/together');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/purchased/together\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/purchased/together\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_id\": \"1000757666\",\n    \"details\": True\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/purchased/together\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"details\\\":true}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/purchased/together \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"details\":true}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"details\": true\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/purchased/together\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/users/recommend":{"post":{"tags":["Recommendation"],"summary":"recommend the most suitable items based on user behavior","description":"This endpoint understands user behavior such as browse, purchase, favorites,\ntime spent in your application and returns the most suitable items for them\nas response. It takes user_id, details, interval, top_n_items as required parameter and member_id as\noptional parameter.\nThis endpoint can be used on user feed, top page, personalized suggestions etc.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| interval | Enum | Selected enum value | Represents the time range depending which it will predict trending and top recommended items. Available values are `weekly`, `bi-weekly`, `monthly`, `quarterly`, `yearly`. Interval should be similar to the interval parameter of `../rank/settings` endpoint.\n| top_n_item | int | int | Represents number of top ranked items in given time interval. |\n| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |","operationId":"behavior_recommend_details_v1_users_recommend_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BehaviorRecommendSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/recommend\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/recommend\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/recommend\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/recommend\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/users/recommend\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/recommend\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"top_n_item\": 100,\n  \"interval\": \"weekly\",\n  \"start\": 0,\n  \"size\": 10,\n  \"details\": true\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/recommend\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/recommend\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  top_n_item: 100,\n  interval: 'weekly',\n  start: 0,\n  size: 10,\n  details: true\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/users/recommend',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    top_n_item: 100,\n    interval: 'weekly',\n    start: 0,\n    size: 10,\n    details: true\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/recommend\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"top_n_item\": 100,\n  \"interval\": \"weekly\",\n  \"start\": 0,\n  \"size\": 10,\n  \"details\": true\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"top_n_item\": @100,\n                              @\"interval\": @\"weekly\",\n                              @\"start\": @0,\n                              @\"size\": @10,\n                              @\"details\": @YES };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/recommend\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/recommend\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/recommend');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"top_n_item\":100,\"interval\":\"weekly\",\"start\":0,\"size\":10,\"details\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"top_n_item\":100,\"interval\":\"weekly\",\"start\":0,\"size\":10,\"details\":true}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/recommend');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/users/recommend\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/recommend\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"top_n_item\": 100,\n    \"interval\": \"weekly\",\n    \"start\": 0,\n    \"size\": 10,\n    \"details\": True\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/recommend\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"start\\\":0,\\\"size\\\":10,\\\"details\\\":true}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/users/recommend \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"top_n_item\":100,\"interval\":\"weekly\",\"start\":0,\"size\":10,\"details\":true}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"top_n_item\": 100,\n  \"interval\": \"weekly\",\n  \"start\": 0,\n  \"size\": 10,\n  \"details\": true\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/recommend\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/trending":{"post":{"tags":["Recommendation"],"summary":"recommend the latest trending items","description":"This endpoint considers all sorts of possible parameters in your application\nsuch as user behavior, item co-relation, external impact, business impact and\nreturns the trending items for given interval as response. It takes top_n_item,\ninterval, details as required parameters.\nThis endpoint can be used on user feed, top page, personalized suggestions etc.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| top_n_item | int | int | Represents number of top ranked items in given time interval. |\n| interval | Enum | Selected enum value | Represents the time range depending which it will predict trending and top recommended items. Available values are `weekly`, `bi-weekly`, `monthly`, `quarterly`, `yearly`. Interval should be similar to the interval parameter of `../rank/settings` endpoint. |\n| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |","operationId":"rank_recommend_v1_items_trending_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RankRecommendSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/trending\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/trending\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/trending\"\n\n\tpayload := strings.NewReader(\"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/trending\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/trending\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/trending\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"top_n_item\": 100,\n  \"interval\": \"weekly\",\n  \"details\": true\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/trending\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/trending\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({top_n_item: 100, interval: 'weekly', details: true}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/trending',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {top_n_item: 100, interval: 'weekly', details: true},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/trending\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"top_n_item\": 100,\n  \"interval\": \"weekly\",\n  \"details\": true\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"top_n_item\": @100,\n                              @\"interval\": @\"weekly\",\n                              @\"details\": @YES };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/trending\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/trending\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/trending');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"top_n_item\":100,\"interval\":\"weekly\",\"details\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"top_n_item\":100,\"interval\":\"weekly\",\"details\":true}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/trending');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/trending\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/trending\"\n\npayload = {\n    \"top_n_item\": 100,\n    \"interval\": \"weekly\",\n    \"details\": True\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/trending\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"top_n_item\\\":100,\\\"interval\\\":\\\"weekly\\\",\\\"details\\\":true}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/trending \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"top_n_item\":100,\"interval\":\"weekly\",\"details\":true}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"top_n_item\": 100,\n  \"interval\": \"weekly\",\n  \"details\": true\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/trending\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/image/recommend":{"post":{"tags":["Recommendation"],"summary":"recommend items based on image similarity","description":"This endpoint understands the features your input image contains and returns the\nmost similar items in your catalog in terms of the image features. It also considers\nuser behavior to boost the result. It takes user_id, item_id, details as required\nparameter and member_id, image_url as optional parameter.\nThis endpoint can be used on product details page.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| item_id | str | str | Represents the id of an item. |\n| ItemDetails | Optional[Dict[str, str]] | str | Represents the item details. If you use unknown item_id which does not exist in your data source then you have to pass item details to get most similar items. |\n| image_url | str | str | Represents the image url of an item from this url it generate features will find the most similar items. |\n| price | int | int | Represents the price of the given image_urls item. |\n| category | Optional[List[str]] | int | Represents the list of categories of the given image_urls item. This category values has to be matched with the previously added items data |\n| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |","operationId":"image_recommend_v1_items_image_recommend_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImageRecommendSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/image/recommend\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/image/recommend\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/image/recommend\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/image/recommend\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/image/recommend\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/image/recommend\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"item_details\": {\n    \"image_url\": \"https://picsum.photos/200/300\",\n    \"price\": 8525,\n    \"category\": [\n      \"304904\",\n      \"304029\",\n      \"302536\"\n    ]\n  },\n  \"details\": true\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/image/recommend\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/image/recommend\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  item_id: '1000757666',\n  item_details: {\n    image_url: 'https://picsum.photos/200/300',\n    price: 8525,\n    category: ['304904', '304029', '302536']\n  },\n  details: true\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/image/recommend',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    item_id: '1000757666',\n    item_details: {\n      image_url: 'https://picsum.photos/200/300',\n      price: 8525,\n      category: ['304904', '304029', '302536']\n    },\n    details: true\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/image/recommend\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"item_details\": {\n    \"image_url\": \"https://picsum.photos/200/300\",\n    \"price\": 8525,\n    \"category\": [\n      \"304904\",\n      \"304029\",\n      \"302536\"\n    ]\n  },\n  \"details\": true\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"item_id\": @\"1000757666\",\n                              @\"item_details\": @{ @\"image_url\": @\"https://picsum.photos/200/300\", @\"price\": @8525, @\"category\": @[ @\"304904\", @\"304029\", @\"302536\" ] },\n                              @\"details\": @YES };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/image/recommend\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/image/recommend\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/image/recommend');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"item_details\":{\"image_url\":\"https://picsum.photos/200/300\",\"price\":8525,\"category\":[\"304904\",\"304029\",\"302536\"]},\"details\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"item_details\":{\"image_url\":\"https://picsum.photos/200/300\",\"price\":8525,\"category\":[\"304904\",\"304029\",\"302536\"]},\"details\":true}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/image/recommend');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/image/recommend\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/image/recommend\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"item_id\": \"1000757666\",\n    \"item_details\": {\n        \"image_url\": \"https://picsum.photos/200/300\",\n        \"price\": 8525,\n        \"category\": [\"304904\", \"304029\", \"302536\"]\n    },\n    \"details\": True\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/image/recommend\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"item_id\\\":\\\"1000757666\\\",\\\"item_details\\\":{\\\"image_url\\\":\\\"https://picsum.photos/200/300\\\",\\\"price\\\":8525,\\\"category\\\":[\\\"304904\\\",\\\"304029\\\",\\\"302536\\\"]},\\\"details\\\":true}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/image/recommend \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"item_id\":\"1000757666\",\"item_details\":{\"image_url\":\"https://picsum.photos/200/300\",\"price\":8525,\"category\":[\"304904\",\"304029\",\"302536\"]},\"details\":true}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"item_id\": \"1000757666\",\n  \"item_details\": [\n    \"image_url\": \"https://picsum.photos/200/300\",\n    \"price\": 8525,\n    \"category\": [\"304904\", \"304029\", \"302536\"]\n  ],\n  \"details\": true\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/image/recommend\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/users/search/recommend":{"post":{"tags":["Recommendation"],"summary":"recommend items based on user search history","description":"This endpoint understands user behavior based on their search history and returns\nthe most suitable items for them as response. It takes user_id, type, storage, details as required\nparameter and member_id as optional parameter. This endpoint can be used on user\nfeed, top page, personalized suggestions etc.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| user_id | str | str | Represents the id of a logged-out unique user. |\n| member_id | Optional[str] | str | Represents the id of a logged-in unique user. |\n| type | Enum | Selected enum value | Represents the type of GPT search. Available values are `individual` and `group`. |\n| storage | Enum | Selected enum value | Represents the type of Storage. Available values are `memory` and `database`. |\n| details | bool | bool | If you want to get recommended items with details this parameter would be `True` otherwise it would be `False`. |","operationId":"search_recommend_details_v1_users_search_recommend_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SearchRecommendSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/users/search/recommend\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/users/search/recommend\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/users/search/recommend\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/users/search/recommend\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/users/search/recommend\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/users/search/recommend\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"type\": \"individual\",\n  \"storage\": \"memory\",\n  \"search_size\": 1000,\n  \"start\": 0,\n  \"size\": 10,\n  \"language\": \"en\",\n  \"is_keyword_enabled\": false,\n  \"details\": true\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/search/recommend\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/users/search/recommend\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  type: 'individual',\n  storage: 'memory',\n  search_size: 1000,\n  start: 0,\n  size: 10,\n  language: 'en',\n  is_keyword_enabled: false,\n  details: true\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/users/search/recommend',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    type: 'individual',\n    storage: 'memory',\n    search_size: 1000,\n    start: 0,\n    size: 10,\n    language: 'en',\n    is_keyword_enabled: false,\n    details: true\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/users/search/recommend\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"type\": \"individual\",\n  \"storage\": \"memory\",\n  \"search_size\": 1000,\n  \"start\": 0,\n  \"size\": 10,\n  \"language\": \"en\",\n  \"is_keyword_enabled\": false,\n  \"details\": true\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"type\": @\"individual\",\n                              @\"storage\": @\"memory\",\n                              @\"search_size\": @1000,\n                              @\"start\": @0,\n                              @\"size\": @10,\n                              @\"language\": @\"en\",\n                              @\"is_keyword_enabled\": @NO,\n                              @\"details\": @YES };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/users/search/recommend\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/users/search/recommend\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/users/search/recommend');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"type\":\"individual\",\"storage\":\"memory\",\"search_size\":1000,\"start\":0,\"size\":10,\"language\":\"en\",\"is_keyword_enabled\":false,\"details\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"type\":\"individual\",\"storage\":\"memory\",\"search_size\":1000,\"start\":0,\"size\":10,\"language\":\"en\",\"is_keyword_enabled\":false,\"details\":true}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/users/search/recommend');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/users/search/recommend\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/users/search/recommend\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"type\": \"individual\",\n    \"storage\": \"memory\",\n    \"search_size\": 1000,\n    \"start\": 0,\n    \"size\": 10,\n    \"language\": \"en\",\n    \"is_keyword_enabled\": False,\n    \"details\": True\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/users/search/recommend\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"type\\\":\\\"individual\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"language\\\":\\\"en\\\",\\\"is_keyword_enabled\\\":false,\\\"details\\\":true}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/users/search/recommend \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"type\":\"individual\",\"storage\":\"memory\",\"search_size\":1000,\"start\":0,\"size\":10,\"language\":\"en\",\"is_keyword_enabled\":false,\"details\":true}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"type\": \"individual\",\n  \"storage\": \"memory\",\n  \"search_size\": 1000,\n  \"start\": 0,\n  \"size\": 10,\n  \"language\": \"en\",\n  \"is_keyword_enabled\": false,\n  \"details\": true\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/users/search/recommend\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/questionnaire/recommend":{"post":{"tags":["Recommendation"],"summary":"Get product recommendation with questionnaire result from users.","description":"Get product recommendation with questionnaire result from users.","operationId":"post_questionnaire_recommend_v1_questionnaire_recommend_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/QuestionnaireRequestSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"questionnaire_id\": \"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\n  \"values\": {\n    \"section_name\": {\n      \"q1\": \"c\",\n      \"q2\": \"a\",\n      \"q3\": \"b\"\n    }\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaire/recommend\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  questionnaire_id: 'c8e9fd30-1d85-4bd6-929a-47cc509c5756',\n  values: {section_name: {q1: 'c', q2: 'a', q3: 'b'}}\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaire/recommend',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    questionnaire_id: 'c8e9fd30-1d85-4bd6-929a-47cc509c5756',\n    values: {section_name: {q1: 'c', q2: 'a', q3: 'b'}}\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"questionnaire_id\": \"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\n  \"values\": {\n    \"section_name\": {\n      \"q1\": \"c\",\n      \"q2\": \"a\",\n      \"q3\": \"b\"\n    }\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"questionnaire_id\": @\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\n                              @\"values\": @{ @\"section_name\": @{ @\"q1\": @\"c\", @\"q2\": @\"a\", @\"q3\": @\"b\" } } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaire/recommend');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"questionnaire_id\":\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\"values\":{\"section_name\":{\"q1\":\"c\",\"q2\":\"a\",\"q3\":\"b\"}}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"questionnaire_id\":\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\"values\":{\"section_name\":{\"q1\":\"c\",\"q2\":\"a\",\"q3\":\"b\"}}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaire/recommend');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/questionnaire/recommend\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"questionnaire_id\": \"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\n    \"values\": {\"section_name\": {\n            \"q1\": \"c\",\n            \"q2\": \"a\",\n            \"q3\": \"b\"\n        }}\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"questionnaire_id\\\":\\\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\\\",\\\"values\\\":{\\\"section_name\\\":{\\\"q1\\\":\\\"c\\\",\\\"q2\\\":\\\"a\\\",\\\"q3\\\":\\\"b\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaire/recommend \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"questionnaire_id\":\"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\"values\":{\"section_name\":{\"q1\":\"c\",\"q2\":\"a\",\"q3\":\"b\"}}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"questionnaire_id\": \"c8e9fd30-1d85-4bd6-929a-47cc509c5756\",\n  \"values\": [\"section_name\": [\n      \"q1\": \"c\",\n      \"q2\": \"a\",\n      \"q3\": \"b\"\n    ]]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaire/recommend\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/questionnaires":{"post":{"tags":["questionnaire"],"summary":"Create a new questionnaire","description":"Create a new questionnaire.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| name | str | str | name of the questionnaire |\n| questions | dict[str, dict] | obj | questions object hold sections and its list of questions. Each question will in their separate object. key of the question objects should be like `q1`, `q2`, `q3` and so on|\n| question_text | str | str | the question string |\n| type | str | str | type of the question; e.g. radio/checkbox/free text..... |\n| options | str | list[str] | a list of possible answers of the question and their serial|\n\nA successful response includes a questionnaire id.","operationId":"post_questionnaire_v1_questionnaires_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/QuestionnaireInsertSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/questionnaires\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"name\": \"Name of your questionnaire\",\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"question\": \"whats your age?\",\n        \"type\": \"text\",\n        \"options\": {\n          \"age\": \"\"\n        }\n      },\n      \"q2\": {\n        \"question\": \"whats your gender?\",\n        \"type\": \"radio\",\n        \"options\": {\n          \"a\": \"male\",\n          \"b\": \"female\"\n        }\n      }\n    },\n    \"skincare_goal\": {\n      \"q1\": {\n        \"question\": \"what is your skincare concern?\",\n        \"type\": \"checkbox\",\n        \"options\": {\n          \"a\": \"acne\",\n          \"b\": \"anti-aging\",\n          \"c\": \"Closed comedons(blackheads, whiteheads)\",\n          \"d\": \"Hyperpigmentation\",\n          \"e\": \"Dullness\",\n          \"f\": \"Dehydrated skin\"\n        }\n      }\n    }\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/questionnaires\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'Name of your questionnaire',\n  questions: {\n    skincare_history: {\n      q1: {question: 'whats your age?', type: 'text', options: {age: ''}},\n      q2: {\n        question: 'whats your gender?',\n        type: 'radio',\n        options: {a: 'male', b: 'female'}\n      }\n    },\n    skincare_goal: {\n      q1: {\n        question: 'what is your skincare concern?',\n        type: 'checkbox',\n        options: {\n          a: 'acne',\n          b: 'anti-aging',\n          c: 'Closed comedons(blackheads, whiteheads)',\n          d: 'Hyperpigmentation',\n          e: 'Dullness',\n          f: 'Dehydrated skin'\n        }\n      }\n    }\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    name: 'Name of your questionnaire',\n    questions: {\n      skincare_history: {\n        q1: {question: 'whats your age?', type: 'text', options: {age: ''}},\n        q2: {\n          question: 'whats your gender?',\n          type: 'radio',\n          options: {a: 'male', b: 'female'}\n        }\n      },\n      skincare_goal: {\n        q1: {\n          question: 'what is your skincare concern?',\n          type: 'checkbox',\n          options: {\n            a: 'acne',\n            b: 'anti-aging',\n            c: 'Closed comedons(blackheads, whiteheads)',\n            d: 'Hyperpigmentation',\n            e: 'Dullness',\n            f: 'Dehydrated skin'\n          }\n        }\n      }\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/questionnaires\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"name\": \"Name of your questionnaire\",\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"question\": \"whats your age?\",\n        \"type\": \"text\",\n        \"options\": {\n          \"age\": \"\"\n        }\n      },\n      \"q2\": {\n        \"question\": \"whats your gender?\",\n        \"type\": \"radio\",\n        \"options\": {\n          \"a\": \"male\",\n          \"b\": \"female\"\n        }\n      }\n    },\n    \"skincare_goal\": {\n      \"q1\": {\n        \"question\": \"what is your skincare concern?\",\n        \"type\": \"checkbox\",\n        \"options\": {\n          \"a\": \"acne\",\n          \"b\": \"anti-aging\",\n          \"c\": \"Closed comedons(blackheads, whiteheads)\",\n          \"d\": \"Hyperpigmentation\",\n          \"e\": \"Dullness\",\n          \"f\": \"Dehydrated skin\"\n        }\n      }\n    }\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"name\": @\"Name of your questionnaire\",\n                              @\"questions\": @{ @\"skincare_history\": @{ @\"q1\": @{ @\"question\": @\"whats your age?\", @\"type\": @\"text\", @\"options\": @{ @\"age\": @\"\" } }, @\"q2\": @{ @\"question\": @\"whats your gender?\", @\"type\": @\"radio\", @\"options\": @{ @\"a\": @\"male\", @\"b\": @\"female\" } } }, @\"skincare_goal\": @{ @\"q1\": @{ @\"question\": @\"what is your skincare concern?\", @\"type\": @\"checkbox\", @\"options\": @{ @\"a\": @\"acne\", @\"b\": @\"anti-aging\", @\"c\": @\"Closed comedons(blackheads, whiteheads)\", @\"d\": @\"Hyperpigmentation\", @\"e\": @\"Dullness\", @\"f\": @\"Dehydrated skin\" } } } } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/questionnaires\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires\"\n\npayload = {\n    \"name\": \"Name of your questionnaire\",\n    \"questions\": {\n        \"skincare_history\": {\n            \"q1\": {\n                \"question\": \"whats your age?\",\n                \"type\": \"text\",\n                \"options\": {\"age\": \"\"}\n            },\n            \"q2\": {\n                \"question\": \"whats your gender?\",\n                \"type\": \"radio\",\n                \"options\": {\n                    \"a\": \"male\",\n                    \"b\": \"female\"\n                }\n            }\n        },\n        \"skincare_goal\": {\"q1\": {\n                \"question\": \"what is your skincare concern?\",\n                \"type\": \"checkbox\",\n                \"options\": {\n                    \"a\": \"acne\",\n                    \"b\": \"anti-aging\",\n                    \"c\": \"Closed comedons(blackheads, whiteheads)\",\n                    \"d\": \"Hyperpigmentation\",\n                    \"e\": \"Dullness\",\n                    \"f\": \"Dehydrated skin\"\n                }\n            }}\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"name\": \"Name of your questionnaire\",\n  \"questions\": [\n    \"skincare_history\": [\n      \"q1\": [\n        \"question\": \"whats your age?\",\n        \"type\": \"text\",\n        \"options\": [\"age\": \"\"]\n      ],\n      \"q2\": [\n        \"question\": \"whats your gender?\",\n        \"type\": \"radio\",\n        \"options\": [\n          \"a\": \"male\",\n          \"b\": \"female\"\n        ]\n      ]\n    ],\n    \"skincare_goal\": [\"q1\": [\n        \"question\": \"what is your skincare concern?\",\n        \"type\": \"checkbox\",\n        \"options\": [\n          \"a\": \"acne\",\n          \"b\": \"anti-aging\",\n          \"c\": \"Closed comedons(blackheads, whiteheads)\",\n          \"d\": \"Hyperpigmentation\",\n          \"e\": \"Dullness\",\n          \"f\": \"Dehydrated skin\"\n        ]\n      ]]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/questionnaires/list":{"get":{"tags":["questionnaire"],"summary":"Get all questionnaires","description":"Get all questionnaires.\n\n### Parameters\n----------\n\nReturns all questionnaires associated with the project.","operationId":"get_all_questionnaires_v1_questionnaires_list_get","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/list\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/list\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/list\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/list\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/questionnaires/list\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/list\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/list\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/list\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/list',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/list\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/list\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/list\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/list');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/list');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/questionnaires/list\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/list\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/list\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/list \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/list\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/questionnaires/{questionnaire_id}":{"get":{"tags":["questionnaire"],"summary":"Get details of a questionnaire.","description":"Get details of a questionnaire.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |\n\nReturns a questionnaire given the questionnaire id.","operationId":"get_a_questionnaires_v1_questionnaires__questionnaire_id__get","parameters":[{"required":true,"schema":{"title":"Questionnaire Id","type":"string"},"name":"questionnaire_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/questionnaires/%7Bquestionnaire_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["questionnaire"],"summary":"Update a questionnaire.","description":"Update a questionnaire.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| name | str | str | name of the questionnaire |\n| questions | dict[str, dict] | obj | questions object hold sections and its list of questions. Each question will in their separate object. key of the question objects should be like `q1`, `q2`, `q3` and so on|\n| question_text | str | str | the question string |\n| type | str | str | type of the question; e.g. radio/checkbox/free text..... |\n| options | str | list[str] | a list of possible answers of the question and their serial|","operationId":"put_questionnaire_v1_questionnaires__questionnaire_id__put","parameters":[{"required":true,"schema":{"title":"Questionnaire Id","type":"string"},"name":"questionnaire_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/QuestionnaireUpdateSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"name\": \"Name of your questionnaire\",\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"question\": \"whats your age?\",\n        \"type\": \"text\",\n        \"options\": {\n          \"age\": \"\"\n        }\n      },\n      \"q2\": {\n        \"question\": \"whats your gender?\",\n        \"type\": \"radio\",\n        \"options\": {\n          \"a\": \"male\",\n          \"b\": \"female\"\n        }\n      }\n    },\n    \"skincare_goal\": {\n      \"q1\": {\n        \"question\": \"what is your skincare concern?\",\n        \"type\": \"checkbox\",\n        \"options\": {\n          \"a\": \"acne\",\n          \"b\": \"anti-aging\",\n          \"c\": \"Closed comedons(blackheads, whiteheads)\",\n          \"d\": \"Hyperpigmentation\",\n          \"e\": \"Dullness\",\n          \"f\": \"Dehydrated skin\"\n        }\n      }\n    }\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'Name of your questionnaire',\n  questions: {\n    skincare_history: {\n      q1: {question: 'whats your age?', type: 'text', options: {age: ''}},\n      q2: {\n        question: 'whats your gender?',\n        type: 'radio',\n        options: {a: 'male', b: 'female'}\n      }\n    },\n    skincare_goal: {\n      q1: {\n        question: 'what is your skincare concern?',\n        type: 'checkbox',\n        options: {\n          a: 'acne',\n          b: 'anti-aging',\n          c: 'Closed comedons(blackheads, whiteheads)',\n          d: 'Hyperpigmentation',\n          e: 'Dullness',\n          f: 'Dehydrated skin'\n        }\n      }\n    }\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    name: 'Name of your questionnaire',\n    questions: {\n      skincare_history: {\n        q1: {question: 'whats your age?', type: 'text', options: {age: ''}},\n        q2: {\n          question: 'whats your gender?',\n          type: 'radio',\n          options: {a: 'male', b: 'female'}\n        }\n      },\n      skincare_goal: {\n        q1: {\n          question: 'what is your skincare concern?',\n          type: 'checkbox',\n          options: {\n            a: 'acne',\n            b: 'anti-aging',\n            c: 'Closed comedons(blackheads, whiteheads)',\n            d: 'Hyperpigmentation',\n            e: 'Dullness',\n            f: 'Dehydrated skin'\n          }\n        }\n      }\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"name\": \"Name of your questionnaire\",\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"question\": \"whats your age?\",\n        \"type\": \"text\",\n        \"options\": {\n          \"age\": \"\"\n        }\n      },\n      \"q2\": {\n        \"question\": \"whats your gender?\",\n        \"type\": \"radio\",\n        \"options\": {\n          \"a\": \"male\",\n          \"b\": \"female\"\n        }\n      }\n    },\n    \"skincare_goal\": {\n      \"q1\": {\n        \"question\": \"what is your skincare concern?\",\n        \"type\": \"checkbox\",\n        \"options\": {\n          \"a\": \"acne\",\n          \"b\": \"anti-aging\",\n          \"c\": \"Closed comedons(blackheads, whiteheads)\",\n          \"d\": \"Hyperpigmentation\",\n          \"e\": \"Dullness\",\n          \"f\": \"Dehydrated skin\"\n        }\n      }\n    }\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"name\": @\"Name of your questionnaire\",\n                              @\"questions\": @{ @\"skincare_history\": @{ @\"q1\": @{ @\"question\": @\"whats your age?\", @\"type\": @\"text\", @\"options\": @{ @\"age\": @\"\" } }, @\"q2\": @{ @\"question\": @\"whats your gender?\", @\"type\": @\"radio\", @\"options\": @{ @\"a\": @\"male\", @\"b\": @\"female\" } } }, @\"skincare_goal\": @{ @\"q1\": @{ @\"question\": @\"what is your skincare concern?\", @\"type\": @\"checkbox\", @\"options\": @{ @\"a\": @\"acne\", @\"b\": @\"anti-aging\", @\"c\": @\"Closed comedons(blackheads, whiteheads)\", @\"d\": @\"Hyperpigmentation\", @\"e\": @\"Dullness\", @\"f\": @\"Dehydrated skin\" } } } } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/questionnaires/%7Bquestionnaire_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"\n\npayload = {\n    \"name\": \"Name of your questionnaire\",\n    \"questions\": {\n        \"skincare_history\": {\n            \"q1\": {\n                \"question\": \"whats your age?\",\n                \"type\": \"text\",\n                \"options\": {\"age\": \"\"}\n            },\n            \"q2\": {\n                \"question\": \"whats your gender?\",\n                \"type\": \"radio\",\n                \"options\": {\n                    \"a\": \"male\",\n                    \"b\": \"female\"\n                }\n            }\n        },\n        \"skincare_goal\": {\"q1\": {\n                \"question\": \"what is your skincare concern?\",\n                \"type\": \"checkbox\",\n                \"options\": {\n                    \"a\": \"acne\",\n                    \"b\": \"anti-aging\",\n                    \"c\": \"Closed comedons(blackheads, whiteheads)\",\n                    \"d\": \"Hyperpigmentation\",\n                    \"e\": \"Dullness\",\n                    \"f\": \"Dehydrated skin\"\n                }\n            }}\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"name\\\":\\\"Name of your questionnaire\\\",\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"question\\\":\\\"whats your age?\\\",\\\"type\\\":\\\"text\\\",\\\"options\\\":{\\\"age\\\":\\\"\\\"}},\\\"q2\\\":{\\\"question\\\":\\\"whats your gender?\\\",\\\"type\\\":\\\"radio\\\",\\\"options\\\":{\\\"a\\\":\\\"male\\\",\\\"b\\\":\\\"female\\\"}}},\\\"skincare_goal\\\":{\\\"q1\\\":{\\\"question\\\":\\\"what is your skincare concern?\\\",\\\"type\\\":\\\"checkbox\\\",\\\"options\\\":{\\\"a\\\":\\\"acne\\\",\\\"b\\\":\\\"anti-aging\\\",\\\"c\\\":\\\"Closed comedons(blackheads, whiteheads)\\\",\\\"d\\\":\\\"Hyperpigmentation\\\",\\\"e\\\":\\\"Dullness\\\",\\\"f\\\":\\\"Dehydrated skin\\\"}}}}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"Name of your questionnaire\",\"questions\":{\"skincare_history\":{\"q1\":{\"question\":\"whats your age?\",\"type\":\"text\",\"options\":{\"age\":\"\"}},\"q2\":{\"question\":\"whats your gender?\",\"type\":\"radio\",\"options\":{\"a\":\"male\",\"b\":\"female\"}}},\"skincare_goal\":{\"q1\":{\"question\":\"what is your skincare concern?\",\"type\":\"checkbox\",\"options\":{\"a\":\"acne\",\"b\":\"anti-aging\",\"c\":\"Closed comedons(blackheads, whiteheads)\",\"d\":\"Hyperpigmentation\",\"e\":\"Dullness\",\"f\":\"Dehydrated skin\"}}}}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"name\": \"Name of your questionnaire\",\n  \"questions\": [\n    \"skincare_history\": [\n      \"q1\": [\n        \"question\": \"whats your age?\",\n        \"type\": \"text\",\n        \"options\": [\"age\": \"\"]\n      ],\n      \"q2\": [\n        \"question\": \"whats your gender?\",\n        \"type\": \"radio\",\n        \"options\": [\n          \"a\": \"male\",\n          \"b\": \"female\"\n        ]\n      ]\n    ],\n    \"skincare_goal\": [\"q1\": [\n        \"question\": \"what is your skincare concern?\",\n        \"type\": \"checkbox\",\n        \"options\": [\n          \"a\": \"acne\",\n          \"b\": \"anti-aging\",\n          \"c\": \"Closed comedons(blackheads, whiteheads)\",\n          \"d\": \"Hyperpigmentation\",\n          \"e\": \"Dullness\",\n          \"f\": \"Dehydrated skin\"\n        ]\n      ]]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"delete":{"tags":["questionnaire"],"summary":"Delete a questionnaire.","description":"Delete a questionnaire.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |\n\nReturns the delete status.","operationId":"delete_a_questionnaires_v1_questionnaires__questionnaire_id__delete","parameters":[{"required":true,"schema":{"title":"Questionnaire Id","type":"string"},"name":"questionnaire_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Delete,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n  .delete(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/v1/questionnaires/%7Bquestionnaire_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/questionnaires/{questionnaire_id}/mapper":{"get":{"tags":["questionnaire"],"summary":"Get the mapper of a questionnaire.","description":"Get details of a questionnaire mapper.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |\n\nReturns the mapper of a questionnaire given the questionnaire id.","operationId":"get_a_mapper_v1_questionnaires__questionnaire_id__mapper_get","parameters":[{"required":true,"schema":{"title":"Questionnaire Id","type":"string"},"name":"questionnaire_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["questionnaire"],"summary":"Update a mapper.","description":"Update a mapper.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |\n| prompt_sections | str | Dict[str, str] | List of the prompt sections. Each section will have its own key, these key will used in mapper |\n| prompt_order | str | List[str] | A list of prompt sections key in the order they should be in the resultant prompt |\n| questions | str | Dict[str, Dict] | Contains the question sections and their questions |\n| mapper | str | Dict[str, Dict] | maps different answers to decisions. |\n| model | str | Selected enum value | Represents the the model to be used for recommendation generation. |\n| max_token_size | int | int | expected max token size for the reply |\n| intro | str | str | Share a little context about the questionnaire|\n| system | str | str | You are an expert on ...|\n\nReturns mapper update status.","operationId":"put_mapper_v1_questionnaires__questionnaire_id__mapper_put","parameters":[{"required":true,"schema":{"title":"Questionnaire Id","type":"string"},"name":"questionnaire_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MapperUpdateSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"mapper\": {\n          \"any\": {\n            \"age\": \"\"\n          }\n        }\n      },\n      \"q2\": {\n        \"mapper\": {\n          \"a\": {\n            \"gender\": \"male\"\n          },\n          \"b\": {\n            \"gender\": \"female\"\n          }\n        }\n      },\n      \"q7\": {\n        \"mapper\": {\n          \"~\": {\n            \"a|b|c\": {\n              \"exclude\": [\n                \"Retinol\"\n              ]\n            }\n          }\n        }\n      }\n    }\n  },\n  \"exclusive\": {\n    \"prompt_key-1\": \"prompt_key-2\"\n  },\n  \"prompt_sections\": {\n    \"skincare_history\": \"I am {age} years old {gender}\",\n    \"skin_type\": \"My skin type is {skin_type}\",\n    \"include\": \"include these category {include}\"\n  },\n  \"prompt_order\": [\n    \"skincare_history\",\n    \"include\",\n    \"skin_type\"\n  ],\n  \"gpt_settings\": {\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"search_max_token\": 2500,\n    \"intro\": \"Share a little context about the question\",\n    \"system\": \"You are an expert on ...\",\n    \"temperature\": 0,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"stop\": [\n      \"AI:\",\n      \"Human:\"\n    ]\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  questions: {\n    skincare_history: {\n      q1: {mapper: {any: {age: ''}}},\n      q2: {mapper: {a: {gender: 'male'}, b: {gender: 'female'}}},\n      q7: {mapper: {'~': {'a|b|c': {exclude: ['Retinol']}}}}\n    }\n  },\n  exclusive: {'prompt_key-1': 'prompt_key-2'},\n  prompt_sections: {\n    skincare_history: 'I am {age} years old {gender}',\n    skin_type: 'My skin type is {skin_type}',\n    include: 'include these category {include}'\n  },\n  prompt_order: ['skincare_history', 'include', 'skin_type'],\n  gpt_settings: {\n    model: 'gpt-3.5-turbo-0613',\n    search_max_token: 2500,\n    intro: 'Share a little context about the question',\n    system: 'You are an expert on ...',\n    temperature: 0,\n    top_p: 1,\n    frequency_penalty: 0,\n    presence_penalty: 0,\n    stop: ['AI:', 'Human:']\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    questions: {\n      skincare_history: {\n        q1: {mapper: {any: {age: ''}}},\n        q2: {mapper: {a: {gender: 'male'}, b: {gender: 'female'}}},\n        q7: {mapper: {'~': {'a|b|c': {exclude: ['Retinol']}}}}\n      }\n    },\n    exclusive: {'prompt_key-1': 'prompt_key-2'},\n    prompt_sections: {\n      skincare_history: 'I am {age} years old {gender}',\n      skin_type: 'My skin type is {skin_type}',\n      include: 'include these category {include}'\n    },\n    prompt_order: ['skincare_history', 'include', 'skin_type'],\n    gpt_settings: {\n      model: 'gpt-3.5-turbo-0613',\n      search_max_token: 2500,\n      intro: 'Share a little context about the question',\n      system: 'You are an expert on ...',\n      temperature: 0,\n      top_p: 1,\n      frequency_penalty: 0,\n      presence_penalty: 0,\n      stop: ['AI:', 'Human:']\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"mapper\": {\n          \"any\": {\n            \"age\": \"\"\n          }\n        }\n      },\n      \"q2\": {\n        \"mapper\": {\n          \"a\": {\n            \"gender\": \"male\"\n          },\n          \"b\": {\n            \"gender\": \"female\"\n          }\n        }\n      },\n      \"q7\": {\n        \"mapper\": {\n          \"~\": {\n            \"a|b|c\": {\n              \"exclude\": [\n                \"Retinol\"\n              ]\n            }\n          }\n        }\n      }\n    }\n  },\n  \"exclusive\": {\n    \"prompt_key-1\": \"prompt_key-2\"\n  },\n  \"prompt_sections\": {\n    \"skincare_history\": \"I am {age} years old {gender}\",\n    \"skin_type\": \"My skin type is {skin_type}\",\n    \"include\": \"include these category {include}\"\n  },\n  \"prompt_order\": [\n    \"skincare_history\",\n    \"include\",\n    \"skin_type\"\n  ],\n  \"gpt_settings\": {\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"search_max_token\": 2500,\n    \"intro\": \"Share a little context about the question\",\n    \"system\": \"You are an expert on ...\",\n    \"temperature\": 0,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"stop\": [\n      \"AI:\",\n      \"Human:\"\n    ]\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"questions\": @{ @\"skincare_history\": @{ @\"q1\": @{ @\"mapper\": @{ @\"any\": @{ @\"age\": @\"\" } } }, @\"q2\": @{ @\"mapper\": @{ @\"a\": @{ @\"gender\": @\"male\" }, @\"b\": @{ @\"gender\": @\"female\" } } }, @\"q7\": @{ @\"mapper\": @{ @\"~\": @{ @\"a|b|c\": @{ @\"exclude\": @[ @\"Retinol\" ] } } } } } },\n                              @\"exclusive\": @{ @\"prompt_key-1\": @\"prompt_key-2\" },\n                              @\"prompt_sections\": @{ @\"skincare_history\": @\"I am {age} years old {gender}\", @\"skin_type\": @\"My skin type is {skin_type}\", @\"include\": @\"include these category {include}\" },\n                              @\"prompt_order\": @[ @\"skincare_history\", @\"include\", @\"skin_type\" ],\n                              @\"gpt_settings\": @{ @\"model\": @\"gpt-3.5-turbo-0613\", @\"search_max_token\": @2500, @\"intro\": @\"Share a little context about the question\", @\"system\": @\"You are an expert on ...\", @\"temperature\": @0, @\"top_p\": @1, @\"frequency_penalty\": @0, @\"presence_penalty\": @0, @\"stop\": @[ @\"AI:\", @\"Human:\" ] } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\npayload = {\n    \"questions\": {\"skincare_history\": {\n            \"q1\": {\"mapper\": {\"any\": {\"age\": \"\"}}},\n            \"q2\": {\"mapper\": {\n                    \"a\": {\"gender\": \"male\"},\n                    \"b\": {\"gender\": \"female\"}\n                }},\n            \"q7\": {\"mapper\": {\"~\": {\"a|b|c\": {\"exclude\": [\"Retinol\"]}}}}\n        }},\n    \"exclusive\": {\"prompt_key-1\": \"prompt_key-2\"},\n    \"prompt_sections\": {\n        \"skincare_history\": \"I am {age} years old {gender}\",\n        \"skin_type\": \"My skin type is {skin_type}\",\n        \"include\": \"include these category {include}\"\n    },\n    \"prompt_order\": [\"skincare_history\", \"include\", \"skin_type\"],\n    \"gpt_settings\": {\n        \"model\": \"gpt-3.5-turbo-0613\",\n        \"search_max_token\": 2500,\n        \"intro\": \"Share a little context about the question\",\n        \"system\": \"You are an expert on ...\",\n        \"temperature\": 0,\n        \"top_p\": 1,\n        \"frequency_penalty\": 0,\n        \"presence_penalty\": 0,\n        \"stop\": [\"AI:\", \"Human:\"]\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"questions\": [\"skincare_history\": [\n      \"q1\": [\"mapper\": [\"any\": [\"age\": \"\"]]],\n      \"q2\": [\"mapper\": [\n          \"a\": [\"gender\": \"male\"],\n          \"b\": [\"gender\": \"female\"]\n        ]],\n      \"q7\": [\"mapper\": [\"~\": [\"a|b|c\": [\"exclude\": [\"Retinol\"]]]]]\n    ]],\n  \"exclusive\": [\"prompt_key-1\": \"prompt_key-2\"],\n  \"prompt_sections\": [\n    \"skincare_history\": \"I am {age} years old {gender}\",\n    \"skin_type\": \"My skin type is {skin_type}\",\n    \"include\": \"include these category {include}\"\n  ],\n  \"prompt_order\": [\"skincare_history\", \"include\", \"skin_type\"],\n  \"gpt_settings\": [\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"search_max_token\": 2500,\n    \"intro\": \"Share a little context about the question\",\n    \"system\": \"You are an expert on ...\",\n    \"temperature\": 0,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"stop\": [\"AI:\", \"Human:\"]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"post":{"tags":["questionnaire"],"summary":"Add mapper for a questionnaire.","description":"Add a mapper for a questionnaire.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |\n| prompt_sections | str | Dict[str, str] | List of the prompt sections. Each section will have its own key, these key will used in mapper |\n| prompt_order | str | List[str] | A list of prompt sections key in the order they should be in the resultant prompt |\n| questions | str | Dict[str, Dict] | Contains the question sections and their questions |\n| mapper | str | Dict[str, Dict] | maps different answers to decisions. |\n| model | str | Selected enum value | Represents the the model to be used for recommendation generation. |\n| max_token_size | int | int | expected max token size for the reply |\n| intro | str | str | Share a little context about the questionnaire|\n| system | str | str | You are an expert on ...|\n\nReturns mapper add status.","operationId":"add_a_questionnaire_mapper_v1_questionnaires__questionnaire_id__mapper_post","parameters":[{"required":true,"schema":{"title":"Questionnaire Id","type":"string"},"name":"questionnaire_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MapperInsertSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\n\tpayload := strings.NewReader(\"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"mapper\": {\n          \"any\": {\n            \"age\": \"\"\n          }\n        }\n      },\n      \"q2\": {\n        \"mapper\": {\n          \"a\": {\n            \"gender\": \"male\"\n          },\n          \"b\": {\n            \"gender\": \"female\"\n          }\n        }\n      },\n      \"q7\": {\n        \"mapper\": {\n          \"~\": {\n            \"a|b|c\": {\n              \"exclude\": [\n                \"Retinol\"\n              ]\n            }\n          }\n        }\n      }\n    }\n  },\n  \"exclusive\": {\n    \"prompt_key-1\": \"prompt_key-2\"\n  },\n  \"prompt_sections\": {\n    \"skincare_history\": \"I am {age} years old {gender}\",\n    \"skin_type\": \"My skin type is {skin_type}\",\n    \"include\": \"include these category {include}\"\n  },\n  \"prompt_order\": [\n    \"skincare_history\",\n    \"include\",\n    \"skin_type\"\n  ],\n  \"gpt_settings\": {\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"search_max_token\": 2500,\n    \"intro\": \"Share a little context about the question\",\n    \"system\": \"You are an expert on ...\",\n    \"temperature\": 0,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"stop\": [\n      \"AI:\",\n      \"Human:\"\n    ]\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  questions: {\n    skincare_history: {\n      q1: {mapper: {any: {age: ''}}},\n      q2: {mapper: {a: {gender: 'male'}, b: {gender: 'female'}}},\n      q7: {mapper: {'~': {'a|b|c': {exclude: ['Retinol']}}}}\n    }\n  },\n  exclusive: {'prompt_key-1': 'prompt_key-2'},\n  prompt_sections: {\n    skincare_history: 'I am {age} years old {gender}',\n    skin_type: 'My skin type is {skin_type}',\n    include: 'include these category {include}'\n  },\n  prompt_order: ['skincare_history', 'include', 'skin_type'],\n  gpt_settings: {\n    model: 'gpt-3.5-turbo-0613',\n    search_max_token: 2500,\n    intro: 'Share a little context about the question',\n    system: 'You are an expert on ...',\n    temperature: 0,\n    top_p: 1,\n    frequency_penalty: 0,\n    presence_penalty: 0,\n    stop: ['AI:', 'Human:']\n  }\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    questions: {\n      skincare_history: {\n        q1: {mapper: {any: {age: ''}}},\n        q2: {mapper: {a: {gender: 'male'}, b: {gender: 'female'}}},\n        q7: {mapper: {'~': {'a|b|c': {exclude: ['Retinol']}}}}\n      }\n    },\n    exclusive: {'prompt_key-1': 'prompt_key-2'},\n    prompt_sections: {\n      skincare_history: 'I am {age} years old {gender}',\n      skin_type: 'My skin type is {skin_type}',\n      include: 'include these category {include}'\n    },\n    prompt_order: ['skincare_history', 'include', 'skin_type'],\n    gpt_settings: {\n      model: 'gpt-3.5-turbo-0613',\n      search_max_token: 2500,\n      intro: 'Share a little context about the question',\n      system: 'You are an expert on ...',\n      temperature: 0,\n      top_p: 1,\n      frequency_penalty: 0,\n      presence_penalty: 0,\n      stop: ['AI:', 'Human:']\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"questions\": {\n    \"skincare_history\": {\n      \"q1\": {\n        \"mapper\": {\n          \"any\": {\n            \"age\": \"\"\n          }\n        }\n      },\n      \"q2\": {\n        \"mapper\": {\n          \"a\": {\n            \"gender\": \"male\"\n          },\n          \"b\": {\n            \"gender\": \"female\"\n          }\n        }\n      },\n      \"q7\": {\n        \"mapper\": {\n          \"~\": {\n            \"a|b|c\": {\n              \"exclude\": [\n                \"Retinol\"\n              ]\n            }\n          }\n        }\n      }\n    }\n  },\n  \"exclusive\": {\n    \"prompt_key-1\": \"prompt_key-2\"\n  },\n  \"prompt_sections\": {\n    \"skincare_history\": \"I am {age} years old {gender}\",\n    \"skin_type\": \"My skin type is {skin_type}\",\n    \"include\": \"include these category {include}\"\n  },\n  \"prompt_order\": [\n    \"skincare_history\",\n    \"include\",\n    \"skin_type\"\n  ],\n  \"gpt_settings\": {\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"search_max_token\": 2500,\n    \"intro\": \"Share a little context about the question\",\n    \"system\": \"You are an expert on ...\",\n    \"temperature\": 0,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"stop\": [\n      \"AI:\",\n      \"Human:\"\n    ]\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"questions\": @{ @\"skincare_history\": @{ @\"q1\": @{ @\"mapper\": @{ @\"any\": @{ @\"age\": @\"\" } } }, @\"q2\": @{ @\"mapper\": @{ @\"a\": @{ @\"gender\": @\"male\" }, @\"b\": @{ @\"gender\": @\"female\" } } }, @\"q7\": @{ @\"mapper\": @{ @\"~\": @{ @\"a|b|c\": @{ @\"exclude\": @[ @\"Retinol\" ] } } } } } },\n                              @\"exclusive\": @{ @\"prompt_key-1\": @\"prompt_key-2\" },\n                              @\"prompt_sections\": @{ @\"skincare_history\": @\"I am {age} years old {gender}\", @\"skin_type\": @\"My skin type is {skin_type}\", @\"include\": @\"include these category {include}\" },\n                              @\"prompt_order\": @[ @\"skincare_history\", @\"include\", @\"skin_type\" ],\n                              @\"gpt_settings\": @{ @\"model\": @\"gpt-3.5-turbo-0613\", @\"search_max_token\": @2500, @\"intro\": @\"Share a little context about the question\", @\"system\": @\"You are an expert on ...\", @\"temperature\": @0, @\"top_p\": @1, @\"frequency_penalty\": @0, @\"presence_penalty\": @0, @\"stop\": @[ @\"AI:\", @\"Human:\" ] } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\npayload = {\n    \"questions\": {\"skincare_history\": {\n            \"q1\": {\"mapper\": {\"any\": {\"age\": \"\"}}},\n            \"q2\": {\"mapper\": {\n                    \"a\": {\"gender\": \"male\"},\n                    \"b\": {\"gender\": \"female\"}\n                }},\n            \"q7\": {\"mapper\": {\"~\": {\"a|b|c\": {\"exclude\": [\"Retinol\"]}}}}\n        }},\n    \"exclusive\": {\"prompt_key-1\": \"prompt_key-2\"},\n    \"prompt_sections\": {\n        \"skincare_history\": \"I am {age} years old {gender}\",\n        \"skin_type\": \"My skin type is {skin_type}\",\n        \"include\": \"include these category {include}\"\n    },\n    \"prompt_order\": [\"skincare_history\", \"include\", \"skin_type\"],\n    \"gpt_settings\": {\n        \"model\": \"gpt-3.5-turbo-0613\",\n        \"search_max_token\": 2500,\n        \"intro\": \"Share a little context about the question\",\n        \"system\": \"You are an expert on ...\",\n        \"temperature\": 0,\n        \"top_p\": 1,\n        \"frequency_penalty\": 0,\n        \"presence_penalty\": 0,\n        \"stop\": [\"AI:\", \"Human:\"]\n    }\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"questions\\\":{\\\"skincare_history\\\":{\\\"q1\\\":{\\\"mapper\\\":{\\\"any\\\":{\\\"age\\\":\\\"\\\"}}},\\\"q2\\\":{\\\"mapper\\\":{\\\"a\\\":{\\\"gender\\\":\\\"male\\\"},\\\"b\\\":{\\\"gender\\\":\\\"female\\\"}}},\\\"q7\\\":{\\\"mapper\\\":{\\\"~\\\":{\\\"a|b|c\\\":{\\\"exclude\\\":[\\\"Retinol\\\"]}}}}}},\\\"exclusive\\\":{\\\"prompt_key-1\\\":\\\"prompt_key-2\\\"},\\\"prompt_sections\\\":{\\\"skincare_history\\\":\\\"I am {age} years old {gender}\\\",\\\"skin_type\\\":\\\"My skin type is {skin_type}\\\",\\\"include\\\":\\\"include these category {include}\\\"},\\\"prompt_order\\\":[\\\"skincare_history\\\",\\\"include\\\",\\\"skin_type\\\"],\\\"gpt_settings\\\":{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"search_max_token\\\":2500,\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"]}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"questions\":{\"skincare_history\":{\"q1\":{\"mapper\":{\"any\":{\"age\":\"\"}}},\"q2\":{\"mapper\":{\"a\":{\"gender\":\"male\"},\"b\":{\"gender\":\"female\"}}},\"q7\":{\"mapper\":{\"~\":{\"a|b|c\":{\"exclude\":[\"Retinol\"]}}}}}},\"exclusive\":{\"prompt_key-1\":\"prompt_key-2\"},\"prompt_sections\":{\"skincare_history\":\"I am {age} years old {gender}\",\"skin_type\":\"My skin type is {skin_type}\",\"include\":\"include these category {include}\"},\"prompt_order\":[\"skincare_history\",\"include\",\"skin_type\"],\"gpt_settings\":{\"model\":\"gpt-3.5-turbo-0613\",\"search_max_token\":2500,\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"]}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"questions\": [\"skincare_history\": [\n      \"q1\": [\"mapper\": [\"any\": [\"age\": \"\"]]],\n      \"q2\": [\"mapper\": [\n          \"a\": [\"gender\": \"male\"],\n          \"b\": [\"gender\": \"female\"]\n        ]],\n      \"q7\": [\"mapper\": [\"~\": [\"a|b|c\": [\"exclude\": [\"Retinol\"]]]]]\n    ]],\n  \"exclusive\": [\"prompt_key-1\": \"prompt_key-2\"],\n  \"prompt_sections\": [\n    \"skincare_history\": \"I am {age} years old {gender}\",\n    \"skin_type\": \"My skin type is {skin_type}\",\n    \"include\": \"include these category {include}\"\n  ],\n  \"prompt_order\": [\"skincare_history\", \"include\", \"skin_type\"],\n  \"gpt_settings\": [\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"search_max_token\": 2500,\n    \"intro\": \"Share a little context about the question\",\n    \"system\": \"You are an expert on ...\",\n    \"temperature\": 0,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"stop\": [\"AI:\", \"Human:\"]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"delete":{"tags":["questionnaire"],"summary":"Delete a mapper.","description":"Delete a mapper.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| questionnaire_id | str | str | The ID of the questionnaire to retrieve. (Required) |\n\nReturns the delete status.","operationId":"delete_mapper_v1_questionnaires__questionnaire_id__mapper_delete","parameters":[{"required":true,"schema":{"title":"Questionnaire Id","type":"string"},"name":"questionnaire_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Delete,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .delete(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/mapper\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/questionnaires/{questionnaire_id}/logs":{"get":{"tags":["questionnaire"],"summary":"Get logs of responses against a questionnaire.","description":"Get logs of responses against a questionnaire.\n\n### Parameters\n----------\n\nReturns all prompts, response and request assoicated with a questionnaire.","operationId":"get_all_questionnaire_recommendation_log_v1_questionnaires__questionnaire_id__logs_get","parameters":[{"required":true,"schema":{"title":"Questionnaire Id","type":"string"},"name":"questionnaire_id","in":"path"},{"required":false,"schema":{"title":"Request Id","type":"string"},"name":"request_id","in":"query"},{"required":false,"schema":{"title":"Start","type":"integer","default":0},"name":"start","in":"query"},{"required":false,"schema":{"title":"Size","type":"integer","default":10},"name":"size","in":"query"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs',\n  qs: {\n    request_id: 'SOME_STRING_VALUE',\n    start: 'SOME_INTEGER_VALUE',\n    size: 'SOME_INTEGER_VALUE'\n  },\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs\");\n\nreq.query({\n  \"request_id\": \"SOME_STRING_VALUE\",\n  \"start\": \"SOME_INTEGER_VALUE\",\n  \"size\": \"SOME_INTEGER_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'request_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'request_id' => 'SOME_STRING_VALUE',\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs\"\n\nquerystring = {\"request_id\":\"SOME_STRING_VALUE\",\"start\":\"SOME_INTEGER_VALUE\",\"size\":\"SOME_INTEGER_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/questionnaires/%7Bquestionnaire_id%7D/logs?request_id=SOME_STRING_VALUE&start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/tasks/{task_id}":{"get":{"tags":["task"],"summary":"Get a task by its id","description":"Get the latest status of a background task by passing task id as a query parameter.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| task_id | str | str | Represents the id of a background task. |","operationId":"get_task_v1_tasks__task_id__get","parameters":[{"required":true,"schema":{"title":"Task Id","type":"string"},"name":"task_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/tasks/%7Btask_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/tasks/%7Btask_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/tasks/%7Btask_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/tasks":{"get":{"tags":["task"],"summary":"get all task by type and status","description":"Get a list of all tasks by a specific type. By default this endpoint will return\nlatest 100 tasks with their details.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| task_type | Enum | Selected enum value | Available values are `item_train`, `image_train`, `rank_train`, `insight_process`. |\n| task_status | Enum | Selected enum value | Available values are `claimable`, `pending`, `success`, `cancelled`, `failed`. |","operationId":"get_tasks_v1_tasks_get","parameters":[{"required":true,"schema":{"title":"TaskType","enum":["item_train","image_train","rank_train","insight_process"],"type":"string","description":"An enumeration."},"name":"task_type","in":"query"},{"required":true,"schema":{"title":"Status","enum":["claimable","pending","success","cancelled","failed"],"type":"string","description":"An enumeration."},"name":"task_status","in":"query"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/tasks',\n  qs: {task_type: 'SOME_STRING_VALUE', task_status: 'SOME_STRING_VALUE'},\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/tasks\");\n\nreq.query({\n  \"task_type\": \"SOME_STRING_VALUE\",\n  \"task_status\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/tasks');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'task_type' => 'SOME_STRING_VALUE',\n  'task_status' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/tasks');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'task_type' => 'SOME_STRING_VALUE',\n  'task_status' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/tasks\"\n\nquerystring = {\"task_type\":\"SOME_STRING_VALUE\",\"task_status\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/tasks?task_type=SOME_STRING_VALUE&task_status=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/reach":{"post":{"tags":["reach"],"summary":"Shows user reach of recommender API","description":"This endpoint will show the stats of user reach for browsing, purchasing,\nand rating items. User need to choose the unit for getting respected response.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| reach_type | Enum | Selected enum value | Represents the unit for counting the user reach for browsing, purchasing and rating. Available values are `total` and `daily.` |\n| start_date | Optional[str] | str | Initial date of date range based on which it will show major KPIs of our recommender system. |\n| end_date |Optional[str] | str | End date of date range based on which it will show major KPIs of our recommender system. |","operationId":"post_v1_reach_post","parameters":[{"required":true,"schema":{"title":"ReachType","enum":["total","daily"],"type":"string","description":"An enumeration."},"name":"reach_type","in":"query"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ReachSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/reach?reach_type=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({start_date: '2021-08-05', end_date: '2021-08-06'}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/reach',\n  qs: {reach_type: 'SOME_STRING_VALUE'},\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {start_date: '2021-08-05', end_date: '2021-08-06'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/reach\");\n\nreq.query({\n  \"reach_type\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"start_date\": @\"2021-08-05\",\n                              @\"end_date\": @\"2021-08-06\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/reach');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setQueryData([\n  'reach_type' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/reach');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setQuery(new http\\QueryString([\n  'reach_type' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/reach?reach_type=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/reach\"\n\nquerystring = {\"reach_type\":\"SOME_STRING_VALUE\"}\n\npayload = {\n    \"start_date\": \"2021-08-05\",\n    \"end_date\": \"2021-08-06\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers, params=querystring)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url 'https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/reach?reach_type=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/stats":{"post":{"tags":["stats"],"summary":"Save document in the stats index","description":"This endpoint will create the a document stats index.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| start_date | str | str | Initial date of date range based on which you want to save stats. |\n| end_date |str | str | End date of date range based on which you want to save stats. |","operationId":"post_stats_v1_stats_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SaveStatSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/stats\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/stats\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/stats\"\n\n\tpayload := strings.NewReader(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/stats\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/stats\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/stats\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/stats\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/stats\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({start_date: '2021-08-05', end_date: '2021-08-06'}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/stats',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {start_date: '2021-08-05', end_date: '2021-08-06'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/stats\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"start_date\": @\"2021-08-05\",\n                              @\"end_date\": @\"2021-08-06\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/stats\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/stats\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/stats');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/stats');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/stats\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/stats\"\n\npayload = {\n    \"start_date\": \"2021-08-05\",\n    \"end_date\": \"2021-08-06\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/stats\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"start_date\\\":\\\"2021-08-05\\\",\\\"end_date\\\":\\\"2021-08-06\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/stats \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"start_date\":\"2021-08-05\",\"end_date\":\"2021-08-06\"}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"start_date\": \"2021-08-05\",\n  \"end_date\": \"2021-08-06\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/stats\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/stats/{date}":{"get":{"tags":["stats"],"summary":"Get document from the stats index","operationId":"get_stats_v1_stats__date__get","parameters":[{"required":true,"schema":{"title":"Date","type":"string"},"name":"date","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/stats/%7Bdate%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/stats/%7Bdate%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["stats"],"summary":"Update document in the stats index","description":"This endpoint will update the existing document.","operationId":"put_stats_v1_stats__date__put","parameters":[{"required":true,"schema":{"title":"Date","type":"string"},"name":"date","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"\n\n\treq, _ := http.NewRequest(\"PUT\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n  .put(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/stats/%7Bdate%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');\n$request->setRequestMethod('PUT');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/stats/%7Bdate%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"delete":{"tags":["stats"],"summary":"Delete document in the stats index","operationId":"delete_stats_v1_stats__date__delete","parameters":[{"required":true,"schema":{"title":"Date","type":"string"},"name":"date","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Delete,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n  .delete(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/stats/%7Bdate%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/v1/stats/%7Bdate%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/stats/%7Bdate%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/gpt/dataset/train":{"post":{"tags":["MyGPT Dataset"],"summary":"Train dataset to produce pre-processed data and embeddings and save it in vector db","description":"GPT train for a specific dataset.","operationId":"gpt_dataset_train_v1_gpt_dataset_train_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_gpt_dataset_train_v1_gpt_dataset_train_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/x-www-form-urlencoded\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/x-www-form-urlencoded\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\")\n  .post(null)\n  .addHeader(\"content-type\", \"application/x-www-form-urlencoded\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\")\n  .header(\"content-type\", \"application/x-www-form-urlencoded\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\");\nxhr.setRequestHeader(\"content-type\", \"application/x-www-form-urlencoded\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/dataset/train\",\n  \"headers\": {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/dataset/train',\n  headers: {\n    'content-type': 'application/x-www-form-urlencoded',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\");\n\nreq.headers({\n  \"content-type\": \"application/x-www-form-urlencoded\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/x-www-form-urlencoded\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/x-www-form-urlencoded\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/dataset/train');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/x-www-form-urlencoded',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/dataset/train');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'application/x-www-form-urlencoded',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"application/x-www-form-urlencoded\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/gpt/dataset/train\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\"\n\nheaders = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/x-www-form-urlencoded'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/dataset/train \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/x-www-form-urlencoded' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/x-www-form-urlencoded\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/dataset/train\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/gpt/save":{"post":{"tags":["MyGPT"],"summary":"Upload a CSV file","description":"Saves GPT related files","operationId":"post_gpt_csv_v1_gpt_save_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_post_gpt_csv_v1_gpt_save_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/save\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/save\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/save\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/save\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/gpt/save\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/save\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/save\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/save\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/save',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/save\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/save\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/save\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/save');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/save');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/gpt/save\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/save\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/save\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/save \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/save\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/gpt/ask":{"post":{"tags":["MyGPT"],"summary":"Ask a question and receive an answer","description":"Response from GPTFlow","operationId":"post_gpt_response_v1_gpt_ask_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GPTRequestSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/ask\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/ask\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/ask\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/ask\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/gpt/ask\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/ask\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"query\": \"What is life?\",\n  \"intro\": \"Share a little context about the question\",\n  \"system\": \"You are an expert on ...\",\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"storage\": \"memory\",\n  \"search_max_token\": 2500,\n  \"temperature\": 0,\n  \"top_p\": 1,\n  \"frequency_penalty\": 0,\n  \"presence_penalty\": 0,\n  \"stop\": [\n    \"AI:\",\n    \"Human:\"\n  ],\n  \"preferred_content\": {\n    \"dataset_id\": \"1234\"\n  }\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/ask\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/ask\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  query: 'What is life?',\n  intro: 'Share a little context about the question',\n  system: 'You are an expert on ...',\n  model: 'gpt-3.5-turbo-0613',\n  storage: 'memory',\n  search_max_token: 2500,\n  temperature: 0,\n  top_p: 1,\n  frequency_penalty: 0,\n  presence_penalty: 0,\n  stop: ['AI:', 'Human:'],\n  preferred_content: {dataset_id: '1234'}\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/ask',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    query: 'What is life?',\n    intro: 'Share a little context about the question',\n    system: 'You are an expert on ...',\n    model: 'gpt-3.5-turbo-0613',\n    storage: 'memory',\n    search_max_token: 2500,\n    temperature: 0,\n    top_p: 1,\n    frequency_penalty: 0,\n    presence_penalty: 0,\n    stop: ['AI:', 'Human:'],\n    preferred_content: {dataset_id: '1234'}\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/ask\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"query\": \"What is life?\",\n  \"intro\": \"Share a little context about the question\",\n  \"system\": \"You are an expert on ...\",\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"storage\": \"memory\",\n  \"search_max_token\": 2500,\n  \"temperature\": 0,\n  \"top_p\": 1,\n  \"frequency_penalty\": 0,\n  \"presence_penalty\": 0,\n  \"stop\": [\n    \"AI:\",\n    \"Human:\"\n  ],\n  \"preferred_content\": {\n    \"dataset_id\": \"1234\"\n  }\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"query\": @\"What is life?\",\n                              @\"intro\": @\"Share a little context about the question\",\n                              @\"system\": @\"You are an expert on ...\",\n                              @\"model\": @\"gpt-3.5-turbo-0613\",\n                              @\"storage\": @\"memory\",\n                              @\"search_max_token\": @2500,\n                              @\"temperature\": @0,\n                              @\"top_p\": @1,\n                              @\"frequency_penalty\": @0,\n                              @\"presence_penalty\": @0,\n                              @\"stop\": @[ @\"AI:\", @\"Human:\" ],\n                              @\"preferred_content\": @{ @\"dataset_id\": @\"1234\" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/ask\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/ask\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/ask');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"query\":\"What is life?\",\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"model\":\"gpt-3.5-turbo-0613\",\"storage\":\"memory\",\"search_max_token\":2500,\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"],\"preferred_content\":{\"dataset_id\":\"1234\"}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"query\":\"What is life?\",\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"model\":\"gpt-3.5-turbo-0613\",\"storage\":\"memory\",\"search_max_token\":2500,\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"],\"preferred_content\":{\"dataset_id\":\"1234\"}}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/ask');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/gpt/ask\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/ask\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"query\": \"What is life?\",\n    \"intro\": \"Share a little context about the question\",\n    \"system\": \"You are an expert on ...\",\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"storage\": \"memory\",\n    \"search_max_token\": 2500,\n    \"temperature\": 0,\n    \"top_p\": 1,\n    \"frequency_penalty\": 0,\n    \"presence_penalty\": 0,\n    \"stop\": [\"AI:\", \"Human:\"],\n    \"preferred_content\": {\"dataset_id\": \"1234\"}\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/ask\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"query\\\":\\\"What is life?\\\",\\\"intro\\\":\\\"Share a little context about the question\\\",\\\"system\\\":\\\"You are an expert on ...\\\",\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"storage\\\":\\\"memory\\\",\\\"search_max_token\\\":2500,\\\"temperature\\\":0,\\\"top_p\\\":1,\\\"frequency_penalty\\\":0,\\\"presence_penalty\\\":0,\\\"stop\\\":[\\\"AI:\\\",\\\"Human:\\\"],\\\"preferred_content\\\":{\\\"dataset_id\\\":\\\"1234\\\"}}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/ask \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"query\":\"What is life?\",\"intro\":\"Share a little context about the question\",\"system\":\"You are an expert on ...\",\"model\":\"gpt-3.5-turbo-0613\",\"storage\":\"memory\",\"search_max_token\":2500,\"temperature\":0,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0,\"stop\":[\"AI:\",\"Human:\"],\"preferred_content\":{\"dataset_id\":\"1234\"}}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"query\": \"What is life?\",\n  \"intro\": \"Share a little context about the question\",\n  \"system\": \"You are an expert on ...\",\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"storage\": \"memory\",\n  \"search_max_token\": 2500,\n  \"temperature\": 0,\n  \"top_p\": 1,\n  \"frequency_penalty\": 0,\n  \"presence_penalty\": 0,\n  \"stop\": [\"AI:\", \"Human:\"],\n  \"preferred_content\": [\"dataset_id\": \"1234\"]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/ask\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/gpt/ask/vision":{"post":{"tags":["MyGPT"],"summary":"Ask GPT with Image","description":"This endpoint generates search results based on image similarity and your query.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| image | str($bin) | file | Represents the image file used to search/ask. Supports webp, jpeg, jpg, and png formats. |\n| query | str | str | Query to ask to gpt |","operationId":"image_gpt_ask_v1_gpt_ask_vision_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_image_gpt_ask_v1_gpt_ask_vision_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/ask/vision\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/ask/vision',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/ask/vision');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/ask/vision');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/gpt/ask/vision\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/ask/vision \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/ask/vision\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/items/search":{"post":{"tags":["Search"],"summary":"Advance search with gpt models","description":"Search using GPT models","operationId":"post_gpt_search_v1_items_search_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GPTSearchSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/items/search\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/items/search\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/items/search\"\n\n\tpayload := strings.NewReader(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/items/search\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/items/search\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/items/search\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"message\": \"What is life?\",\n  \"type\": \"individual\",\n  \"search_size\": 1000,\n  \"start\": 0,\n  \"size\": 10,\n  \"price_lower\": 1,\n  \"price_upper\": 10000,\n  \"categories\": [\n    \"category1\",\n    \"category2\"\n  ],\n  \"flags\": {\n    \"flag1\": true,\n    \"flag2\": false\n  },\n  \"sort\": {\n    \"column_name\": \"asc / desc\"\n  },\n  \"storage\": \"memory\",\n  \"dynamic_filtering\": [\n    \"column1\",\n    \"column2\"\n  ],\n  \"is_keyword_enabled\": true,\n  \"details\": false\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/search\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/items/search\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n  message: 'What is life?',\n  type: 'individual',\n  search_size: 1000,\n  start: 0,\n  size: 10,\n  price_lower: 1,\n  price_upper: 10000,\n  categories: ['category1', 'category2'],\n  flags: {flag1: true, flag2: false},\n  sort: {column_name: 'asc / desc'},\n  storage: 'memory',\n  dynamic_filtering: ['column1', 'column2'],\n  is_keyword_enabled: true,\n  details: false\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/items/search',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    user_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    member_id: 'df3456tg-2909-459b-be55-62196afedf85',\n    message: 'What is life?',\n    type: 'individual',\n    search_size: 1000,\n    start: 0,\n    size: 10,\n    price_lower: 1,\n    price_upper: 10000,\n    categories: ['category1', 'category2'],\n    flags: {flag1: true, flag2: false},\n    sort: {column_name: 'asc / desc'},\n    storage: 'memory',\n    dynamic_filtering: ['column1', 'column2'],\n    is_keyword_enabled: true,\n    details: false\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/items/search\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"message\": \"What is life?\",\n  \"type\": \"individual\",\n  \"search_size\": 1000,\n  \"start\": 0,\n  \"size\": 10,\n  \"price_lower\": 1,\n  \"price_upper\": 10000,\n  \"categories\": [\n    \"category1\",\n    \"category2\"\n  ],\n  \"flags\": {\n    \"flag1\": true,\n    \"flag2\": false\n  },\n  \"sort\": {\n    \"column_name\": \"asc / desc\"\n  },\n  \"storage\": \"memory\",\n  \"dynamic_filtering\": [\n    \"column1\",\n    \"column2\"\n  ],\n  \"is_keyword_enabled\": true,\n  \"details\": false\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"user_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"member_id\": @\"df3456tg-2909-459b-be55-62196afedf85\",\n                              @\"message\": @\"What is life?\",\n                              @\"type\": @\"individual\",\n                              @\"search_size\": @1000,\n                              @\"start\": @0,\n                              @\"size\": @10,\n                              @\"price_lower\": @1,\n                              @\"price_upper\": @10000,\n                              @\"categories\": @[ @\"category1\", @\"category2\" ],\n                              @\"flags\": @{ @\"flag1\": @YES, @\"flag2\": @NO },\n                              @\"sort\": @{ @\"column_name\": @\"asc / desc\" },\n                              @\"storage\": @\"memory\",\n                              @\"dynamic_filtering\": @[ @\"column1\", @\"column2\" ],\n                              @\"is_keyword_enabled\": @YES,\n                              @\"details\": @NO };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/items/search\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/items/search\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/items/search');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"message\":\"What is life?\",\"type\":\"individual\",\"search_size\":1000,\"start\":0,\"size\":10,\"price_lower\":1,\"price_upper\":10000,\"categories\":[\"category1\",\"category2\"],\"flags\":{\"flag1\":true,\"flag2\":false},\"sort\":{\"column_name\":\"asc / desc\"},\"storage\":\"memory\",\"dynamic_filtering\":[\"column1\",\"column2\"],\"is_keyword_enabled\":true,\"details\":false}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"message\":\"What is life?\",\"type\":\"individual\",\"search_size\":1000,\"start\":0,\"size\":10,\"price_lower\":1,\"price_upper\":10000,\"categories\":[\"category1\",\"category2\"],\"flags\":{\"flag1\":true,\"flag2\":false},\"sort\":{\"column_name\":\"asc / desc\"},\"storage\":\"memory\",\"dynamic_filtering\":[\"column1\",\"column2\"],\"is_keyword_enabled\":true,\"details\":false}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/items/search');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/items/search\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/items/search\"\n\npayload = {\n    \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n    \"message\": \"What is life?\",\n    \"type\": \"individual\",\n    \"search_size\": 1000,\n    \"start\": 0,\n    \"size\": 10,\n    \"price_lower\": 1,\n    \"price_upper\": 10000,\n    \"categories\": [\"category1\", \"category2\"],\n    \"flags\": {\n        \"flag1\": True,\n        \"flag2\": False\n    },\n    \"sort\": {\"column_name\": \"asc / desc\"},\n    \"storage\": \"memory\",\n    \"dynamic_filtering\": [\"column1\", \"column2\"],\n    \"is_keyword_enabled\": True,\n    \"details\": False\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/items/search\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"user_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"member_id\\\":\\\"df3456tg-2909-459b-be55-62196afedf85\\\",\\\"message\\\":\\\"What is life?\\\",\\\"type\\\":\\\"individual\\\",\\\"search_size\\\":1000,\\\"start\\\":0,\\\"size\\\":10,\\\"price_lower\\\":1,\\\"price_upper\\\":10000,\\\"categories\\\":[\\\"category1\\\",\\\"category2\\\"],\\\"flags\\\":{\\\"flag1\\\":true,\\\"flag2\\\":false},\\\"sort\\\":{\\\"column_name\\\":\\\"asc / desc\\\"},\\\"storage\\\":\\\"memory\\\",\\\"dynamic_filtering\\\":[\\\"column1\\\",\\\"column2\\\"],\\\"is_keyword_enabled\\\":true,\\\"details\\\":false}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/items/search \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"user_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"member_id\":\"df3456tg-2909-459b-be55-62196afedf85\",\"message\":\"What is life?\",\"type\":\"individual\",\"search_size\":1000,\"start\":0,\"size\":10,\"price_lower\":1,\"price_upper\":10000,\"categories\":[\"category1\",\"category2\"],\"flags\":{\"flag1\":true,\"flag2\":false},\"sort\":{\"column_name\":\"asc / desc\"},\"storage\":\"memory\",\"dynamic_filtering\":[\"column1\",\"column2\"],\"is_keyword_enabled\":true,\"details\":false}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"user_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"member_id\": \"df3456tg-2909-459b-be55-62196afedf85\",\n  \"message\": \"What is life?\",\n  \"type\": \"individual\",\n  \"search_size\": 1000,\n  \"start\": 0,\n  \"size\": 10,\n  \"price_lower\": 1,\n  \"price_upper\": 10000,\n  \"categories\": [\"category1\", \"category2\"],\n  \"flags\": [\n    \"flag1\": true,\n    \"flag2\": false\n  ],\n  \"sort\": [\"column_name\": \"asc / desc\"],\n  \"storage\": \"memory\",\n  \"dynamic_filtering\": [\"column1\", \"column2\"],\n  \"is_keyword_enabled\": true,\n  \"details\": false\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/items/search\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/gpt/train":{"get":{"tags":["MyGPT"],"summary":"Train with pre-processed data and embeddings and save it in vector db","description":"GPT train","operationId":"item_train_v1_gpt_train_get","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/train\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/train\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/train\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/train\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/train\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/train\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/train\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/train\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/train',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/train\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/train\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/train\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/train');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/train');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/train\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/train\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/train\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/train \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/train\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/gpt/conversations/{conversation_id}":{"get":{"tags":["MyGPT"],"summary":"Get details of a conversation","description":"Get details of a GPT conversation.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| conversation_id | str | str | The ID of the conversation to retrieve. (Required) |","operationId":"get_gpt_conversation_v1_gpt_conversations__conversation_id__get","parameters":[{"required":true,"schema":{"title":"Conversation Id","type":"string"},"name":"conversation_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/conversations/%7Bconversation_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/conversations/%7Bconversation_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/conversations/%7Bconversation_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/gpt/conversations":{"get":{"tags":["MyGPT"],"summary":"Get gpt conversations of the project","description":"Provides a list of conversations. It takes to optional parameter: start_date and end_date to indicate the range of conversations. \nBy default it assumes a delta of 7 days.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| start_date | Optional[str] | str | Initial date of the conversation date range. |\n| end_date |Optional[str] | str | End date of the conversation date range. |","operationId":"get_gpt_conversation_list_v1_gpt_conversations_get","parameters":[{"required":false,"schema":{"title":"Start Date","type":"string","format":"date"},"name":"start_date","in":"query"},{"required":false,"schema":{"title":"End Date","type":"string","format":"date"},"name":"end_date","in":"query"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/conversations',\n  qs: {start_date: 'SOME_STRING_VALUE', end_date: 'SOME_STRING_VALUE'},\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/conversations\");\n\nreq.query({\n  \"start_date\": \"SOME_STRING_VALUE\",\n  \"end_date\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'start_date' => 'SOME_STRING_VALUE',\n  'end_date' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'start_date' => 'SOME_STRING_VALUE',\n  'end_date' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/conversations\"\n\nquerystring = {\"start_date\":\"SOME_STRING_VALUE\",\"end_date\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/conversations?start_date=SOME_STRING_VALUE&end_date=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["MyGPT"],"summary":"Send your feedback for a received answer","description":"Feedback for GPTFlow response\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| conversation_id | str | str | ID of the conversation to provide feedback for. |\n| message | optional[str] | str | Feedback message describing the user's experience of the GPT response. |\n| type | str | str | Type of feedback (e.g., positive, negative). |","operationId":"put_gpt_response_feedback_v1_gpt_conversations_put","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GPTConversationFeedbackSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/conversations\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/conversations\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/conversations\"\n\n\tpayload := strings.NewReader(\"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/conversations\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/gpt/conversations\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/conversations\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"conversation_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"message\": \"Tell us your experience of the GPT response\",\n  \"type\": \"positive\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/conversations\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/conversations\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  conversation_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n  message: 'Tell us your experience of the GPT response',\n  type: 'positive'\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/conversations',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    conversation_id: 'a0cc6beb-2909-459b-be55-62196af78ce4',\n    message: 'Tell us your experience of the GPT response',\n    type: 'positive'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/conversations\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"conversation_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"message\": \"Tell us your experience of the GPT response\",\n  \"type\": \"positive\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"conversation_id\": @\"a0cc6beb-2909-459b-be55-62196af78ce4\",\n                              @\"message\": @\"Tell us your experience of the GPT response\",\n                              @\"type\": @\"positive\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/conversations\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/conversations\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"conversation_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"message\":\"Tell us your experience of the GPT response\",\"type\":\"positive\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"conversation_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"message\":\"Tell us your experience of the GPT response\",\"type\":\"positive\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/conversations');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/gpt/conversations\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/conversations\"\n\npayload = {\n    \"conversation_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n    \"message\": \"Tell us your experience of the GPT response\",\n    \"type\": \"positive\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/conversations\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"conversation_id\\\":\\\"a0cc6beb-2909-459b-be55-62196af78ce4\\\",\\\"message\\\":\\\"Tell us your experience of the GPT response\\\",\\\"type\\\":\\\"positive\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/conversations \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"conversation_id\":\"a0cc6beb-2909-459b-be55-62196af78ce4\",\"message\":\"Tell us your experience of the GPT response\",\"type\":\"positive\"}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"conversation_id\": \"a0cc6beb-2909-459b-be55-62196af78ce4\",\n  \"message\": \"Tell us your experience of the GPT response\",\n  \"type\": \"positive\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/conversations\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/gpt/settings":{"get":{"tags":["MyGPT Settings"],"summary":"Get GPT settings","description":"Get your saved GPT settings.","operationId":"get_rank_settings_v1_gpt_settings_get","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/settings\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/settings\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/settings\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/settings\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/settings\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/settings\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/settings',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/settings\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/settings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/settings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/settings\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/settings\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/settings \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/settings\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["MyGPT Settings"],"summary":"Update gpt settings","description":"Update the project wide settings for GPT. It takes following parameters. \n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| model | str | str | The name of model. Supported models are `gpt-3.5-turbo-0613`, `text-davinci-003`, `gpt-3.5-turbo-instruct`, `gpt-3.5-turbo-16k-0613` and `gpt-4-0613` |\n| bot_mode_strict | bool | bool | If the bot mode is strict or not (default is False). |\n| system | str | str | setup the bot persona e.g. You are an expert on .... |","operationId":"update_gpt_settings_v1_gpt_settings_put","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GPTSettingsUpdateSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/settings\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/settings\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/settings\"\n\n\tpayload := strings.NewReader(\"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/settings\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"bot_mode_strict\": false,\n  \"system\": \"You are an expert on ...\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/settings\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/settings\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  model: 'gpt-3.5-turbo-0613',\n  bot_mode_strict: false,\n  system: 'You are an expert on ...'\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/settings',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    model: 'gpt-3.5-turbo-0613',\n    bot_mode_strict: false,\n    system: 'You are an expert on ...'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/settings\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"bot_mode_strict\": false,\n  \"system\": \"You are an expert on ...\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"model\": @\"gpt-3.5-turbo-0613\",\n                              @\"bot_mode_strict\": @NO,\n                              @\"system\": @\"You are an expert on ...\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/settings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/settings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/gpt/settings\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/settings\"\n\npayload = {\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"bot_mode_strict\": False,\n    \"system\": \"You are an expert on ...\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/settings \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"bot_mode_strict\": false,\n  \"system\": \"You are an expert on ...\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/settings\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"post":{"tags":["MyGPT Settings"],"summary":"Create GPT settings","description":"This endpoint determines the project wide settings for GPT. It takes following parameters. \n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| model | str | str | The name of model. Supported models are `gpt-3.5-turbo-0613`, `text-davinci-003`, `gpt-3.5-turbo-instruct`, `gpt-3.5-turbo-16k-0613` and `gpt-4-0613` |\n| bot_mode_strict | bool | bool | If the bot mode is strict or not (default is False). |\n| system | str | str | setup the bot persona e.g. You are an expert on .... |","operationId":"save_gpt_settings_v1_gpt_settings_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GPTSettingsSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/settings\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/settings\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/settings\"\n\n\tpayload := strings.NewReader(\"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/settings\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"bot_mode_strict\": false,\n  \"system\": \"You are an expert on ...\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/settings\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/settings\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  model: 'gpt-3.5-turbo-0613',\n  bot_mode_strict: false,\n  system: 'You are an expert on ...'\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/settings',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    model: 'gpt-3.5-turbo-0613',\n    bot_mode_strict: false,\n    system: 'You are an expert on ...'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/settings\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"bot_mode_strict\": false,\n  \"system\": \"You are an expert on ...\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"model\": @\"gpt-3.5-turbo-0613\",\n                              @\"bot_mode_strict\": @NO,\n                              @\"system\": @\"You are an expert on ...\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/settings\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/settings\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/settings');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/gpt/settings\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/settings\"\n\npayload = {\n    \"model\": \"gpt-3.5-turbo-0613\",\n    \"bot_mode_strict\": False,\n    \"system\": \"You are an expert on ...\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/settings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"model\\\":\\\"gpt-3.5-turbo-0613\\\",\\\"bot_mode_strict\\\":false,\\\"system\\\":\\\"You are an expert on ...\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/settings \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"model\":\"gpt-3.5-turbo-0613\",\"bot_mode_strict\":false,\"system\":\"You are an expert on ...\"}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"bot_mode_strict\": false,\n  \"system\": \"You are an expert on ...\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/settings\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/gpt/datasets":{"get":{"tags":["MyGPT Dataset"],"summary":"Get list of all datasets","description":"Get metadata of all dataset.\n### Parameters\n----------\n| name   | key type            | value type  | description                                         |\n| :-----:| :------------------: | :---------: | :--------------------------------------------------: |\n| start  | Optional[int]       | int         | The starting index for dataset retrieval (default is 0, minimum is 0). |\n| size   | Optional[int]       | int         | The number of records to retrieve (default is 10, minimum is 1, maximum is 1000). |","operationId":"get_gpt_datasets_list_v1_gpt_datasets_get","parameters":[{"required":false,"schema":{"title":"Start","minimum":0,"type":"integer","default":0},"name":"start","in":"query"},{"required":false,"schema":{"title":"Size","minimum":1,"type":"integer","default":10},"name":"size","in":"query"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets',\n  qs: {start: 'SOME_INTEGER_VALUE', size: 'SOME_INTEGER_VALUE'},\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets\");\n\nreq.query({\n  \"start\": \"SOME_INTEGER_VALUE\",\n  \"size\": \"SOME_INTEGER_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets\"\n\nquerystring = {\"start\":\"SOME_INTEGER_VALUE\",\"size\":\"SOME_INTEGER_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"post":{"tags":["MyGPT Dataset"],"summary":"Upload your dataset for training. MyGPT supports CSV, JSON formats.","description":"Upload dataset to train your GPT. `csv`, `json` file types are supported.\nidx_column identifies your data row/objects, if none given we will use `idx` as column name and give an UUID to each unit of data.\nProvide image_url_column if your data have image and you want to use vision api with this dataset. The parameter takes the column name containing data unit's image url.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| name | str | str | The name of the dataset. |\n| idx_column | Optional[str] | str | The index column of the dataset default is `idx`. |\n| is_idx_fillup_if_empty | bool | Should we fill up empty index values? |\n| secondary_idx_column | Optional[str] | str | The secondary index column of the dataset. |\n| image_url_column  | Optional[str] | str   | image url column or field name |\n| description | Optional[str] | str | The description of the dataset. |\n| dataset_file | Optional | Binary File | The **csv, json** file to be uploaded. |","operationId":"post_gpt_dataset_v1_gpt_datasets_post","parameters":[{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_post_gpt_dataset_v1_gpt_datasets_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets\")\n  .post(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/gpt/datasets\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/gpt/datasets\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/gpt/datasets/{dataset_id}":{"get":{"tags":["MyGPT Dataset"],"summary":"Get summary of a dataset","description":"Get details of a dataset. The response includes both metadata and documents summaries like, \na. Total document count\nb. Total text trained document count\nc. Total image trained document count\nd. Active document count\n\n### Parameters\n----------\n| name   | key type            | value type  | description                                         |\n| :-----:| :------------------: | :---------: | :--------------------------------------------------: |\n| dataset_id | str | str | ID of the dataset |","operationId":"get_summary_of_a_dataset_v1_gpt_datasets__dataset_id__get","parameters":[{"required":true,"schema":{"title":"Dataset Id","type":"string"},"name":"dataset_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/datasets/%7Bdataset_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["MyGPT Dataset"],"summary":"Update a dataset","description":"Update a dataset meta data and/or add documents from csv/json file.\n\n### Parameters\n----------\n| name | key type | value type | description |\n| :-----------: | :-----------: | :-----------: | :-----------: |\n| dataset_id | str | str | ID of the dataset to be updated |\n| name | str | str | The name of the dataset. |\n| is_idx_fillup_if_empty | bool | Should we fill up empty index values? |\n| secondary_idx_column | Optional[str] | str | The secondary index column of the dataset. |\n| image_url_column  | Optional[str] | str   | image url column or field name |\n| description | Optional[str] | str | The description of the dataset. |\n| dataset_file | Optional | Binary File | The **csv, json** file to be uploaded. |","operationId":"update_gpt_dataset_data_v1_gpt_datasets__dataset_id__put","parameters":[{"required":true,"schema":{"title":"Dataset Id","type":"string"},"name":"dataset_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"multipart/form-data":{"schema":{"$ref":"#/components/schemas/Body_update_gpt_dataset_data_v1_gpt_datasets__dataset_id__put"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"multipart/form-data\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"\n\n\treq, _ := http.NewRequest(\"PUT\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"multipart/form-data\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n  .put(null)\n  .addHeader(\"content-type\", \"multipart/form-data\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n  .header(\"content-type\", \"multipart/form-data\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\nxhr.setRequestHeader(\"content-type\", \"multipart/form-data\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D\",\n  \"headers\": {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D',\n  headers: {\n    'content-type': 'multipart/form-data',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\n\nreq.headers({\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"multipart/form-data\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: multipart/form-data\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');\n$request->setRequestMethod('PUT');\n$request->setHeaders([\n  'content-type' => 'multipart/form-data',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'content-type': \"multipart/form-data\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/gpt/datasets/%7Bdataset_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"\n\nheaders = {\n    \"content-type\": \"multipart/form-data\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'multipart/form-data'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: multipart/form-data' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"multipart/form-data\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"delete":{"tags":["MyGPT Dataset"],"summary":"Deletes the dataset","description":"Deletes a dataset entierly. To clear a dataset use `/documents` endpoint.\n\n### Parameters\n----------\n| name   | key type            | value type  | description                                         |\n| :-----:| :------------------: | :---------: | :--------------------------------------------------: |\n| dataset_id | str | str | ID of the dataset |","operationId":"gpt_dataset_delete_v1_gpt_datasets__dataset_id__delete","parameters":[{"required":true,"schema":{"title":"Dataset Id","type":"string"},"name":"dataset_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Delete,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n  .delete(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/v1/gpt/datasets/%7Bdataset_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/gpt/datasets/{dataset_id}/documents":{"get":{"tags":["MyGPT Dataset"],"summary":"Get data of a dataset","description":"Get data of a dataset. Use query parameters to customize the search result.\n### Parameters\n----------\n| name   | key type            | value type  | description                                         |\n| :-----:| :------------------: | :---------: | :--------------------------------------------------: |\n| start  | Optional[int]       | int         | The starting index for dataset retrieval (default is 0, minimum is 0). |\n| size   | Optional[int]       | int         | The number of records to retrieve (default is 10, minimum is 1, maximum is 1000). |\n| text_training_status | Optional[str]       | str | The status of the dataset (possible values are `trained`, `untrained`). |\n| image_training_status | Optional[str] | str | The status of the dataset (possible values are `trained`, `untrained`). |\n| active_status   | Optional[str]       | str | The active status of the dataset (possible values are `archived`, `active`). |","operationId":"get_gpt_dataset_documents_v1_gpt_datasets__dataset_id__documents_get","parameters":[{"required":true,"schema":{"title":"Dataset Id","type":"string"},"name":"dataset_id","in":"path"},{"required":false,"schema":{"title":"Start","minimum":0,"type":"integer"},"name":"start","in":"query"},{"required":false,"schema":{"title":"Size","minimum":1,"type":"integer"},"name":"size","in":"query"},{"required":false,"schema":{"title":"GPTTextTrainStatus","enum":["trained","untrained","failed"],"type":"string","description":"An enumeration."},"name":"text_training_status","in":"query"},{"required":false,"schema":{"title":"GPTImageTrainStatus","enum":["trained","untrained","failed"],"type":"string","description":"An enumeration."},"name":"image_training_status","in":"query"},{"required":false,"schema":{"title":"DocActiveStatus","enum":["archived","active"],"type":"string","description":"An enumeration."},"name":"active_status","in":"query"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents',\n  qs: {\n    start: 'SOME_INTEGER_VALUE',\n    size: 'SOME_INTEGER_VALUE',\n    text_training_status: 'SOME_STRING_VALUE',\n    image_training_status: 'SOME_STRING_VALUE',\n    active_status: 'SOME_STRING_VALUE'\n  },\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\n\nreq.query({\n  \"start\": \"SOME_INTEGER_VALUE\",\n  \"size\": \"SOME_INTEGER_VALUE\",\n  \"text_training_status\": \"SOME_STRING_VALUE\",\n  \"image_training_status\": \"SOME_STRING_VALUE\",\n  \"active_status\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE',\n  'text_training_status' => 'SOME_STRING_VALUE',\n  'image_training_status' => 'SOME_STRING_VALUE',\n  'active_status' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'start' => 'SOME_INTEGER_VALUE',\n  'size' => 'SOME_INTEGER_VALUE',\n  'text_training_status' => 'SOME_STRING_VALUE',\n  'image_training_status' => 'SOME_STRING_VALUE',\n  'active_status' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"\n\nquerystring = {\"start\":\"SOME_INTEGER_VALUE\",\"size\":\"SOME_INTEGER_VALUE\",\"text_training_status\":\"SOME_STRING_VALUE\",\"image_training_status\":\"SOME_STRING_VALUE\",\"active_status\":\"SOME_STRING_VALUE\"}\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE' \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents?start=SOME_INTEGER_VALUE&size=SOME_INTEGER_VALUE&text_training_status=SOME_STRING_VALUE&image_training_status=SOME_STRING_VALUE&active_status=SOME_STRING_VALUE\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["MyGPT Dataset"],"summary":"Update documents","description":"Update documents under a dataset. User can update metadata in bulk with document ids.\nIf all is `true`, `ids` value is ignored.\n### Parameters\n----------\n| name   | key type            | value type  | description                                         |\n| :-----:| :------------------: | :---------: | :--------------------------------------------------: |\n| ids       | Optional[list[str]]         | list[str] | A list of idxs of the dataset which needs to be updated. |\n| all       | Optional[bool]         | bool | determines if all documents should be updated, default `false` |\n| metadata_updates | list[dict] | list[dict] | A list of objects containing data rows to update. |","operationId":"put_dataset_update_documents_v1_gpt_datasets__dataset_id__documents_put","parameters":[{"required":true,"schema":{"title":"Dataset Id","type":"string"},"name":"dataset_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GPTDocumentsUpdateSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"\n\n\tpayload := strings.NewReader(\"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"ids\": [\n    \"idx-1\",\n    \"idx-2\"\n  ],\n  \"is_update_all\": false,\n  \"updates\": [\n    {\n      \"field_name\": \"active_status\",\n      \"value\": \"active\"\n    },\n    {\n      \"field_name\": \"status\",\n      \"value\": \"untrained\"\n    },\n    {\n      \"field_name\": \"image_train_status\",\n      \"value\": \"trained\"\n    }\n  ]\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  ids: ['idx-1', 'idx-2'],\n  is_update_all: false,\n  updates: [\n    {field_name: 'active_status', value: 'active'},\n    {field_name: 'status', value: 'untrained'},\n    {field_name: 'image_train_status', value: 'trained'}\n  ]\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    ids: ['idx-1', 'idx-2'],\n    is_update_all: false,\n    updates: [\n      {field_name: 'active_status', value: 'active'},\n      {field_name: 'status', value: 'untrained'},\n      {field_name: 'image_train_status', value: 'trained'}\n    ]\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"ids\": [\n    \"idx-1\",\n    \"idx-2\"\n  ],\n  \"is_update_all\": false,\n  \"updates\": [\n    {\n      \"field_name\": \"active_status\",\n      \"value\": \"active\"\n    },\n    {\n      \"field_name\": \"status\",\n      \"value\": \"untrained\"\n    },\n    {\n      \"field_name\": \"image_train_status\",\n      \"value\": \"trained\"\n    }\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"ids\": @[ @\"idx-1\", @\"idx-2\" ],\n                              @\"is_update_all\": @NO,\n                              @\"updates\": @[ @{ @\"field_name\": @\"active_status\", @\"value\": @\"active\" }, @{ @\"field_name\": @\"status\", @\"value\": @\"untrained\" }, @{ @\"field_name\": @\"image_train_status\", @\"value\": @\"trained\" } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"ids\":[\"idx-1\",\"idx-2\"],\"is_update_all\":false,\"updates\":[{\"field_name\":\"active_status\",\"value\":\"active\"},{\"field_name\":\"status\",\"value\":\"untrained\"},{\"field_name\":\"image_train_status\",\"value\":\"trained\"}]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"ids\":[\"idx-1\",\"idx-2\"],\"is_update_all\":false,\"updates\":[{\"field_name\":\"active_status\",\"value\":\"active\"},{\"field_name\":\"status\",\"value\":\"untrained\"},{\"field_name\":\"image_train_status\",\"value\":\"trained\"}]}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/gpt/datasets/%7Bdataset_id%7D/documents\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"\n\npayload = {\n    \"ids\": [\"idx-1\", \"idx-2\"],\n    \"is_update_all\": False,\n    \"updates\": [\n        {\n            \"field_name\": \"active_status\",\n            \"value\": \"active\"\n        },\n        {\n            \"field_name\": \"status\",\n            \"value\": \"untrained\"\n        },\n        {\n            \"field_name\": \"image_train_status\",\n            \"value\": \"trained\"\n        }\n    ]\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"ids\\\":[\\\"idx-1\\\",\\\"idx-2\\\"],\\\"is_update_all\\\":false,\\\"updates\\\":[{\\\"field_name\\\":\\\"active_status\\\",\\\"value\\\":\\\"active\\\"},{\\\"field_name\\\":\\\"status\\\",\\\"value\\\":\\\"untrained\\\"},{\\\"field_name\\\":\\\"image_train_status\\\",\\\"value\\\":\\\"trained\\\"}]}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"ids\":[\"idx-1\",\"idx-2\"],\"is_update_all\":false,\"updates\":[{\"field_name\":\"active_status\",\"value\":\"active\"},{\"field_name\":\"status\",\"value\":\"untrained\"},{\"field_name\":\"image_train_status\",\"value\":\"trained\"}]}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"ids\": [\"idx-1\", \"idx-2\"],\n  \"is_update_all\": false,\n  \"updates\": [\n    [\n      \"field_name\": \"active_status\",\n      \"value\": \"active\"\n    ],\n    [\n      \"field_name\": \"status\",\n      \"value\": \"untrained\"\n    ],\n    [\n      \"field_name\": \"image_train_status\",\n      \"value\": \"trained\"\n    ]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"post":{"tags":["MyGPT Dataset"],"summary":"Create documents under a dataset","description":"Create documents under a dataset.\n\n### Parameters\n----------\n| name   | key type            | value type  | description                                         |\n| :-----:| :------------------: | :---------: | :--------------------------------------------------: |\n| data_list | list[dict]       | list[dict] | A list of objects |","operationId":"gpt_dataset_create_documents_v1_gpt_datasets__dataset_id__documents_post","parameters":[{"required":true,"schema":{"title":"Dataset Id","type":"string"},"name":"dataset_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GPTDocumentsListSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"documents\\\":[{}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Post,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"documents\\\":[{}]}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"\n\n\tpayload := strings.NewReader(\"{\\\"documents\\\":[{}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"documents\\\":[{}]}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.post(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"documents\\\":[{}]}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"documents\\\":[{}]}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"documents\": [\n    {}\n  ]\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({documents: [{}]}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {documents: [{}]},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"POST\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"documents\": [\n    {}\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"documents\": @[ @{  } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"documents\\\":[{}]}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"documents\":[{}]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"documents\":[{}]}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"documents\\\":[{}]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"POST\", \"/v1/gpt/datasets/%7Bdataset_id%7D/documents\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"\n\npayload = {\"documents\": [{}]}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"POST\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"documents\\\":[{}]}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request POST \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"documents\":[{}]}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\"documents\": [[]]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"delete":{"tags":["MyGPT Dataset"],"summary":"Delete documents","description":"delete documents under a dataset. User can delete documets in bulk with document ids.\nIf all is `true`, `ids` value is ignored.\n\n### Parameters\n----------\n| name   | key type            | value type  | description                                         |\n| :-----:| :------------------: | :---------: | :--------------------------------------------------: |\n| ids       | Optional[list[str]]         | list[str] | A list of idxs of the dataset which are to be deleted. |\n| all | Optional[bool]         | bool | `true` if all documents to be deleted from the dataset while keeping the dataset, default `false`|","operationId":"delete_gpt_documents_v1_gpt_datasets__dataset_id__documents_delete","parameters":[{"required":true,"schema":{"title":"Dataset Id","type":"string"},"name":"dataset_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GPTDocumentsDeleteSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Delete,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"\n\n\tpayload := strings.NewReader(\"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\")\n\n\treq, _ := http.NewRequest(\"DELETE\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n  .delete(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"ids\": [\n    \"string\"\n  ],\n  \"is_delete_all\": false\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ids: ['string'], is_delete_all: false}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {ids: ['string'], is_delete_all: false},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"ids\": [\n    \"string\"\n  ],\n  \"is_delete_all\": false\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"ids\": @[ @\"string\" ],\n                              @\"is_delete_all\": @NO };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_POSTFIELDS => \"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"ids\":[\"string\"],\"is_delete_all\":false}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"ids\":[\"string\"],\"is_delete_all\":false}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents');\n$request->setRequestMethod('DELETE');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/v1/gpt/datasets/%7Bdataset_id%7D/documents\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\"\n\npayload = {\n    \"ids\": [\"string\"],\n    \"is_delete_all\": False\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"DELETE\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"ids\\\":[\\\"string\\\"],\\\"is_delete_all\\\":false}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"ids\":[\"string\"],\"is_delete_all\":false}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"ids\": [\"string\"],\n  \"is_delete_all\": false\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/documents\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}},"/v1/gpt/datasets/{dataset_id}/{document_id}":{"get":{"tags":["MyGPT Dataset"],"summary":"Get documents by its id.","description":"get details of the document with ID.","operationId":"get_single_document_v1_gpt_datasets__dataset_id___document_id__get","parameters":[{"required":true,"schema":{"title":"Dataset Id","type":"string"},"name":"dataset_id","in":"path"},{"required":true,"schema":{"title":"Document Id","type":"string"},"name":"document_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Get,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n  .get()\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.get(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"GET\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"GET\", \"/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request GET \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"put":{"tags":["MyGPT Dataset"],"summary":"Update documents by its id.","description":"Update a single document under the dataset","operationId":"update_single_document_v1_gpt_datasets__dataset_id___document_id__put","parameters":[{"required":true,"schema":{"title":"Dataset Id","type":"string"},"name":"dataset_id","in":"path"},{"required":true,"schema":{"title":"Document Id","type":"string"},"name":"document_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GPTSingleDocumentUpdateSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nrequest.AddParameter(\"application/json\", \"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Put,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n    Content = new StringContent(\"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\")\n    {\n        Headers =\n        {\n            ContentType = new MediaTypeHeaderValue(\"application/json\")\n        }\n    }\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n  .put(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.put(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .body(\"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  \"method\": \"PUT\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\"\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = JSON.stringify({\n  \"data\": {\n    \"header\": \"\",\n    \"content\": \"\"\n  },\n  \"status\": \"trained\",\n  \"image_train_status\": \"trained\",\n  \"active_status\": \"archived\"\n});\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  data: {header: '', content: ''},\n  status: 'trained',\n  image_train_status: 'trained',\n  active_status: 'archived'\n}));\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D',\n  headers: {\n    'content-type': 'application/json',\n    'project-key': 'SOME_STRING_VALUE',\n    'api-key': 'SOME_STRING_VALUE'\n  },\n  body: {\n    data: {header: '', content: ''},\n    status: 'trained',\n    image_train_status: 'trained',\n    active_status: 'archived'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"PUT\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\n\nreq.headers({\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"data\": {\n    \"header\": \"\",\n    \"content\": \"\"\n  },\n  \"status\": \"trained\",\n  \"image_train_status\": \"trained\",\n  \"active_status\": \"archived\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\nNSDictionary *parameters = @{ @\"data\": @{ @\"header\": @\"\", @\"content\": @\"\" },\n                              @\"status\": @\"trained\",\n                              @\"image_train_status\": @\"trained\",\n                              @\"active_status\": @\"archived\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"content-type: application/json\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$request->setBody('{\"data\":{\"header\":\"\",\"content\":\"\"},\"status\":\"trained\",\"image_train_status\":\"trained\",\"active_status\":\"archived\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"data\":{\"header\":\"\",\"content\":\"\"},\"status\":\"trained\",\"image_train_status\":\"trained\",\"active_status\":\"archived\"}');\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\npayload = \"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"PUT\", \"/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"\n\npayload = {\n    \"data\": {\n        \"header\": \"\",\n        \"content\": \"\"\n    },\n    \"status\": \"trained\",\n    \"image_train_status\": \"trained\",\n    \"active_status\": \"archived\"\n}\nheaders = {\n    \"content-type\": \"application/json\",\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"PUT\", url, json=payload, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\nrequest.body = \"{\\\"data\\\":{\\\"header\\\":\\\"\\\",\\\"content\\\":\\\"\\\"},\\\"status\\\":\\\"trained\\\",\\\"image_train_status\\\":\\\"trained\\\",\\\"active_status\\\":\\\"archived\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request PUT \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --header 'project-key: SOME_STRING_VALUE' \\\n  --data '{\"data\":{\"header\":\"\",\"content\":\"\"},\"status\":\"trained\",\"image_train_status\":\"trained\",\"active_status\":\"archived\"}'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\nlet parameters = [\n  \"data\": [\n    \"header\": \"\",\n    \"content\": \"\"\n  ],\n  \"status\": \"trained\",\n  \"image_train_status\": \"trained\",\n  \"active_status\": \"archived\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]},"delete":{"tags":["MyGPT Dataset"],"summary":"Delete single document by its id from the index","description":"Delete a single document under the dataset","operationId":"delete_single_document_v1_gpt_datasets__dataset_id___document_id__delete","parameters":[{"required":true,"schema":{"title":"Dataset Id","type":"string"},"name":"dataset_id","in":"path"},{"required":true,"schema":{"title":"Document Id","type":"string"},"name":"document_id","in":"path"},{"required":true,"schema":{"title":"Project-Key","type":"string"},"name":"project-key","in":"header"},{"required":true,"schema":{"title":"Api-Key","type":"string"},"name":"api-key","in":"header"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Success"}}}},"202":{"description":"Accepted","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Accepted"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}}},"401":{"description":"Unauthorized","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}}},"403":{"description":"Forbidden","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}}},"404":{"description":"Not Found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}},"429":{"description":"Too Many Requests","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TooManyRequests"}}}},"500":{"description":"Internal Server Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServerError"}}}}},"x-codeSamples":[{"lang":"Csharp + Restsharp","source":"var client = new RestClient(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"project-key\", \"SOME_STRING_VALUE\");\nrequest.AddHeader(\"api-key\", \"SOME_STRING_VALUE\");\nIRestResponse response = client.Execute(request);"},{"lang":"Csharp + Httpclient","source":"var client = new HttpClient();\nvar request = new HttpRequestMessage\n{\n    Method = HttpMethod.Delete,\n    RequestUri = new Uri(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"),\n    Headers =\n    {\n        { \"project-key\", \"SOME_STRING_VALUE\" },\n        { \"api-key\", \"SOME_STRING_VALUE\" },\n    },\n};\nusing (var response = await client.SendAsync(request))\n{\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Console.WriteLine(body);\n}"},{"lang":"Go + Native","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"project-key\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"api-key\", \"SOME_STRING_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"Java + Okhttp","source":"OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n  .delete(null)\n  .addHeader(\"project-key\", \"SOME_STRING_VALUE\")\n  .addHeader(\"api-key\", \"SOME_STRING_VALUE\")\n  .build();\n\nResponse response = client.newCall(request).execute();"},{"lang":"Java + Unirest","source":"HttpResponse<String> response = Unirest.delete(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n  .header(\"project-key\", \"SOME_STRING_VALUE\")\n  .header(\"api-key\", \"SOME_STRING_VALUE\")\n  .asString();"},{"lang":"Javascript + Jquery","source":"const settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"},{"lang":"Javascript + Xhr","source":"const data = null;\n\nconst xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\nxhr.setRequestHeader(\"project-key\", \"SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"api-key\", \"SOME_STRING_VALUE\");\n\nxhr.send(data);"},{"lang":"Node + Native","source":"const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.recommender.gigalogy.com\",\n  \"port\": null,\n  \"path\": \"/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  \"headers\": {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"},{"lang":"Node + Request","source":"const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D',\n  headers: {'project-key': 'SOME_STRING_VALUE', 'api-key': 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"Node + Unirest","source":"const unirest = require(\"unirest\");\n\nconst req = unirest(\"DELETE\", \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\");\n\nreq.headers({\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"},{"lang":"Objc + Nsurlsession","source":"#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"project-key\": @\"SOME_STRING_VALUE\",\n                           @\"api-key\": @\"SOME_STRING_VALUE\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"},{"lang":"Php + Curl","source":"<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"api-key: SOME_STRING_VALUE\",\n    \"project-key: SOME_STRING_VALUE\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"},{"lang":"Php + Http1","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"Php + Http2","source":"<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'project-key' => 'SOME_STRING_VALUE',\n  'api-key' => 'SOME_STRING_VALUE'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"},{"lang":"Python + Python3","source":"import http.client\n\nconn = http.client.HTTPSConnection(\"api.recommender.gigalogy.com\")\n\nheaders = {\n    'project-key': \"SOME_STRING_VALUE\",\n    'api-key': \"SOME_STRING_VALUE\"\n    }\n\nconn.request(\"DELETE\", \"/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"Python + Requests","source":"import requests\n\nurl = \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\"\n\nheaders = {\n    \"project-key\": \"SOME_STRING_VALUE\",\n    \"api-key\": \"SOME_STRING_VALUE\"\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers)\n\nprint(response.text)"},{"lang":"Ruby + Native","source":"require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"project-key\"] = 'SOME_STRING_VALUE'\nrequest[\"api-key\"] = 'SOME_STRING_VALUE'\n\nresponse = http.request(request)\nputs response.read_body"},{"lang":"Shell + Curl","source":"curl --request DELETE \\\n  --url https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D \\\n  --header 'api-key: SOME_STRING_VALUE' \\\n  --header 'project-key: SOME_STRING_VALUE'"},{"lang":"Swift + Nsurlsession","source":"import Foundation\n\nlet headers = [\n  \"project-key\": \"SOME_STRING_VALUE\",\n  \"api-key\": \"SOME_STRING_VALUE\"\n]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://api.recommender.gigalogy.com/v1/gpt/datasets/%7Bdataset_id%7D/%7Bdocument_id%7D\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()"}]}}},"components":{"schemas":{"Accepted":{"title":"Accepted","required":["detail"],"type":"object","properties":{"detail":{"title":"Detail","type":"object","example":{"response":"Accepted"}}}},"ApiMethod":{"title":"ApiMethod","enum":["GET","POST"],"type":"string","description":"An enumeration."},"BadRequest":{"title":"BadRequest","required":["detail"],"type":"object","properties":{"detail":{"title":"Detail","type":"object","example":{"response":"Bad Request","error":"error details"}}}},"BehaviorRecommendSchema":{"title":"BehaviorRecommendSchema","required":["user_id","top_n_item","interval","details"],"type":"object","properties":{"user_id":{"title":"User Id","minLength":1,"type":"string","example":"a0cc6beb-2909-459b-be55-62196af78ce4"},"member_id":{"title":"Member Id","type":"string","example":"df3456tg-2909-459b-be55-62196afedf85"},"top_n_item":{"title":"Top N Item","type":"integer","example":100},"interval":{"$ref":"#/components/schemas/RankType"},"start":{"title":"Start","type":"integer","default":0,"example":0},"size":{"title":"Size","type":"integer","default":10,"example":10},"details":{"title":"Details","type":"boolean","example":true}}},"Body_gpt_dataset_train_v1_gpt_dataset_train_post":{"title":"Body_gpt_dataset_train_v1_gpt_dataset_train_post","required":["dataset_id","train_type"],"type":"object","properties":{"dataset_id":{"title":"Dataset Id","type":"string"},"train_type":{"$ref":"#/components/schemas/DataSetTrainType"}}},"Body_image_gpt_ask_v1_gpt_ask_vision_post":{"title":"Body_image_gpt_ask_v1_gpt_ask_vision_post","required":["image","query","user_id","intro","model"],"type":"object","properties":{"image":{"title":"Image","type":"string","format":"binary"},"query":{"title":"Query","minLength":1,"type":"string"},"user_id":{"title":"User Id","minLength":1,"type":"string"},"member_id":{"title":"Member Id","type":"string"},"intro":{"title":"Intro","minLength":1,"type":"string"},"model":{"$ref":"#/components/schemas/GPTVisionModel"},"system":{"title":"System","type":"string"},"search_max_token":{"title":"Search Max Token","type":"integer","default":2500},"is_image_context_enabled":{"title":"Is Image Context Enabled","type":"boolean","default":true},"temperature":{"title":"Temperature","maximum":2,"minimum":0,"type":"number","default":0},"top_p":{"title":"Top P","maximum":1,"minimum":0,"type":"number","default":1},"frequency_penalty":{"title":"Frequency Penalty","maximum":2,"minimum":0,"type":"number","default":0},"presence_penalty":{"title":"Presence Penalty","maximum":2,"minimum":0,"type":"number","default":0},"stop":{"title":"Stop","type":"array","items":{"type":"string"},"default":["AI:","Human:"]}}},"Body_image_search_v1_images_search_post":{"title":"Body_image_search_v1_images_search_post","required":["user_id","image","details"],"type":"object","properties":{"user_id":{"title":"User Id","type":"string"},"member_id":{"title":"Member Id","type":"string"},"image":{"title":"Image","type":"string","format":"binary"},"start":{"title":"Start","type":"integer"},"size":{"title":"Size","type":"integer"},"details":{"title":"Details","type":"boolean"}}},"Body_post_browse_csv_v1_items_browse_save_post":{"title":"Body_post_browse_csv_v1_items_browse_save_post","required":["file"],"type":"object","properties":{"file":{"title":"File","type":"string","format":"binary"}}},"Body_post_gpt_csv_v1_gpt_save_post":{"title":"Body_post_gpt_csv_v1_gpt_save_post","required":["file_type","storage_type","file"],"type":"object","properties":{"file_type":{"title":"File Type","type":"string"},"storage_type":{"title":"Storage Type","type":"string"},"file":{"title":"File","type":"string","format":"binary"}}},"Body_post_gpt_dataset_v1_gpt_datasets_post":{"title":"Body_post_gpt_dataset_v1_gpt_datasets_post","required":["name","idx_column"],"type":"object","properties":{"name":{"title":"Name","type":"string","description":"Name of your dataset"},"idx_column":{"title":"Idx Column","type":"string","description":"Name of your unique id column."},"is_idx_fillup_if_empty":{"title":"Is Idx Fillup If Empty","type":"boolean","default":false},"secondary_idx_column":{"title":"Secondary Idx Column","type":"string"},"image_url_column":{"title":"Image Url Column","type":"string","description":"The column name containing data unit's image url"},"description":{"title":"Description","type":"string","description":"Decribe your dataset"},"dataset_file":{"title":"Dataset File","type":"string","description":"Upload data in a **csv or json** file","format":"binary"}}},"Body_post_items_csv_v1_items_save_post":{"title":"Body_post_items_csv_v1_items_save_post","required":["file"],"type":"object","properties":{"file":{"title":"File","type":"string","format":"binary"}}},"Body_post_purchase_csv_v1_items_purchase_save_post":{"title":"Body_post_purchase_csv_v1_items_purchase_save_post","required":["file"],"type":"object","properties":{"file":{"title":"File","type":"string","format":"binary"}}},"Body_post_rating_csv_v1_items_rating_save_post":{"title":"Body_post_rating_csv_v1_items_rating_save_post","required":["file"],"type":"object","properties":{"file":{"title":"File","type":"string","format":"binary"}}},"Body_post_user_csv_v1_users_save_post":{"title":"Body_post_user_csv_v1_users_save_post","required":["file"],"type":"object","properties":{"file":{"title":"File","type":"string","format":"binary"}}},"Body_update_gpt_dataset_data_v1_gpt_datasets__dataset_id__put":{"title":"Body_update_gpt_dataset_data_v1_gpt_datasets__dataset_id__put","type":"object","properties":{"name":{"title":"Name","type":"string","description":"Name of your dataset"},"is_idx_fillup_if_empty":{"title":"Is Idx Fillup If Empty","type":"boolean","description":"Should we fill up empty index values?"},"secondary_idx_column":{"title":"Secondary Idx Column","type":"string"},"image_url_column":{"title":"Image Url Column","type":"string","description":"The column name containing data unit's image url"},"description":{"title":"Description","type":"string","description":"Decribe your dataset"},"dataset_file":{"title":"Dataset File","type":"string","description":"Upload data in a **csv or json** file","format":"binary"}}},"BrowseMap":{"title":"BrowseMap","required":["user_id","item_id","date"],"type":"object","properties":{"user_id":{"title":"User Id","minLength":1,"type":"string","example":"user_id"},"member_id":{"title":"Member Id","minLength":1,"type":"string","example":"member_id"},"item_id":{"title":"Item Id","minLength":1,"type":"string","example":"item_id"},"date":{"title":"Date","minLength":1,"type":"string","example":"browsed_at"}}},"BrowseSchema":{"title":"BrowseSchema","required":["user_id","item_id"],"type":"object","properties":{"user_id":{"title":"User Id","minLength":1,"type":"string","example":"a0cc6beb-2909-459b-be55-62196af78ce4"},"member_id":{"title":"Member Id","type":"string","example":"df3456tg-2909-459b-be55-62196afedf85"},"item_id":{"title":"Item Id","minLength":1,"type":"string","example":"1000764491"}}},"Categories":{"title":"Categories","required":["name"],"type":"object","properties":{"name":{"title":"Name","type":"string"},"separator":{"title":"Separator","type":"string"}}},"CustomParameters":{"title":"CustomParameters","required":["name","data_type"],"type":"object","properties":{"name":{"title":"Name","type":"string"},"data_type":{"$ref":"#/components/schemas/DataType"}}},"DataSetTrainType":{"title":"DataSetTrainType","enum":["text","image"],"type":"string","description":"An enumeration."},"DataType":{"title":"DataType","enum":["STR","INT","FLOAT"],"type":"string","description":"An enumeration."},"DocActiveStatus":{"title":"DocActiveStatus","enum":["archived","active"],"type":"string","description":"An enumeration."},"FeedbcakType":{"title":"FeedbcakType","enum":["positive","negative"],"type":"string","description":"An enumeration."},"Forbidden":{"title":"Forbidden","required":["detail"],"type":"object","properties":{"detail":{"title":"Detail","type":"object","example":{"response":"Forbidden","error":"error details"}}}},"GPTConversationFeedbackSchema":{"title":"GPTConversationFeedbackSchema","required":["conversation_id","type"],"type":"object","properties":{"conversation_id":{"title":"Conversation Id","minLength":1,"type":"string","example":"a0cc6beb-2909-459b-be55-62196af78ce4"},"message":{"title":"Message","minLength":1,"type":"string","example":"Tell us your experience of the GPT response"},"type":{"$ref":"#/components/schemas/FeedbcakType"}}},"GPTDocumentsDeleteSchema":{"title":"GPTDocumentsDeleteSchema","type":"object","properties":{"ids":{"title":"Ids","type":"array","items":{"type":"string"}},"is_delete_all":{"title":"Is Delete All","type":"boolean","default":false}}},"GPTDocumentsListSchema":{"title":"GPTDocumentsListSchema","required":["documents"],"type":"object","properties":{"documents":{"title":"Documents","type":"array","items":{"type":"object"}}}},"GPTDocumentsUpdateSchema":{"title":"GPTDocumentsUpdateSchema","required":["updates"],"type":"object","properties":{"ids":{"title":"Ids","type":"array","items":{"type":"string"},"example":["idx-1","idx-2"]},"is_update_all":{"title":"Is Update All","type":"boolean","default":false},"updates":{"title":"Updates","type":"array","items":{"type":"object","additionalProperties":{"type":"string"}},"example":[{"field_name":"active_status","value":"active"},{"field_name":"status","value":"untrained"},{"field_name":"image_train_status","value":"trained"}]}}},"GPTImageTrainStatus":{"title":"GPTImageTrainStatus","enum":["trained","untrained","failed"],"type":"string","description":"An enumeration."},"GPTModel":{"title":"GPTModel","enum":["gpt-3.5-turbo-0613","text-davinci-003","gpt-3.5-turbo-instruct","gpt-3.5-turbo-16k-0613","gpt-3.5-turbo-1106","gpt-4-0613","gpt-4-1106-preview","gpt-4-0125-preview"],"type":"string","description":"An enumeration."},"GPTRequestSchema":{"title":"GPTRequestSchema","required":["user_id","query","intro","model","storage"],"type":"object","properties":{"user_id":{"title":"User Id","minLength":1,"type":"string","example":"a0cc6beb-2909-459b-be55-62196af78ce4"},"member_id":{"title":"Member Id","type":"string","example":"df3456tg-2909-459b-be55-62196afedf85"},"query":{"title":"Query","minLength":1,"type":"string","example":"What is life?"},"intro":{"title":"Intro","minLength":1,"type":"string","example":"Share a little context about the question"},"system":{"title":"System","type":"string","example":"You are an expert on ..."},"model":{"$ref":"#/components/schemas/GPTModel"},"storage":{"$ref":"#/components/schemas/StorageType"},"search_max_token":{"title":"Search Max Token","type":"integer","default":2500,"example":2500},"temperature":{"title":"Temperature","maximum":2,"minimum":0,"type":"number","default":0,"example":0},"top_p":{"title":"Top P","maximum":1,"minimum":0,"type":"number","default":1,"example":1},"frequency_penalty":{"title":"Frequency Penalty","maximum":2,"minimum":0,"type":"number","default":0,"example":0},"presence_penalty":{"title":"Presence Penalty","maximum":2,"minimum":0,"type":"number","default":0,"example":0},"stop":{"title":"Stop","type":"array","items":{"type":"string"},"default":[],"example":["AI:","Human:"]},"preferred_content":{"title":"Preferred Content","type":"object","additionalProperties":{"type":"string"},"example":{"dataset_id":"1234"}}}},"GPTSearchSchema":{"title":"GPTSearchSchema","required":["user_id","message","type","storage"],"type":"object","properties":{"user_id":{"title":"User Id","minLength":1,"type":"string","example":"a0cc6beb-2909-459b-be55-62196af78ce4"},"member_id":{"title":"Member Id","type":"string","example":"df3456tg-2909-459b-be55-62196afedf85"},"message":{"title":"Message","minLength":1,"type":"string","example":"What is life?"},"type":{"$ref":"#/components/schemas/GPTSearchType"},"search_size":{"title":"Search Size","type":"integer","default":1000,"example":1000},"start":{"title":"Start","type":"integer","default":0,"example":0},"size":{"title":"Size","type":"integer","default":10,"example":10},"price_lower":{"title":"Price Lower","type":"number","default":0,"example":1},"price_upper":{"title":"Price Upper","type":"number","default":0,"example":10000},"categories":{"title":"Categories","type":"array","items":{"minLength":1,"type":"string"},"example":["category1","category2"]},"flags":{"title":"Flags","type":"object","additionalProperties":{"type":"string"},"example":{"flag1":true,"flag2":false}},"sort":{"title":"Sort","type":"object","additionalProperties":{"type":"string"},"example":{"column_name":"asc / desc"}},"storage":{"$ref":"#/components/schemas/StorageType"},"dynamic_filtering":{"title":"Dynamic Filtering","type":"array","items":{"minLength":1,"type":"string"},"example":["column1","column2"]},"is_keyword_enabled":{"title":"Is Keyword Enabled","type":"boolean","default":true,"example":true},"details":{"title":"Details","type":"boolean","default":false,"example":false}}},"GPTSearchType":{"title":"GPTSearchType","enum":["individual","group"],"type":"string","description":"An enumeration."},"GPTSettingsSchema":{"title":"GPTSettingsSchema","required":["model"],"type":"object","properties":{"model":{"$ref":"#/components/schemas/GPTModel"},"bot_mode_strict":{"title":"Bot Mode Strict","type":"boolean","default":false,"example":false},"system":{"title":"System","type":"string","example":"You are an expert on ..."}}},"GPTSettingsUpdateSchema":{"title":"GPTSettingsUpdateSchema","type":"object","properties":{"model":{"$ref":"#/components/schemas/GPTModel"},"bot_mode_strict":{"title":"Bot Mode Strict","type":"boolean","example":false},"system":{"title":"System","type":"string","example":"You are an expert on ..."}}},"GPTSingleDocumentUpdateSchema":{"title":"GPTSingleDocumentUpdateSchema","type":"object","properties":{"data":{"title":"Data","type":"object","example":{"header":"","content":""}},"status":{"$ref":"#/components/schemas/GPTTextTrainStatus"},"image_train_status":{"$ref":"#/components/schemas/GPTImageTrainStatus"},"active_status":{"$ref":"#/components/schemas/DocActiveStatus"}}},"GPTTextTrainStatus":{"title":"GPTTextTrainStatus","enum":["trained","untrained","failed"],"type":"string","description":"An enumeration."},"GPTVisionModel":{"title":"GPTVisionModel","enum":["gpt-4-vision-preview"],"type":"string","description":"An enumeration."},"HTTPValidationError":{"title":"HTTPValidationError","type":"object","properties":{"detail":{"title":"Detail","type":"array","items":{"$ref":"#/components/schemas/ValidationError"}}}},"ImageRecommendSchema":{"title":"ImageRecommendSchema","required":["user_id","item_id","details"],"type":"object","properties":{"user_id":{"title":"User Id","minLength":1,"type":"string","example":"a0cc6beb-2909-459b-be55-62196af78ce4"},"member_id":{"title":"Member Id","type":"string","example":"df3456tg-2909-459b-be55-62196afedf85"},"item_id":{"title":"Item Id","minLength":1,"type":"string","example":"1000757666"},"item_details":{"$ref":"#/components/schemas/ItemDetails"},"details":{"title":"Details","type":"boolean","example":true}}},"ImageTrainSchema":{"title":"ImageTrainSchema","type":"object","properties":{"start_date":{"title":"Start Date","type":"string","example":"2021-08-05"},"end_date":{"title":"End Date","type":"string","example":"2021-08-06"}}},"IndexDeleteSchema":{"title":"IndexDeleteSchema","required":["index_type"],"type":"object","properties":{"index_type":{"allOf":[{"$ref":"#/components/schemas/IndexType"}],"example":"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire, questionnaire_mapper"}}},"IndexType":{"title":"IndexType","enum":["items","image_features","browse","purchase","ratings","search","settings","stats","user","tasks","logs","gpt_dataset","gpt_dataset_meta","questionnaire","questionnaire_mapper"],"type":"string","description":"An enumeration."},"ItemApiSaveSchema":{"title":"ItemApiSaveSchema","required":["url","method","response_items_key"],"type":"object","properties":{"url":{"title":"Url","maxLength":2083,"minLength":1,"type":"string","format":"uri","example":"https://api.doozie.ai/v1/api/items/search"},"method":{"$ref":"#/components/schemas/ApiMethod"},"headers":{"title":"Headers","type":"object","additionalProperties":{"type":"string"},"example":{"parameter_one":"value_one","parameter_two":"value_two","...":"..."}},"query_parameters":{"title":"Query Parameters","type":"object","additionalProperties":{"type":"string"},"example":{"parameter_one":"value_one","parameter_two":"value_two","...":"..."}},"body_parameters":{"title":"Body Parameters","type":"object","example":{"parameter_one":"value_one","parameter_two":"value_two","...":"..."}},"response_items_key":{"title":"Response Items Key","type":"string","example":"Items"},"response_item_key":{"title":"Response Item Key","type":"string","example":"Item"}}},"ItemDetails":{"title":"ItemDetails","type":"object","properties":{"image_url":{"title":"Image Url","maxLength":65536,"minLength":1,"type":"string","format":"uri","default":"https://picsum.photos/200/300"},"price":{"title":"Price","type":"number","example":8525},"category":{"title":"Category","type":"array","items":{"minLength":1,"type":"string"},"example":["304904","304029","302536"]}}},"ItemNearbySchema":{"title":"ItemNearbySchema","required":["item_id","radius","filters","excludes"],"type":"object","properties":{"item_id":{"title":"Item Id","minLength":1,"type":"string","example":"1000757666"},"radius":{"title":"Radius","allOf":[{"$ref":"#/components/schemas/Radius"}],"example":{"d_from":1,"d_to":900}},"filters":{"title":"Filters","type":"array","items":{"minLength":1,"type":"string"},"example":["レストラン"]},"excludes":{"title":"Excludes","type":"array","items":{"minLength":1,"type":"string"},"example":["宿泊施設"]},"search_size":{"title":"Search Size","type":"integer","default":1000,"example":1000},"keywords_filter":{"title":"Keywords Filter","type":"boolean","default":false,"example":false},"details":{"title":"Details","type":"boolean","default":true,"example":true},"start":{"title":"Start","type":"integer","default":0,"example":0},"size":{"title":"Size","type":"integer","default":10,"example":10}}},"ItemRecommendSchema":{"title":"ItemRecommendSchema","required":["user_id","item_id","details"],"type":"object","properties":{"user_id":{"title":"User Id","minLength":1,"type":"string","example":"a0cc6beb-2909-459b-be55-62196af78ce4"},"member_id":{"title":"Member Id","type":"string","example":"df3456tg-2909-459b-be55-62196afedf85"},"item_id":{"title":"Item Id","minLength":1,"type":"string","example":"1000757666"},"details":{"title":"Details","type":"boolean","example":true}}},"ItemSearchByIdSchema":{"title":"ItemSearchByIdSchema","required":["ids"],"type":"object","properties":{"ids":{"title":"Ids","type":"array","items":{"minLength":1,"type":"string"},"example":["thones:10001072","menz-style:10017133"]}}},"KeysSchema":{"title":"KeysSchema","required":["keys"],"type":"object","properties":{"keys":{"title":"Keys","type":"array","items":{"type":"string"}}}},"Map":{"title":"Map","required":["item_id","title","availability","price","categories","flag"],"type":"object","properties":{"item_id":{"title":"Item Id","minLength":1,"type":"string","example":"item_id"},"title":{"title":"Title","minLength":1,"type":"string","example":"title"},"second_title":{"title":"Second Title","minLength":1,"type":"string"},"third_title":{"title":"Third Title","minLength":1,"type":"string"},"fourth_title":{"title":"Fourth Title","minLength":1,"type":"string"},"availability":{"title":"Availability","minLength":1,"type":"string","example":"availability"},"description":{"title":"Description","minLength":1,"type":"string"},"image_url":{"title":"Image Url","minLength":1,"type":"string"},"image_url_type":{"allOf":[{"$ref":"#/components/schemas/UrlType"}],"example":"STR or LIST_STR or LIST_DICT or DICT"},"item_url":{"title":"Item Url","minLength":1,"type":"string"},"price":{"title":"Price","minLength":1,"type":"string","example":"price"},"categories":{"title":"Categories","type":"array","items":{"$ref":"#/components/schemas/Categories"},"example":[{"name":"category_1","separator":"_"},{"name":"category_2","separator":""}]},"flag":{"title":"Flag","type":"array","items":{"type":"string"},"example":["condition"]},"average_rating":{"title":"Average Rating","minLength":1,"type":"string"},"user_ratings_total":{"title":"User Ratings Total","minLength":1,"type":"string"},"custom":{"title":"Custom","type":"array","items":{"$ref":"#/components/schemas/CustomParameters"},"example":[{"name":"colum3","data_type":"FLOAT"},{"name":"column4","data_type":"INT"}]},"item_nearby_calculation":{"title":"Item Nearby Calculation","type":"boolean","default":false,"example":false},"keywords_group_by":{"title":"Keywords Group By","minLength":1,"type":"string"},"gpt_enabled":{"title":"Gpt Enabled","type":"boolean","default":false,"example":false}},"description":"If any changes are made here, make sure to update the function named\ncheck_file_header in file client/app/models/item.py."},"MapperBrowseSchema":{"title":"MapperBrowseSchema","required":["browse_key_map"],"type":"object","properties":{"browse_key_map":{"$ref":"#/components/schemas/BrowseMap"}}},"MapperInsertSchema":{"title":"MapperInsertSchema","required":["questions","prompt_sections","prompt_order","gpt_settings"],"type":"object","properties":{"questions":{"title":"Questions","type":"object","additionalProperties":{"type":"object","additionalProperties":{"$ref":"#/components/schemas/MapperQuestionSchema"}},"example":{"skincare_history":{"q1":{"mapper":{"any":{"age":""}}},"q2":{"mapper":{"a":{"gender":"male"},"b":{"gender":"female"}}},"q7":{"mapper":{"~":{"a|b|c":{"exclude":["Retinol"]}}}}}}},"exclusive":{"title":"Exclusive","type":"object","additionalProperties":{"type":"string"},"example":{"prompt_key-1":"prompt_key-2"}},"prompt_sections":{"title":"Prompt Sections","type":"object","additionalProperties":{"type":"string"},"example":{"skincare_history":"I am {age} years old {gender}","skin_type":"My skin type is {skin_type}","include":"include these category {include}"}},"prompt_order":{"title":"Prompt Order","type":"array","items":{"type":"string"},"example":["skincare_history","include","skin_type"]},"gpt_settings":{"$ref":"#/components/schemas/QuestionnaireGPTSchema"}}},"MapperPurchaseSchema":{"title":"MapperPurchaseSchema","required":["purchase_key_map"],"type":"object","properties":{"purchase_key_map":{"$ref":"#/components/schemas/PurchaseMap"}}},"MapperQuestionSchema":{"title":"MapperQuestionSchema","required":["mapper"],"type":"object","properties":{"mapper":{"title":"Mapper","type":"object","additionalProperties":{"type":"object"}}}},"MapperRatingSchema":{"title":"MapperRatingSchema","required":["rating_key_map"],"type":"object","properties":{"rating_key_map":{"$ref":"#/components/schemas/RatingMap"}}},"MapperSchema":{"title":"MapperSchema","required":["key_map"],"type":"object","properties":{"key_map":{"$ref":"#/components/schemas/Map"}}},"MapperUpdateSchema":{"title":"MapperUpdateSchema","type":"object","properties":{"questions":{"title":"Questions","type":"object","additionalProperties":{"type":"object","additionalProperties":{"$ref":"#/components/schemas/MapperQuestionSchema"}},"example":{"skincare_history":{"q1":{"mapper":{"any":{"age":""}}},"q2":{"mapper":{"a":{"gender":"male"},"b":{"gender":"female"}}},"q7":{"mapper":{"~":{"a|b|c":{"exclude":["Retinol"]}}}}}}},"exclusive":{"title":"Exclusive","type":"object","additionalProperties":{"type":"string"},"example":{"prompt_key-1":"prompt_key-2"}},"prompt_sections":{"title":"Prompt Sections","type":"object","additionalProperties":{"type":"string"},"example":{"skincare_history":"I am {age} years old {gender}","skin_type":"My skin type is {skin_type}","include":"include these category {include}"}},"prompt_order":{"title":"Prompt Order","type":"array","items":{"type":"string"},"example":["skincare_history","include","skin_type"]},"gpt_settings":{"$ref":"#/components/schemas/QuestionnaireGPTOptionalSchema"}}},"MapperUserSchema":{"title":"MapperUserSchema","required":["user_key_map"],"type":"object","properties":{"user_key_map":{"$ref":"#/components/schemas/UserMap"}}},"NotFound":{"title":"NotFound","required":["detail"],"type":"object","properties":{"detail":{"title":"Detail","type":"object","example":{"response":"Unauthorized","error":"error details"}}}},"PurchaseItems":{"title":"PurchaseItems","required":["item_id","price","quantity"],"type":"object","properties":{"item_id":{"title":"Item Id","minLength":1,"type":"string"},"price":{"title":"Price","type":"number"},"quantity":{"title":"Quantity","type":"integer"}}},"PurchaseMap":{"title":"PurchaseMap","required":["user_id","item_id","price","quantity","date"],"type":"object","properties":{"user_id":{"title":"User Id","minLength":1,"type":"string","example":"user_id"},"member_id":{"title":"Member Id","minLength":1,"type":"string","example":"member_id"},"item_id":{"title":"Item Id","minLength":1,"type":"string","example":"item_id"},"price":{"title":"Price","minLength":1,"type":"string","example":"price"},"quantity":{"title":"Quantity","minLength":1,"type":"string","example":"quantity"},"date":{"title":"Date","minLength":1,"type":"string","example":"purchased_at"}}},"PurchaseSchema":{"title":"PurchaseSchema","required":["user_id","item_list"],"type":"object","properties":{"user_id":{"title":"User Id","minLength":1,"type":"string","example":"a0cc6beb-2909-459b-be55-62196af78ce4"},"member_id":{"title":"Member Id","type":"string","example":"df3456tg-2909-459b-be55-62196afedf85"},"item_list":{"title":"Item List","type":"array","items":{"$ref":"#/components/schemas/PurchaseItems"},"example":[{"item_id":"1000757666","price":5000,"quantity":1},{"item_id":"1000764491","price":400,"quantity":7}]}}},"QuestionSchema":{"title":"QuestionSchema","required":["question","options"],"type":"object","properties":{"question":{"title":"Question","minLength":1,"type":"string","example":"what is your favorite color?"},"type":{"allOf":[{"$ref":"#/components/schemas/QuestionType"}],"example":"radio/checkbox/free text....."},"options":{"title":"Options","type":"object","additionalProperties":{"type":"string"},"example":{"a":"value 1","b":"Value 2","c":"Value 3"}}}},"QuestionType":{"title":"QuestionType","enum":["radio","checkbox","text"],"type":"string","description":"An enumeration."},"QuestionnaireGPTOptionalSchema":{"title":"QuestionnaireGPTOptionalSchema","type":"object","properties":{"model":{"$ref":"#/components/schemas/GPTModel"},"search_max_token":{"title":"Search Max Token","type":"integer","default":2500,"example":2500},"intro":{"title":"Intro","minLength":1,"type":"string","example":"Share a little context about the question"},"system":{"title":"System","type":"string","example":"You are an expert on ..."},"temperature":{"title":"Temperature","maximum":2,"minimum":0,"type":"number","default":0,"example":0},"top_p":{"title":"Top P","maximum":1,"minimum":0,"type":"number","default":1,"example":1},"frequency_penalty":{"title":"Frequency Penalty","maximum":2,"minimum":0,"type":"number","default":0,"example":0},"presence_penalty":{"title":"Presence Penalty","maximum":2,"minimum":0,"type":"number","default":0,"example":0},"stop":{"title":"Stop","type":"array","items":{"type":"string"},"default":["AI:","Human:"],"example":["AI:","Human:"]}}},"QuestionnaireGPTSchema":{"title":"QuestionnaireGPTSchema","required":["model","intro"],"type":"object","properties":{"model":{"$ref":"#/components/schemas/GPTModel"},"search_max_token":{"title":"Search Max Token","type":"integer","default":2500,"example":2500},"intro":{"title":"Intro","minLength":1,"type":"string","example":"Share a little context about the question"},"system":{"title":"System","type":"string","example":"You are an expert on ..."},"temperature":{"title":"Temperature","maximum":2,"minimum":0,"type":"number","default":0,"example":0},"top_p":{"title":"Top P","maximum":1,"minimum":0,"type":"number","default":1,"example":1},"frequency_penalty":{"title":"Frequency Penalty","maximum":2,"minimum":0,"type":"number","default":0,"example":0},"presence_penalty":{"title":"Presence Penalty","maximum":2,"minimum":0,"type":"number","default":0,"example":0},"stop":{"title":"Stop","type":"array","items":{"type":"string"},"default":["AI:","Human:"],"example":["AI:","Human:"]}}},"QuestionnaireInsertSchema":{"title":"QuestionnaireInsertSchema","required":["name","questions"],"type":"object","properties":{"name":{"title":"Name","type":"string","example":"Name of your questionnaire"},"questions":{"title":"Questions","type":"object","additionalProperties":{"type":"object","additionalProperties":{"$ref":"#/components/schemas/QuestionSchema"}},"example":{"skincare_history":{"q1":{"question":"whats your age?","type":"text","options":{"age":""}},"q2":{"question":"whats your gender?","type":"radio","options":{"a":"male","b":"female"}}},"skincare_goal":{"q1":{"question":"what is your skincare concern?","type":"checkbox","options":{"a":"acne","b":"anti-aging","c":"Closed comedons(blackheads, whiteheads)","d":"Hyperpigmentation","e":"Dullness","f":"Dehydrated skin"}}}}}}},"QuestionnaireRequestSchema":{"title":"QuestionnaireRequestSchema","required":["user_id","questionnaire_id","values"],"type":"object","properties":{"user_id":{"title":"User Id","minLength":1,"type":"string","example":"a0cc6beb-2909-459b-be55-62196af78ce4"},"member_id":{"title":"Member Id","type":"string","example":"df3456tg-2909-459b-be55-62196afedf85"},"questionnaire_id":{"title":"Questionnaire Id","type":"string","example":"c8e9fd30-1d85-4bd6-929a-47cc509c5756"},"values":{"title":"Values","type":"object","additionalProperties":{"type":"object"},"example":{"section_name":{"q1":"c","q2":"a","q3":"b"}}}}},"QuestionnaireUpdateSchema":{"title":"QuestionnaireUpdateSchema","required":["questions"],"type":"object","properties":{"name":{"title":"Name","type":"string","example":"Name of your questionnaire"},"questions":{"title":"Questions","type":"object","additionalProperties":{"type":"object","additionalProperties":{"$ref":"#/components/schemas/QuestionSchema"}},"example":{"skincare_history":{"q1":{"question":"whats your age?","type":"text","options":{"age":""}},"q2":{"question":"whats your gender?","type":"radio","options":{"a":"male","b":"female"}}},"skincare_goal":{"q1":{"question":"what is your skincare concern?","type":"checkbox","options":{"a":"acne","b":"anti-aging","c":"Closed comedons(blackheads, whiteheads)","d":"Hyperpigmentation","e":"Dullness","f":"Dehydrated skin"}}}}}}},"Radius":{"title":"Radius","required":["d_from","d_to"],"type":"object","properties":{"d_from":{"title":"D From","type":"integer"},"d_to":{"title":"D To","type":"integer"}}},"RankFields":{"title":"RankFields","required":["interval","split_size","epoch"],"type":"object","properties":{"interval":{"type":"array","items":{"$ref":"#/components/schemas/RankType"},"example":["weekly","bi-weekly","monthly","quarterly","yearly"]},"split_size":{"title":"Split Size","type":"number","example":0.1},"epoch":{"title":"Epoch","type":"integer","example":200}}},"RankRecommendSchema":{"title":"RankRecommendSchema","required":["top_n_item","interval","details"],"type":"object","properties":{"top_n_item":{"title":"Top N Item","type":"integer","example":100},"interval":{"$ref":"#/components/schemas/RankType"},"details":{"title":"Details","type":"boolean","example":true}}},"RankSchema":{"title":"RankSchema","required":["rank_settings"],"type":"object","properties":{"rank_settings":{"$ref":"#/components/schemas/RankFields"}}},"RankType":{"title":"RankType","enum":["weekly","bi-weekly","monthly","quarterly","yearly"],"type":"string","description":"An enumeration."},"RatingMap":{"title":"RatingMap","required":["user_id","item_id","rating","date"],"type":"object","properties":{"user_id":{"title":"User Id","minLength":1,"type":"string","example":"user_id"},"member_id":{"title":"Member Id","minLength":1,"type":"string","example":"member_id"},"item_id":{"title":"Item Id","minLength":1,"type":"string","example":"item_id"},"rating":{"title":"Rating","minLength":1,"type":"string","example":"rating"},"date":{"title":"Date","minLength":1,"type":"string","example":"rated_at"}}},"RatingSchema":{"title":"RatingSchema","required":["user_id","item_id","rating"],"type":"object","properties":{"user_id":{"title":"User Id","minLength":1,"type":"string","example":"a0cc6beb-2909-459b-be55-62196af78ce4"},"member_id":{"title":"Member Id","type":"string","example":"df3456tg-2909-459b-be55-62196afedf85"},"item_id":{"title":"Item Id","minLength":1,"type":"string","example":"1000764491"},"rating":{"title":"Rating","minLength":1,"type":"string","example":"1"}}},"ReachSchema":{"title":"ReachSchema","type":"object","properties":{"start_date":{"title":"Start Date","type":"string","example":"2021-08-05"},"end_date":{"title":"End Date","type":"string","example":"2021-08-06"}}},"ReachType":{"title":"ReachType","enum":["total","daily"],"type":"string","description":"An enumeration."},"ReindexSchema":{"title":"ReindexSchema","required":["index_type","mappings"],"type":"object","properties":{"index_type":{"allOf":[{"$ref":"#/components/schemas/IndexType"}],"example":"Available values are items, image_features, browse, purchase, ratings, search, stats, settings, user, tasks, logs, gpt_dataset, gpt_dataset_meta, questionnaire"},"mappings":{"title":"Mappings","type":"object","example":{"settings":{"analysis":{}},"mappings":{"properties":{"item":{"properties":{}}}}}}}},"SaveStatSchema":{"title":"SaveStatSchema","type":"object","properties":{"start_date":{"title":"Start Date","type":"string","example":"2021-08-05"},"end_date":{"title":"End Date","type":"string","example":"2021-08-06"}}},"SearchRecommendSchema":{"title":"SearchRecommendSchema","required":["user_id","type","storage","details"],"type":"object","properties":{"user_id":{"title":"User Id","minLength":1,"type":"string","example":"a0cc6beb-2909-459b-be55-62196af78ce4"},"member_id":{"title":"Member Id","type":"string","example":"df3456tg-2909-459b-be55-62196afedf85"},"type":{"$ref":"#/components/schemas/GPTSearchType"},"storage":{"$ref":"#/components/schemas/StorageType"},"search_size":{"title":"Search Size","type":"integer","default":1000,"example":1000},"start":{"title":"Start","type":"integer","default":0,"example":0},"size":{"title":"Size","type":"integer","default":10,"example":10},"language":{"title":"Language","type":"string","example":"en"},"is_keyword_enabled":{"title":"Is Keyword Enabled","type":"boolean","default":false,"example":false},"details":{"title":"Details","type":"boolean","example":true}}},"ServerError":{"title":"ServerError","required":["detail"],"type":"object","properties":{"detail":{"title":"Detail","type":"object","example":{"response":"Server Error","error":"error details"}}}},"Status":{"title":"Status","enum":["claimable","pending","success","cancelled","failed"],"type":"string","description":"An enumeration."},"StorageType":{"title":"StorageType","enum":["memory","database"],"type":"string","description":"An enumeration."},"Success":{"title":"Success","required":["detail"],"type":"object","properties":{"detail":{"title":"Detail","type":"object","example":{"response":"Success"}}}},"TaskType":{"title":"TaskType","enum":["item_train","image_train","rank_train","insight_process"],"type":"string","description":"An enumeration."},"TooManyRequests":{"title":"TooManyRequests","required":["detail"],"type":"object","properties":{"detail":{"title":"Detail","type":"object","example":{"response":"Too many requests","error":"error details"}}}},"Unauthorized":{"title":"Unauthorized","required":["detail"],"type":"object","properties":{"detail":{"title":"Detail","type":"object","example":{"response":"Unauthorized","error":"error details"}}}},"UrlType":{"title":"UrlType","enum":["STR","LIST_STR","LIST_DICT","DICT"],"type":"string","description":"An enumeration."},"UserInfo":{"title":"UserInfo","type":"object","properties":{"address":{"title":"Address","minLength":1,"type":"string"},"gender":{"title":"Gender","type":"integer","example":"integer --> 1 for male or 2 for female or 3 for others"},"age":{"title":"Age","type":"integer","example":25},"user_type":{"title":"User Type","type":"array","items":{"type":"object"},"example":[{"key_name1":"value1_value2","separator":"_"},{"key_name2":"value3"}]}}},"UserMap":{"title":"UserMap","required":["user_id"],"type":"object","properties":{"user_id":{"title":"User Id","minLength":1,"type":"string","example":"customer_id"},"member_id":{"title":"Member Id","minLength":1,"type":"string","example":"member_id"},"address":{"title":"Address","minLength":1,"type":"string","example":"residence"},"gender":{"title":"Gender","minLength":1,"type":"string","example":"gender"},"age":{"title":"Age","minLength":1,"type":"string","example":"age"},"user_type":{"title":"User Type","type":"array","items":{"$ref":"#/components/schemas/UserType"},"example":[{"type_name":"column_name1","separator":"_"},{"type_name":"column_name2"}]}}},"UserSchema":{"title":"UserSchema","required":["user_id","user_info"],"type":"object","properties":{"user_id":{"title":"User Id","minLength":1,"type":"string","example":"a0cc6beb-2909-459b-be55-62196af78ce4"},"member_id":{"title":"Member Id","type":"string","example":"df3456tg-2909-459b-be55-62196afedf85"},"user_info":{"$ref":"#/components/schemas/UserInfo"}}},"UserType":{"title":"UserType","required":["type_name"],"type":"object","properties":{"type_name":{"title":"Type Name","type":"string"},"separator":{"title":"Separator","type":"string","example":"_"}}},"ValidationError":{"title":"ValidationError","required":["loc","msg","type"],"type":"object","properties":{"loc":{"title":"Location","type":"array","items":{"anyOf":[{"type":"string"},{"type":"integer"}]}},"msg":{"title":"Message","type":"string"},"type":{"title":"Error Type","type":"string"}}}}},"servers":[{"url":"https://api.recommender.gigalogy.com","description":"Production"}]}
================================================================================
